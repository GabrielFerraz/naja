Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> primario
Rule 2     program -> primario program
Rule 3     program -> NOVALINHA
Rule 4     primario -> controle
Rule 5     primario -> declaracao
Rule 6     primario -> definicao
Rule 7     primario -> atribuicao
Rule 8     primario -> chamada
Rule 9     primario -> defsubfuncao
Rule 10    primario -> NOVALINHA primario
Rule 11    controle -> se
Rule 12    controle -> enquanto
Rule 13    controle -> para
Rule 14    declaracao -> TIPO ID
Rule 15    empty -> <empty>
Rule 16    senaosemais -> senaose senaosemais
Rule 17    senaosemais -> empty
Rule 18    senaose -> SENAOSE expressao : suite
Rule 19    senao -> SENAO : suite
Rule 20    senao -> empty
Rule 21    se -> SE expressao : suite senaosemais senao FIM
Rule 22    enquanto -> ENQUANTO expressao : suite FIM
Rule 23    intid -> INT
Rule 24    intid -> ID
Rule 25    para -> PARA ID DE intid ATE intid : suite FIM
Rule 26    definicao -> DEF TIPO ID ( params ) : suite_sem_retorno retorna FIM
Rule 27    definicao -> DEF TIPO ID ( params ) : suite_sem_retorno retorna novalinha FIM
Rule 28    novalinha -> NOVALINHA
Rule 29    novalinha -> NOVALINHA novalinha
Rule 30    defsubfuncao -> DEF VAZIO ID ( params ) : suite FIM
Rule 31    atribuicao -> ID [ INT ] = valor
Rule 32    atribuicao -> ID = valor
Rule 33    valorvalor -> , valor valorvalor
Rule 34    valorvalor -> empty
Rule 35    chamada -> ID ( valor valorvalor )
Rule 36    chamada -> ID ( )
Rule 37    valor -> ID
Rule 38    valor -> literal
Rule 39    valor -> chamada
Rule 40    valor -> CONSTANTE
Rule 41    comparacao -> valor
Rule 42    comparacao -> valor operador_comp valor
Rule 43    operador_comp -> <
Rule 44    operador_comp -> >
Rule 45    operador_comp -> IGUIG
Rule 46    operador_comp -> MAIORIG
Rule 47    operador_comp -> MENORIG
Rule 48    operador_comp -> DIF
Rule 49    exponenciacao -> comparacao
Rule 50    exponenciacao -> comparacao EXP exp_u
Rule 51    exp_u -> exponenciacao
Rule 52    exp_u -> - exp_u
Rule 53    exp_u -> + exp_u
Rule 54    exp_m -> exp_u
Rule 55    exp_m -> exp_m * exp_u
Rule 56    exp_m -> exp_m DIVINT exp_u
Rule 57    exp_m -> exp_m / exp_u
Rule 58    exp_a -> exp_m
Rule 59    exp_a -> exp_a + exp_m
Rule 60    exp_a -> exp_a - exp_m
Rule 61    exp_nao -> exp_a
Rule 62    exp_nao -> ! exp_nao
Rule 63    exp_e -> exp_nao
Rule 64    exp_e -> exp_e E exp_nao
Rule 65    exp_ou -> exp_e
Rule 66    exp_ou -> exp_ou OU exp_e
Rule 67    expressao -> exp_ou
Rule 68    param -> declaracao
Rule 69    params -> param , params
Rule 70    params -> param
Rule 71    params -> empty
Rule 72    retorna -> RETORNA expressao
Rule 73    imprime -> IMPRIME expressao
Rule 74    op_aum -> MAISIG
Rule 75    op_aum -> MENOSIG
Rule 76    op_aum -> MULTIG
Rule 77    op_aum -> DIVIG
Rule 78    op_aum -> MODIG
Rule 79    op_aum -> EXPIG
Rule 80    atribuicao_aumentada -> ID op_aum valor
Rule 81    suite -> afirmacao
Rule 82    suite -> afirmacao NOVALINHA suite
Rule 83    suite -> NOVALINHA suite
Rule 84    suite -> empty
Rule 85    suite_sem_retorno -> afirmacao_sem_retorno
Rule 86    suite_sem_retorno -> afirmacao_sem_retorno NOVALINHA suite_sem_retorno
Rule 87    suite_sem_retorno -> NOVALINHA suite_sem_retorno
Rule 88    suite_sem_retorno -> empty
Rule 89    afirmacao -> afirm_simples
Rule 90    afirmacao -> afirm_composto
Rule 91    afirmacao_sem_retorno -> afirm_simples_sem_retorno
Rule 92    afirmacao_sem_retorno -> afirm_composto
Rule 93    afirm_simples -> atribuicao
Rule 94    afirm_simples -> atribuicao_aumentada
Rule 95    afirm_simples -> imprime
Rule 96    afirm_simples -> retorna
Rule 97    afirm_simples -> declaracao
Rule 98    afirm_simples -> QUEBRA
Rule 99    afirm_simples -> CONTINUA
Rule 100   afirm_simples_sem_retorno -> atribuicao
Rule 101   afirm_simples_sem_retorno -> atribuicao_aumentada
Rule 102   afirm_simples_sem_retorno -> imprime
Rule 103   afirm_simples_sem_retorno -> declaracao
Rule 104   afirm_simples_sem_retorno -> QUEBRA
Rule 105   afirm_simples_sem_retorno -> CONTINUA
Rule 106   afirm_composto -> se
Rule 107   afirm_composto -> enquanto
Rule 108   afirm_composto -> para
Rule 109   literal -> PALAVRA
Rule 110   literal -> INT
Rule 111   literal -> REAL

Terminals, with rules where they appear

!                    : 62
(                    : 26 27 30 35 36
)                    : 26 27 30 35 36
*                    : 55
+                    : 53 59
,                    : 33 69
-                    : 52 60
/                    : 57
:                    : 18 19 21 22 25 26 27 30
<                    : 43
=                    : 31 32
>                    : 44
ATE                  : 25
CONSTANTE            : 40
CONTINUA             : 99 105
DE                   : 25
DEF                  : 26 27 30
DIF                  : 48
DIVIG                : 77
DIVINT               : 56
E                    : 64
ENQUANTO             : 22
EXP                  : 50
EXPIG                : 79
FIM                  : 21 22 25 26 27 30
ID                   : 14 24 25 26 27 30 31 32 35 36 37 80
IGUIG                : 45
IMPRIME              : 73
INT                  : 23 31 110
MAIORIG              : 46
MAISIG               : 74
MENORIG              : 47
MENOSIG              : 75
MODIG                : 78
MULTIG               : 76
NOVALINHA            : 3 10 28 29 82 83 86 87
OU                   : 66
PALAVRA              : 109
PARA                 : 25
QUEBRA               : 98 104
REAL                 : 111
RETORNA              : 72
SE                   : 21
SENAO                : 19
SENAOSE              : 18
TIPO                 : 14 26 27
VAZIO                : 30
[                    : 31
]                    : 31
error                : 

Nonterminals, with rules where they appear

afirm_composto       : 90 92
afirm_simples        : 89
afirm_simples_sem_retorno : 91
afirmacao            : 81 82
afirmacao_sem_retorno : 85 86
atribuicao           : 7 93 100
atribuicao_aumentada : 94 101
chamada              : 8 39
comparacao           : 49 50
controle             : 4
declaracao           : 5 68 97 103
definicao            : 6
defsubfuncao         : 9
empty                : 17 20 34 71 84 88
enquanto             : 12 107
exp_a                : 59 60 61
exp_e                : 64 65 66
exp_m                : 55 56 57 58 59 60
exp_nao              : 62 63 64
exp_ou               : 66 67
exp_u                : 50 52 53 54 55 56 57
exponenciacao        : 51
expressao            : 18 21 22 72 73
imprime              : 95 102
intid                : 25 25
literal              : 38
novalinha            : 27 29
op_aum               : 80
operador_comp        : 42
para                 : 13 108
param                : 69 70
params               : 26 27 30 69
primario             : 1 2 10
program              : 2 0
retorna              : 26 27 96
se                   : 11 106
senao                : 21
senaose              : 16
senaosemais          : 16 21
suite                : 18 19 21 22 25 30 82 83
suite_sem_retorno    : 26 27 86 87
valor                : 31 32 33 35 41 42 42 80
valorvalor           : 33 35

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . primario
    (2) program -> . primario program
    (3) program -> . NOVALINHA
    (4) primario -> . controle
    (5) primario -> . declaracao
    (6) primario -> . definicao
    (7) primario -> . atribuicao
    (8) primario -> . chamada
    (9) primario -> . defsubfuncao
    (10) primario -> . NOVALINHA primario
    (11) controle -> . se
    (12) controle -> . enquanto
    (13) controle -> . para
    (14) declaracao -> . TIPO ID
    (26) definicao -> . DEF TIPO ID ( params ) : suite_sem_retorno retorna FIM
    (27) definicao -> . DEF TIPO ID ( params ) : suite_sem_retorno retorna novalinha FIM
    (31) atribuicao -> . ID [ INT ] = valor
    (32) atribuicao -> . ID = valor
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )
    (30) defsubfuncao -> . DEF VAZIO ID ( params ) : suite FIM
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    NOVALINHA       shift and go to state 3
    TIPO            shift and go to state 5
    DEF             shift and go to state 2
    ID              shift and go to state 13
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    enquanto                       shift and go to state 4
    program                        shift and go to state 7
    controle                       shift and go to state 8
    para                           shift and go to state 9
    chamada                        shift and go to state 10
    definicao                      shift and go to state 11
    declaracao                     shift and go to state 12
    atribuicao                     shift and go to state 15
    defsubfuncao                   shift and go to state 16
    primario                       shift and go to state 6
    se                             shift and go to state 18

state 1

    (25) para -> PARA . ID DE intid ATE intid : suite FIM

    ID              shift and go to state 19


state 2

    (26) definicao -> DEF . TIPO ID ( params ) : suite_sem_retorno retorna FIM
    (27) definicao -> DEF . TIPO ID ( params ) : suite_sem_retorno retorna novalinha FIM
    (30) defsubfuncao -> DEF . VAZIO ID ( params ) : suite FIM

    TIPO            shift and go to state 20
    VAZIO           shift and go to state 21


state 3

    (3) program -> NOVALINHA .
    (10) primario -> NOVALINHA . primario
    (4) primario -> . controle
    (5) primario -> . declaracao
    (6) primario -> . definicao
    (7) primario -> . atribuicao
    (8) primario -> . chamada
    (9) primario -> . defsubfuncao
    (10) primario -> . NOVALINHA primario
    (11) controle -> . se
    (12) controle -> . enquanto
    (13) controle -> . para
    (14) declaracao -> . TIPO ID
    (26) definicao -> . DEF TIPO ID ( params ) : suite_sem_retorno retorna FIM
    (27) definicao -> . DEF TIPO ID ( params ) : suite_sem_retorno retorna novalinha FIM
    (31) atribuicao -> . ID [ INT ] = valor
    (32) atribuicao -> . ID = valor
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )
    (30) defsubfuncao -> . DEF VAZIO ID ( params ) : suite FIM
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    $end            reduce using rule 3 (program -> NOVALINHA .)
    NOVALINHA       shift and go to state 22
    TIPO            shift and go to state 5
    DEF             shift and go to state 2
    ID              shift and go to state 13
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    enquanto                       shift and go to state 4
    para                           shift and go to state 9
    primario                       shift and go to state 23
    chamada                        shift and go to state 10
    defsubfuncao                   shift and go to state 16
    atribuicao                     shift and go to state 15
    controle                       shift and go to state 8
    definicao                      shift and go to state 11
    declaracao                     shift and go to state 12
    se                             shift and go to state 18

state 4

    (12) controle -> enquanto .

    NOVALINHA       reduce using rule 12 (controle -> enquanto .)
    TIPO            reduce using rule 12 (controle -> enquanto .)
    DEF             reduce using rule 12 (controle -> enquanto .)
    ID              reduce using rule 12 (controle -> enquanto .)
    SE              reduce using rule 12 (controle -> enquanto .)
    ENQUANTO        reduce using rule 12 (controle -> enquanto .)
    PARA            reduce using rule 12 (controle -> enquanto .)
    $end            reduce using rule 12 (controle -> enquanto .)


state 5

    (14) declaracao -> TIPO . ID

    ID              shift and go to state 24


state 6

    (1) program -> primario .
    (2) program -> primario . program
    (1) program -> . primario
    (2) program -> . primario program
    (3) program -> . NOVALINHA
    (4) primario -> . controle
    (5) primario -> . declaracao
    (6) primario -> . definicao
    (7) primario -> . atribuicao
    (8) primario -> . chamada
    (9) primario -> . defsubfuncao
    (10) primario -> . NOVALINHA primario
    (11) controle -> . se
    (12) controle -> . enquanto
    (13) controle -> . para
    (14) declaracao -> . TIPO ID
    (26) definicao -> . DEF TIPO ID ( params ) : suite_sem_retorno retorna FIM
    (27) definicao -> . DEF TIPO ID ( params ) : suite_sem_retorno retorna novalinha FIM
    (31) atribuicao -> . ID [ INT ] = valor
    (32) atribuicao -> . ID = valor
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )
    (30) defsubfuncao -> . DEF VAZIO ID ( params ) : suite FIM
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    $end            reduce using rule 1 (program -> primario .)
    NOVALINHA       shift and go to state 3
    TIPO            shift and go to state 5
    DEF             shift and go to state 2
    ID              shift and go to state 13
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    enquanto                       shift and go to state 4
    program                        shift and go to state 25
    controle                       shift and go to state 8
    para                           shift and go to state 9
    chamada                        shift and go to state 10
    definicao                      shift and go to state 11
    declaracao                     shift and go to state 12
    atribuicao                     shift and go to state 15
    defsubfuncao                   shift and go to state 16
    primario                       shift and go to state 6
    se                             shift and go to state 18

state 7

    (0) S' -> program .



state 8

    (4) primario -> controle .

    NOVALINHA       reduce using rule 4 (primario -> controle .)
    TIPO            reduce using rule 4 (primario -> controle .)
    DEF             reduce using rule 4 (primario -> controle .)
    ID              reduce using rule 4 (primario -> controle .)
    SE              reduce using rule 4 (primario -> controle .)
    ENQUANTO        reduce using rule 4 (primario -> controle .)
    PARA            reduce using rule 4 (primario -> controle .)
    $end            reduce using rule 4 (primario -> controle .)


state 9

    (13) controle -> para .

    NOVALINHA       reduce using rule 13 (controle -> para .)
    TIPO            reduce using rule 13 (controle -> para .)
    DEF             reduce using rule 13 (controle -> para .)
    ID              reduce using rule 13 (controle -> para .)
    SE              reduce using rule 13 (controle -> para .)
    ENQUANTO        reduce using rule 13 (controle -> para .)
    PARA            reduce using rule 13 (controle -> para .)
    $end            reduce using rule 13 (controle -> para .)


state 10

    (8) primario -> chamada .

    NOVALINHA       reduce using rule 8 (primario -> chamada .)
    TIPO            reduce using rule 8 (primario -> chamada .)
    DEF             reduce using rule 8 (primario -> chamada .)
    ID              reduce using rule 8 (primario -> chamada .)
    SE              reduce using rule 8 (primario -> chamada .)
    ENQUANTO        reduce using rule 8 (primario -> chamada .)
    PARA            reduce using rule 8 (primario -> chamada .)
    $end            reduce using rule 8 (primario -> chamada .)


state 11

    (6) primario -> definicao .

    NOVALINHA       reduce using rule 6 (primario -> definicao .)
    TIPO            reduce using rule 6 (primario -> definicao .)
    DEF             reduce using rule 6 (primario -> definicao .)
    ID              reduce using rule 6 (primario -> definicao .)
    SE              reduce using rule 6 (primario -> definicao .)
    ENQUANTO        reduce using rule 6 (primario -> definicao .)
    PARA            reduce using rule 6 (primario -> definicao .)
    $end            reduce using rule 6 (primario -> definicao .)


state 12

    (5) primario -> declaracao .

    NOVALINHA       reduce using rule 5 (primario -> declaracao .)
    TIPO            reduce using rule 5 (primario -> declaracao .)
    DEF             reduce using rule 5 (primario -> declaracao .)
    ID              reduce using rule 5 (primario -> declaracao .)
    SE              reduce using rule 5 (primario -> declaracao .)
    ENQUANTO        reduce using rule 5 (primario -> declaracao .)
    PARA            reduce using rule 5 (primario -> declaracao .)
    $end            reduce using rule 5 (primario -> declaracao .)


state 13

    (31) atribuicao -> ID . [ INT ] = valor
    (32) atribuicao -> ID . = valor
    (35) chamada -> ID . ( valor valorvalor )
    (36) chamada -> ID . ( )

    [               shift and go to state 27
    =               shift and go to state 28
    (               shift and go to state 26


state 14

    (22) enquanto -> ENQUANTO . expressao : suite FIM
    (67) expressao -> . exp_ou
    (65) exp_ou -> . exp_e
    (66) exp_ou -> . exp_ou OU exp_e
    (63) exp_e -> . exp_nao
    (64) exp_e -> . exp_e E exp_nao
    (61) exp_nao -> . exp_a
    (62) exp_nao -> . ! exp_nao
    (58) exp_a -> . exp_m
    (59) exp_a -> . exp_a + exp_m
    (60) exp_a -> . exp_a - exp_m
    (54) exp_m -> . exp_u
    (55) exp_m -> . exp_m * exp_u
    (56) exp_m -> . exp_m DIVINT exp_u
    (57) exp_m -> . exp_m / exp_u
    (51) exp_u -> . exponenciacao
    (52) exp_u -> . - exp_u
    (53) exp_u -> . + exp_u
    (49) exponenciacao -> . comparacao
    (50) exponenciacao -> . comparacao EXP exp_u
    (41) comparacao -> . valor
    (42) comparacao -> . valor operador_comp valor
    (37) valor -> . ID
    (38) valor -> . literal
    (39) valor -> . chamada
    (40) valor -> . CONSTANTE
    (109) literal -> . PALAVRA
    (110) literal -> . INT
    (111) literal -> . REAL
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )

    !               shift and go to state 43
    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    exp_e                          shift and go to state 30
    exp_a                          shift and go to state 31
    comparacao                     shift and go to state 32
    exp_m                          shift and go to state 33
    expressao                      shift and go to state 34
    chamada                        shift and go to state 41
    valor                          shift and go to state 40
    exp_u                          shift and go to state 37
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    exp_nao                        shift and go to state 47
    exp_ou                         shift and go to state 42

state 15

    (7) primario -> atribuicao .

    NOVALINHA       reduce using rule 7 (primario -> atribuicao .)
    TIPO            reduce using rule 7 (primario -> atribuicao .)
    DEF             reduce using rule 7 (primario -> atribuicao .)
    ID              reduce using rule 7 (primario -> atribuicao .)
    SE              reduce using rule 7 (primario -> atribuicao .)
    ENQUANTO        reduce using rule 7 (primario -> atribuicao .)
    PARA            reduce using rule 7 (primario -> atribuicao .)
    $end            reduce using rule 7 (primario -> atribuicao .)


state 16

    (9) primario -> defsubfuncao .

    NOVALINHA       reduce using rule 9 (primario -> defsubfuncao .)
    TIPO            reduce using rule 9 (primario -> defsubfuncao .)
    DEF             reduce using rule 9 (primario -> defsubfuncao .)
    ID              reduce using rule 9 (primario -> defsubfuncao .)
    SE              reduce using rule 9 (primario -> defsubfuncao .)
    ENQUANTO        reduce using rule 9 (primario -> defsubfuncao .)
    PARA            reduce using rule 9 (primario -> defsubfuncao .)
    $end            reduce using rule 9 (primario -> defsubfuncao .)


state 17

    (21) se -> SE . expressao : suite senaosemais senao FIM
    (67) expressao -> . exp_ou
    (65) exp_ou -> . exp_e
    (66) exp_ou -> . exp_ou OU exp_e
    (63) exp_e -> . exp_nao
    (64) exp_e -> . exp_e E exp_nao
    (61) exp_nao -> . exp_a
    (62) exp_nao -> . ! exp_nao
    (58) exp_a -> . exp_m
    (59) exp_a -> . exp_a + exp_m
    (60) exp_a -> . exp_a - exp_m
    (54) exp_m -> . exp_u
    (55) exp_m -> . exp_m * exp_u
    (56) exp_m -> . exp_m DIVINT exp_u
    (57) exp_m -> . exp_m / exp_u
    (51) exp_u -> . exponenciacao
    (52) exp_u -> . - exp_u
    (53) exp_u -> . + exp_u
    (49) exponenciacao -> . comparacao
    (50) exponenciacao -> . comparacao EXP exp_u
    (41) comparacao -> . valor
    (42) comparacao -> . valor operador_comp valor
    (37) valor -> . ID
    (38) valor -> . literal
    (39) valor -> . chamada
    (40) valor -> . CONSTANTE
    (109) literal -> . PALAVRA
    (110) literal -> . INT
    (111) literal -> . REAL
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )

    !               shift and go to state 43
    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    exp_e                          shift and go to state 30
    exp_a                          shift and go to state 31
    comparacao                     shift and go to state 32
    exp_m                          shift and go to state 33
    expressao                      shift and go to state 49
    chamada                        shift and go to state 41
    exp_u                          shift and go to state 37
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    exp_nao                        shift and go to state 47
    exp_ou                         shift and go to state 42
    valor                          shift and go to state 40

state 18

    (11) controle -> se .

    NOVALINHA       reduce using rule 11 (controle -> se .)
    TIPO            reduce using rule 11 (controle -> se .)
    DEF             reduce using rule 11 (controle -> se .)
    ID              reduce using rule 11 (controle -> se .)
    SE              reduce using rule 11 (controle -> se .)
    ENQUANTO        reduce using rule 11 (controle -> se .)
    PARA            reduce using rule 11 (controle -> se .)
    $end            reduce using rule 11 (controle -> se .)


state 19

    (25) para -> PARA ID . DE intid ATE intid : suite FIM

    DE              shift and go to state 50


state 20

    (26) definicao -> DEF TIPO . ID ( params ) : suite_sem_retorno retorna FIM
    (27) definicao -> DEF TIPO . ID ( params ) : suite_sem_retorno retorna novalinha FIM

    ID              shift and go to state 51


state 21

    (30) defsubfuncao -> DEF VAZIO . ID ( params ) : suite FIM

    ID              shift and go to state 52


state 22

    (10) primario -> NOVALINHA . primario
    (4) primario -> . controle
    (5) primario -> . declaracao
    (6) primario -> . definicao
    (7) primario -> . atribuicao
    (8) primario -> . chamada
    (9) primario -> . defsubfuncao
    (10) primario -> . NOVALINHA primario
    (11) controle -> . se
    (12) controle -> . enquanto
    (13) controle -> . para
    (14) declaracao -> . TIPO ID
    (26) definicao -> . DEF TIPO ID ( params ) : suite_sem_retorno retorna FIM
    (27) definicao -> . DEF TIPO ID ( params ) : suite_sem_retorno retorna novalinha FIM
    (31) atribuicao -> . ID [ INT ] = valor
    (32) atribuicao -> . ID = valor
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )
    (30) defsubfuncao -> . DEF VAZIO ID ( params ) : suite FIM
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    NOVALINHA       shift and go to state 22
    TIPO            shift and go to state 5
    DEF             shift and go to state 2
    ID              shift and go to state 13
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    enquanto                       shift and go to state 4
    para                           shift and go to state 9
    primario                       shift and go to state 23
    chamada                        shift and go to state 10
    defsubfuncao                   shift and go to state 16
    atribuicao                     shift and go to state 15
    controle                       shift and go to state 8
    definicao                      shift and go to state 11
    declaracao                     shift and go to state 12
    se                             shift and go to state 18

state 23

    (10) primario -> NOVALINHA primario .

    NOVALINHA       reduce using rule 10 (primario -> NOVALINHA primario .)
    TIPO            reduce using rule 10 (primario -> NOVALINHA primario .)
    DEF             reduce using rule 10 (primario -> NOVALINHA primario .)
    ID              reduce using rule 10 (primario -> NOVALINHA primario .)
    SE              reduce using rule 10 (primario -> NOVALINHA primario .)
    ENQUANTO        reduce using rule 10 (primario -> NOVALINHA primario .)
    PARA            reduce using rule 10 (primario -> NOVALINHA primario .)
    $end            reduce using rule 10 (primario -> NOVALINHA primario .)


state 24

    (14) declaracao -> TIPO ID .

    NOVALINHA       reduce using rule 14 (declaracao -> TIPO ID .)
    TIPO            reduce using rule 14 (declaracao -> TIPO ID .)
    DEF             reduce using rule 14 (declaracao -> TIPO ID .)
    ID              reduce using rule 14 (declaracao -> TIPO ID .)
    SE              reduce using rule 14 (declaracao -> TIPO ID .)
    ENQUANTO        reduce using rule 14 (declaracao -> TIPO ID .)
    PARA            reduce using rule 14 (declaracao -> TIPO ID .)
    $end            reduce using rule 14 (declaracao -> TIPO ID .)
    RETORNA         reduce using rule 14 (declaracao -> TIPO ID .)
    FIM             reduce using rule 14 (declaracao -> TIPO ID .)
    SENAOSE         reduce using rule 14 (declaracao -> TIPO ID .)
    SENAO           reduce using rule 14 (declaracao -> TIPO ID .)
    ,               reduce using rule 14 (declaracao -> TIPO ID .)
    )               reduce using rule 14 (declaracao -> TIPO ID .)


state 25

    (2) program -> primario program .

    $end            reduce using rule 2 (program -> primario program .)


state 26

    (35) chamada -> ID ( . valor valorvalor )
    (36) chamada -> ID ( . )
    (37) valor -> . ID
    (38) valor -> . literal
    (39) valor -> . chamada
    (40) valor -> . CONSTANTE
    (109) literal -> . PALAVRA
    (110) literal -> . INT
    (111) literal -> . REAL
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )

    )               shift and go to state 53
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    literal                        shift and go to state 38
    chamada                        shift and go to state 41
    valor                          shift and go to state 54

state 27

    (31) atribuicao -> ID [ . INT ] = valor

    INT             shift and go to state 55


state 28

    (32) atribuicao -> ID = . valor
    (37) valor -> . ID
    (38) valor -> . literal
    (39) valor -> . chamada
    (40) valor -> . CONSTANTE
    (109) literal -> . PALAVRA
    (110) literal -> . INT
    (111) literal -> . REAL
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )

    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    literal                        shift and go to state 38
    chamada                        shift and go to state 41
    valor                          shift and go to state 56

state 29

    (111) literal -> REAL .

    <               reduce using rule 111 (literal -> REAL .)
    >               reduce using rule 111 (literal -> REAL .)
    IGUIG           reduce using rule 111 (literal -> REAL .)
    MAIORIG         reduce using rule 111 (literal -> REAL .)
    MENORIG         reduce using rule 111 (literal -> REAL .)
    DIF             reduce using rule 111 (literal -> REAL .)
    EXP             reduce using rule 111 (literal -> REAL .)
    *               reduce using rule 111 (literal -> REAL .)
    DIVINT          reduce using rule 111 (literal -> REAL .)
    /               reduce using rule 111 (literal -> REAL .)
    +               reduce using rule 111 (literal -> REAL .)
    -               reduce using rule 111 (literal -> REAL .)
    E               reduce using rule 111 (literal -> REAL .)
    OU              reduce using rule 111 (literal -> REAL .)
    :               reduce using rule 111 (literal -> REAL .)
    NOVALINHA       reduce using rule 111 (literal -> REAL .)
    FIM             reduce using rule 111 (literal -> REAL .)
    SENAOSE         reduce using rule 111 (literal -> REAL .)
    SENAO           reduce using rule 111 (literal -> REAL .)
    RETORNA         reduce using rule 111 (literal -> REAL .)
    ,               reduce using rule 111 (literal -> REAL .)
    )               reduce using rule 111 (literal -> REAL .)
    TIPO            reduce using rule 111 (literal -> REAL .)
    DEF             reduce using rule 111 (literal -> REAL .)
    ID              reduce using rule 111 (literal -> REAL .)
    SE              reduce using rule 111 (literal -> REAL .)
    ENQUANTO        reduce using rule 111 (literal -> REAL .)
    PARA            reduce using rule 111 (literal -> REAL .)
    $end            reduce using rule 111 (literal -> REAL .)


state 30

    (65) exp_ou -> exp_e .
    (64) exp_e -> exp_e . E exp_nao

    OU              reduce using rule 65 (exp_ou -> exp_e .)
    NOVALINHA       reduce using rule 65 (exp_ou -> exp_e .)
    FIM             reduce using rule 65 (exp_ou -> exp_e .)
    SENAOSE         reduce using rule 65 (exp_ou -> exp_e .)
    SENAO           reduce using rule 65 (exp_ou -> exp_e .)
    :               reduce using rule 65 (exp_ou -> exp_e .)
    RETORNA         reduce using rule 65 (exp_ou -> exp_e .)
    E               shift and go to state 57


state 31

    (61) exp_nao -> exp_a .
    (59) exp_a -> exp_a . + exp_m
    (60) exp_a -> exp_a . - exp_m

    E               reduce using rule 61 (exp_nao -> exp_a .)
    OU              reduce using rule 61 (exp_nao -> exp_a .)
    :               reduce using rule 61 (exp_nao -> exp_a .)
    NOVALINHA       reduce using rule 61 (exp_nao -> exp_a .)
    FIM             reduce using rule 61 (exp_nao -> exp_a .)
    SENAOSE         reduce using rule 61 (exp_nao -> exp_a .)
    SENAO           reduce using rule 61 (exp_nao -> exp_a .)
    RETORNA         reduce using rule 61 (exp_nao -> exp_a .)
    +               shift and go to state 59
    -               shift and go to state 58


state 32

    (49) exponenciacao -> comparacao .
    (50) exponenciacao -> comparacao . EXP exp_u

    *               reduce using rule 49 (exponenciacao -> comparacao .)
    DIVINT          reduce using rule 49 (exponenciacao -> comparacao .)
    /               reduce using rule 49 (exponenciacao -> comparacao .)
    +               reduce using rule 49 (exponenciacao -> comparacao .)
    -               reduce using rule 49 (exponenciacao -> comparacao .)
    E               reduce using rule 49 (exponenciacao -> comparacao .)
    OU              reduce using rule 49 (exponenciacao -> comparacao .)
    :               reduce using rule 49 (exponenciacao -> comparacao .)
    NOVALINHA       reduce using rule 49 (exponenciacao -> comparacao .)
    FIM             reduce using rule 49 (exponenciacao -> comparacao .)
    SENAOSE         reduce using rule 49 (exponenciacao -> comparacao .)
    SENAO           reduce using rule 49 (exponenciacao -> comparacao .)
    RETORNA         reduce using rule 49 (exponenciacao -> comparacao .)
    EXP             shift and go to state 60


state 33

    (58) exp_a -> exp_m .
    (55) exp_m -> exp_m . * exp_u
    (56) exp_m -> exp_m . DIVINT exp_u
    (57) exp_m -> exp_m . / exp_u

    +               reduce using rule 58 (exp_a -> exp_m .)
    -               reduce using rule 58 (exp_a -> exp_m .)
    E               reduce using rule 58 (exp_a -> exp_m .)
    OU              reduce using rule 58 (exp_a -> exp_m .)
    :               reduce using rule 58 (exp_a -> exp_m .)
    NOVALINHA       reduce using rule 58 (exp_a -> exp_m .)
    FIM             reduce using rule 58 (exp_a -> exp_m .)
    SENAOSE         reduce using rule 58 (exp_a -> exp_m .)
    SENAO           reduce using rule 58 (exp_a -> exp_m .)
    RETORNA         reduce using rule 58 (exp_a -> exp_m .)
    *               shift and go to state 62
    DIVINT          shift and go to state 61
    /               shift and go to state 63


state 34

    (22) enquanto -> ENQUANTO expressao . : suite FIM

    :               shift and go to state 64


state 35

    (53) exp_u -> + . exp_u
    (51) exp_u -> . exponenciacao
    (52) exp_u -> . - exp_u
    (53) exp_u -> . + exp_u
    (49) exponenciacao -> . comparacao
    (50) exponenciacao -> . comparacao EXP exp_u
    (41) comparacao -> . valor
    (42) comparacao -> . valor operador_comp valor
    (37) valor -> . ID
    (38) valor -> . literal
    (39) valor -> . chamada
    (40) valor -> . CONSTANTE
    (109) literal -> . PALAVRA
    (110) literal -> . INT
    (111) literal -> . REAL
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )

    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    comparacao                     shift and go to state 32
    chamada                        shift and go to state 41
    exp_u                          shift and go to state 65
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    valor                          shift and go to state 40

state 36

    (52) exp_u -> - . exp_u
    (51) exp_u -> . exponenciacao
    (52) exp_u -> . - exp_u
    (53) exp_u -> . + exp_u
    (49) exponenciacao -> . comparacao
    (50) exponenciacao -> . comparacao EXP exp_u
    (41) comparacao -> . valor
    (42) comparacao -> . valor operador_comp valor
    (37) valor -> . ID
    (38) valor -> . literal
    (39) valor -> . chamada
    (40) valor -> . CONSTANTE
    (109) literal -> . PALAVRA
    (110) literal -> . INT
    (111) literal -> . REAL
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )

    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    comparacao                     shift and go to state 32
    chamada                        shift and go to state 41
    exp_u                          shift and go to state 66
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    valor                          shift and go to state 40

state 37

    (54) exp_m -> exp_u .

    *               reduce using rule 54 (exp_m -> exp_u .)
    DIVINT          reduce using rule 54 (exp_m -> exp_u .)
    /               reduce using rule 54 (exp_m -> exp_u .)
    +               reduce using rule 54 (exp_m -> exp_u .)
    -               reduce using rule 54 (exp_m -> exp_u .)
    E               reduce using rule 54 (exp_m -> exp_u .)
    OU              reduce using rule 54 (exp_m -> exp_u .)
    :               reduce using rule 54 (exp_m -> exp_u .)
    NOVALINHA       reduce using rule 54 (exp_m -> exp_u .)
    FIM             reduce using rule 54 (exp_m -> exp_u .)
    SENAOSE         reduce using rule 54 (exp_m -> exp_u .)
    SENAO           reduce using rule 54 (exp_m -> exp_u .)
    RETORNA         reduce using rule 54 (exp_m -> exp_u .)


state 38

    (38) valor -> literal .

    <               reduce using rule 38 (valor -> literal .)
    >               reduce using rule 38 (valor -> literal .)
    IGUIG           reduce using rule 38 (valor -> literal .)
    MAIORIG         reduce using rule 38 (valor -> literal .)
    MENORIG         reduce using rule 38 (valor -> literal .)
    DIF             reduce using rule 38 (valor -> literal .)
    EXP             reduce using rule 38 (valor -> literal .)
    *               reduce using rule 38 (valor -> literal .)
    DIVINT          reduce using rule 38 (valor -> literal .)
    /               reduce using rule 38 (valor -> literal .)
    +               reduce using rule 38 (valor -> literal .)
    -               reduce using rule 38 (valor -> literal .)
    E               reduce using rule 38 (valor -> literal .)
    OU              reduce using rule 38 (valor -> literal .)
    :               reduce using rule 38 (valor -> literal .)
    NOVALINHA       reduce using rule 38 (valor -> literal .)
    FIM             reduce using rule 38 (valor -> literal .)
    SENAOSE         reduce using rule 38 (valor -> literal .)
    SENAO           reduce using rule 38 (valor -> literal .)
    RETORNA         reduce using rule 38 (valor -> literal .)
    TIPO            reduce using rule 38 (valor -> literal .)
    DEF             reduce using rule 38 (valor -> literal .)
    ID              reduce using rule 38 (valor -> literal .)
    SE              reduce using rule 38 (valor -> literal .)
    ENQUANTO        reduce using rule 38 (valor -> literal .)
    PARA            reduce using rule 38 (valor -> literal .)
    $end            reduce using rule 38 (valor -> literal .)
    ,               reduce using rule 38 (valor -> literal .)
    )               reduce using rule 38 (valor -> literal .)


state 39

    (51) exp_u -> exponenciacao .

    *               reduce using rule 51 (exp_u -> exponenciacao .)
    DIVINT          reduce using rule 51 (exp_u -> exponenciacao .)
    /               reduce using rule 51 (exp_u -> exponenciacao .)
    +               reduce using rule 51 (exp_u -> exponenciacao .)
    -               reduce using rule 51 (exp_u -> exponenciacao .)
    E               reduce using rule 51 (exp_u -> exponenciacao .)
    OU              reduce using rule 51 (exp_u -> exponenciacao .)
    :               reduce using rule 51 (exp_u -> exponenciacao .)
    NOVALINHA       reduce using rule 51 (exp_u -> exponenciacao .)
    FIM             reduce using rule 51 (exp_u -> exponenciacao .)
    SENAOSE         reduce using rule 51 (exp_u -> exponenciacao .)
    SENAO           reduce using rule 51 (exp_u -> exponenciacao .)
    RETORNA         reduce using rule 51 (exp_u -> exponenciacao .)


state 40

    (41) comparacao -> valor .
    (42) comparacao -> valor . operador_comp valor
    (43) operador_comp -> . <
    (44) operador_comp -> . >
    (45) operador_comp -> . IGUIG
    (46) operador_comp -> . MAIORIG
    (47) operador_comp -> . MENORIG
    (48) operador_comp -> . DIF

    EXP             reduce using rule 41 (comparacao -> valor .)
    *               reduce using rule 41 (comparacao -> valor .)
    DIVINT          reduce using rule 41 (comparacao -> valor .)
    /               reduce using rule 41 (comparacao -> valor .)
    +               reduce using rule 41 (comparacao -> valor .)
    -               reduce using rule 41 (comparacao -> valor .)
    E               reduce using rule 41 (comparacao -> valor .)
    OU              reduce using rule 41 (comparacao -> valor .)
    :               reduce using rule 41 (comparacao -> valor .)
    NOVALINHA       reduce using rule 41 (comparacao -> valor .)
    FIM             reduce using rule 41 (comparacao -> valor .)
    SENAOSE         reduce using rule 41 (comparacao -> valor .)
    SENAO           reduce using rule 41 (comparacao -> valor .)
    RETORNA         reduce using rule 41 (comparacao -> valor .)
    <               shift and go to state 72
    >               shift and go to state 73
    IGUIG           shift and go to state 71
    MAIORIG         shift and go to state 70
    MENORIG         shift and go to state 67
    DIF             shift and go to state 68

    operador_comp                  shift and go to state 69

state 41

    (39) valor -> chamada .

    <               reduce using rule 39 (valor -> chamada .)
    >               reduce using rule 39 (valor -> chamada .)
    IGUIG           reduce using rule 39 (valor -> chamada .)
    MAIORIG         reduce using rule 39 (valor -> chamada .)
    MENORIG         reduce using rule 39 (valor -> chamada .)
    DIF             reduce using rule 39 (valor -> chamada .)
    EXP             reduce using rule 39 (valor -> chamada .)
    *               reduce using rule 39 (valor -> chamada .)
    DIVINT          reduce using rule 39 (valor -> chamada .)
    /               reduce using rule 39 (valor -> chamada .)
    +               reduce using rule 39 (valor -> chamada .)
    -               reduce using rule 39 (valor -> chamada .)
    E               reduce using rule 39 (valor -> chamada .)
    OU              reduce using rule 39 (valor -> chamada .)
    :               reduce using rule 39 (valor -> chamada .)
    NOVALINHA       reduce using rule 39 (valor -> chamada .)
    FIM             reduce using rule 39 (valor -> chamada .)
    SENAOSE         reduce using rule 39 (valor -> chamada .)
    SENAO           reduce using rule 39 (valor -> chamada .)
    RETORNA         reduce using rule 39 (valor -> chamada .)
    TIPO            reduce using rule 39 (valor -> chamada .)
    DEF             reduce using rule 39 (valor -> chamada .)
    ID              reduce using rule 39 (valor -> chamada .)
    SE              reduce using rule 39 (valor -> chamada .)
    ENQUANTO        reduce using rule 39 (valor -> chamada .)
    PARA            reduce using rule 39 (valor -> chamada .)
    $end            reduce using rule 39 (valor -> chamada .)
    ,               reduce using rule 39 (valor -> chamada .)
    )               reduce using rule 39 (valor -> chamada .)


state 42

    (67) expressao -> exp_ou .
    (66) exp_ou -> exp_ou . OU exp_e

    :               reduce using rule 67 (expressao -> exp_ou .)
    NOVALINHA       reduce using rule 67 (expressao -> exp_ou .)
    FIM             reduce using rule 67 (expressao -> exp_ou .)
    SENAOSE         reduce using rule 67 (expressao -> exp_ou .)
    SENAO           reduce using rule 67 (expressao -> exp_ou .)
    RETORNA         reduce using rule 67 (expressao -> exp_ou .)
    OU              shift and go to state 74


state 43

    (62) exp_nao -> ! . exp_nao
    (61) exp_nao -> . exp_a
    (62) exp_nao -> . ! exp_nao
    (58) exp_a -> . exp_m
    (59) exp_a -> . exp_a + exp_m
    (60) exp_a -> . exp_a - exp_m
    (54) exp_m -> . exp_u
    (55) exp_m -> . exp_m * exp_u
    (56) exp_m -> . exp_m DIVINT exp_u
    (57) exp_m -> . exp_m / exp_u
    (51) exp_u -> . exponenciacao
    (52) exp_u -> . - exp_u
    (53) exp_u -> . + exp_u
    (49) exponenciacao -> . comparacao
    (50) exponenciacao -> . comparacao EXP exp_u
    (41) comparacao -> . valor
    (42) comparacao -> . valor operador_comp valor
    (37) valor -> . ID
    (38) valor -> . literal
    (39) valor -> . chamada
    (40) valor -> . CONSTANTE
    (109) literal -> . PALAVRA
    (110) literal -> . INT
    (111) literal -> . REAL
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )

    !               shift and go to state 43
    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    exp_a                          shift and go to state 31
    comparacao                     shift and go to state 32
    exp_m                          shift and go to state 33
    exp_nao                        shift and go to state 75
    chamada                        shift and go to state 41
    exp_u                          shift and go to state 37
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    valor                          shift and go to state 40

state 44

    (109) literal -> PALAVRA .

    <               reduce using rule 109 (literal -> PALAVRA .)
    >               reduce using rule 109 (literal -> PALAVRA .)
    IGUIG           reduce using rule 109 (literal -> PALAVRA .)
    MAIORIG         reduce using rule 109 (literal -> PALAVRA .)
    MENORIG         reduce using rule 109 (literal -> PALAVRA .)
    DIF             reduce using rule 109 (literal -> PALAVRA .)
    EXP             reduce using rule 109 (literal -> PALAVRA .)
    *               reduce using rule 109 (literal -> PALAVRA .)
    DIVINT          reduce using rule 109 (literal -> PALAVRA .)
    /               reduce using rule 109 (literal -> PALAVRA .)
    +               reduce using rule 109 (literal -> PALAVRA .)
    -               reduce using rule 109 (literal -> PALAVRA .)
    E               reduce using rule 109 (literal -> PALAVRA .)
    OU              reduce using rule 109 (literal -> PALAVRA .)
    :               reduce using rule 109 (literal -> PALAVRA .)
    NOVALINHA       reduce using rule 109 (literal -> PALAVRA .)
    FIM             reduce using rule 109 (literal -> PALAVRA .)
    SENAOSE         reduce using rule 109 (literal -> PALAVRA .)
    SENAO           reduce using rule 109 (literal -> PALAVRA .)
    RETORNA         reduce using rule 109 (literal -> PALAVRA .)
    ,               reduce using rule 109 (literal -> PALAVRA .)
    )               reduce using rule 109 (literal -> PALAVRA .)
    TIPO            reduce using rule 109 (literal -> PALAVRA .)
    DEF             reduce using rule 109 (literal -> PALAVRA .)
    ID              reduce using rule 109 (literal -> PALAVRA .)
    SE              reduce using rule 109 (literal -> PALAVRA .)
    ENQUANTO        reduce using rule 109 (literal -> PALAVRA .)
    PARA            reduce using rule 109 (literal -> PALAVRA .)
    $end            reduce using rule 109 (literal -> PALAVRA .)


state 45

    (37) valor -> ID .
    (35) chamada -> ID . ( valor valorvalor )
    (36) chamada -> ID . ( )

    <               reduce using rule 37 (valor -> ID .)
    >               reduce using rule 37 (valor -> ID .)
    IGUIG           reduce using rule 37 (valor -> ID .)
    MAIORIG         reduce using rule 37 (valor -> ID .)
    MENORIG         reduce using rule 37 (valor -> ID .)
    DIF             reduce using rule 37 (valor -> ID .)
    EXP             reduce using rule 37 (valor -> ID .)
    *               reduce using rule 37 (valor -> ID .)
    DIVINT          reduce using rule 37 (valor -> ID .)
    /               reduce using rule 37 (valor -> ID .)
    +               reduce using rule 37 (valor -> ID .)
    -               reduce using rule 37 (valor -> ID .)
    E               reduce using rule 37 (valor -> ID .)
    OU              reduce using rule 37 (valor -> ID .)
    :               reduce using rule 37 (valor -> ID .)
    NOVALINHA       reduce using rule 37 (valor -> ID .)
    FIM             reduce using rule 37 (valor -> ID .)
    SENAOSE         reduce using rule 37 (valor -> ID .)
    SENAO           reduce using rule 37 (valor -> ID .)
    RETORNA         reduce using rule 37 (valor -> ID .)
    TIPO            reduce using rule 37 (valor -> ID .)
    DEF             reduce using rule 37 (valor -> ID .)
    ID              reduce using rule 37 (valor -> ID .)
    SE              reduce using rule 37 (valor -> ID .)
    ENQUANTO        reduce using rule 37 (valor -> ID .)
    PARA            reduce using rule 37 (valor -> ID .)
    $end            reduce using rule 37 (valor -> ID .)
    ,               reduce using rule 37 (valor -> ID .)
    )               reduce using rule 37 (valor -> ID .)
    (               shift and go to state 26


state 46

    (40) valor -> CONSTANTE .

    <               reduce using rule 40 (valor -> CONSTANTE .)
    >               reduce using rule 40 (valor -> CONSTANTE .)
    IGUIG           reduce using rule 40 (valor -> CONSTANTE .)
    MAIORIG         reduce using rule 40 (valor -> CONSTANTE .)
    MENORIG         reduce using rule 40 (valor -> CONSTANTE .)
    DIF             reduce using rule 40 (valor -> CONSTANTE .)
    EXP             reduce using rule 40 (valor -> CONSTANTE .)
    *               reduce using rule 40 (valor -> CONSTANTE .)
    DIVINT          reduce using rule 40 (valor -> CONSTANTE .)
    /               reduce using rule 40 (valor -> CONSTANTE .)
    +               reduce using rule 40 (valor -> CONSTANTE .)
    -               reduce using rule 40 (valor -> CONSTANTE .)
    E               reduce using rule 40 (valor -> CONSTANTE .)
    OU              reduce using rule 40 (valor -> CONSTANTE .)
    :               reduce using rule 40 (valor -> CONSTANTE .)
    NOVALINHA       reduce using rule 40 (valor -> CONSTANTE .)
    FIM             reduce using rule 40 (valor -> CONSTANTE .)
    SENAOSE         reduce using rule 40 (valor -> CONSTANTE .)
    SENAO           reduce using rule 40 (valor -> CONSTANTE .)
    RETORNA         reduce using rule 40 (valor -> CONSTANTE .)
    TIPO            reduce using rule 40 (valor -> CONSTANTE .)
    DEF             reduce using rule 40 (valor -> CONSTANTE .)
    ID              reduce using rule 40 (valor -> CONSTANTE .)
    SE              reduce using rule 40 (valor -> CONSTANTE .)
    ENQUANTO        reduce using rule 40 (valor -> CONSTANTE .)
    PARA            reduce using rule 40 (valor -> CONSTANTE .)
    $end            reduce using rule 40 (valor -> CONSTANTE .)
    ,               reduce using rule 40 (valor -> CONSTANTE .)
    )               reduce using rule 40 (valor -> CONSTANTE .)


state 47

    (63) exp_e -> exp_nao .

    E               reduce using rule 63 (exp_e -> exp_nao .)
    OU              reduce using rule 63 (exp_e -> exp_nao .)
    NOVALINHA       reduce using rule 63 (exp_e -> exp_nao .)
    FIM             reduce using rule 63 (exp_e -> exp_nao .)
    SENAOSE         reduce using rule 63 (exp_e -> exp_nao .)
    SENAO           reduce using rule 63 (exp_e -> exp_nao .)
    RETORNA         reduce using rule 63 (exp_e -> exp_nao .)
    :               reduce using rule 63 (exp_e -> exp_nao .)


state 48

    (110) literal -> INT .

    <               reduce using rule 110 (literal -> INT .)
    >               reduce using rule 110 (literal -> INT .)
    IGUIG           reduce using rule 110 (literal -> INT .)
    MAIORIG         reduce using rule 110 (literal -> INT .)
    MENORIG         reduce using rule 110 (literal -> INT .)
    DIF             reduce using rule 110 (literal -> INT .)
    EXP             reduce using rule 110 (literal -> INT .)
    *               reduce using rule 110 (literal -> INT .)
    DIVINT          reduce using rule 110 (literal -> INT .)
    /               reduce using rule 110 (literal -> INT .)
    +               reduce using rule 110 (literal -> INT .)
    -               reduce using rule 110 (literal -> INT .)
    E               reduce using rule 110 (literal -> INT .)
    OU              reduce using rule 110 (literal -> INT .)
    :               reduce using rule 110 (literal -> INT .)
    NOVALINHA       reduce using rule 110 (literal -> INT .)
    FIM             reduce using rule 110 (literal -> INT .)
    SENAOSE         reduce using rule 110 (literal -> INT .)
    SENAO           reduce using rule 110 (literal -> INT .)
    RETORNA         reduce using rule 110 (literal -> INT .)
    ,               reduce using rule 110 (literal -> INT .)
    )               reduce using rule 110 (literal -> INT .)
    TIPO            reduce using rule 110 (literal -> INT .)
    DEF             reduce using rule 110 (literal -> INT .)
    ID              reduce using rule 110 (literal -> INT .)
    SE              reduce using rule 110 (literal -> INT .)
    ENQUANTO        reduce using rule 110 (literal -> INT .)
    PARA            reduce using rule 110 (literal -> INT .)
    $end            reduce using rule 110 (literal -> INT .)


state 49

    (21) se -> SE expressao . : suite senaosemais senao FIM

    :               shift and go to state 76


state 50

    (25) para -> PARA ID DE . intid ATE intid : suite FIM
    (23) intid -> . INT
    (24) intid -> . ID

    INT             shift and go to state 77
    ID              shift and go to state 79

    intid                          shift and go to state 78

state 51

    (26) definicao -> DEF TIPO ID . ( params ) : suite_sem_retorno retorna FIM
    (27) definicao -> DEF TIPO ID . ( params ) : suite_sem_retorno retorna novalinha FIM

    (               shift and go to state 80


state 52

    (30) defsubfuncao -> DEF VAZIO ID . ( params ) : suite FIM

    (               shift and go to state 81


state 53

    (36) chamada -> ID ( ) .

    <               reduce using rule 36 (chamada -> ID ( ) .)
    >               reduce using rule 36 (chamada -> ID ( ) .)
    IGUIG           reduce using rule 36 (chamada -> ID ( ) .)
    MAIORIG         reduce using rule 36 (chamada -> ID ( ) .)
    MENORIG         reduce using rule 36 (chamada -> ID ( ) .)
    DIF             reduce using rule 36 (chamada -> ID ( ) .)
    EXP             reduce using rule 36 (chamada -> ID ( ) .)
    *               reduce using rule 36 (chamada -> ID ( ) .)
    DIVINT          reduce using rule 36 (chamada -> ID ( ) .)
    /               reduce using rule 36 (chamada -> ID ( ) .)
    +               reduce using rule 36 (chamada -> ID ( ) .)
    -               reduce using rule 36 (chamada -> ID ( ) .)
    E               reduce using rule 36 (chamada -> ID ( ) .)
    OU              reduce using rule 36 (chamada -> ID ( ) .)
    :               reduce using rule 36 (chamada -> ID ( ) .)
    NOVALINHA       reduce using rule 36 (chamada -> ID ( ) .)
    FIM             reduce using rule 36 (chamada -> ID ( ) .)
    SENAOSE         reduce using rule 36 (chamada -> ID ( ) .)
    SENAO           reduce using rule 36 (chamada -> ID ( ) .)
    RETORNA         reduce using rule 36 (chamada -> ID ( ) .)
    TIPO            reduce using rule 36 (chamada -> ID ( ) .)
    DEF             reduce using rule 36 (chamada -> ID ( ) .)
    ID              reduce using rule 36 (chamada -> ID ( ) .)
    SE              reduce using rule 36 (chamada -> ID ( ) .)
    ENQUANTO        reduce using rule 36 (chamada -> ID ( ) .)
    PARA            reduce using rule 36 (chamada -> ID ( ) .)
    $end            reduce using rule 36 (chamada -> ID ( ) .)
    ,               reduce using rule 36 (chamada -> ID ( ) .)
    )               reduce using rule 36 (chamada -> ID ( ) .)


state 54

    (35) chamada -> ID ( valor . valorvalor )
    (33) valorvalor -> . , valor valorvalor
    (34) valorvalor -> . empty
    (15) empty -> .

    ,               shift and go to state 82
    )               reduce using rule 15 (empty -> .)

    empty                          shift and go to state 83
    valorvalor                     shift and go to state 84

state 55

    (31) atribuicao -> ID [ INT . ] = valor

    ]               shift and go to state 85


state 56

    (32) atribuicao -> ID = valor .

    NOVALINHA       reduce using rule 32 (atribuicao -> ID = valor .)
    SENAOSE         reduce using rule 32 (atribuicao -> ID = valor .)
    SENAO           reduce using rule 32 (atribuicao -> ID = valor .)
    FIM             reduce using rule 32 (atribuicao -> ID = valor .)
    TIPO            reduce using rule 32 (atribuicao -> ID = valor .)
    DEF             reduce using rule 32 (atribuicao -> ID = valor .)
    ID              reduce using rule 32 (atribuicao -> ID = valor .)
    SE              reduce using rule 32 (atribuicao -> ID = valor .)
    ENQUANTO        reduce using rule 32 (atribuicao -> ID = valor .)
    PARA            reduce using rule 32 (atribuicao -> ID = valor .)
    $end            reduce using rule 32 (atribuicao -> ID = valor .)
    RETORNA         reduce using rule 32 (atribuicao -> ID = valor .)


state 57

    (64) exp_e -> exp_e E . exp_nao
    (61) exp_nao -> . exp_a
    (62) exp_nao -> . ! exp_nao
    (58) exp_a -> . exp_m
    (59) exp_a -> . exp_a + exp_m
    (60) exp_a -> . exp_a - exp_m
    (54) exp_m -> . exp_u
    (55) exp_m -> . exp_m * exp_u
    (56) exp_m -> . exp_m DIVINT exp_u
    (57) exp_m -> . exp_m / exp_u
    (51) exp_u -> . exponenciacao
    (52) exp_u -> . - exp_u
    (53) exp_u -> . + exp_u
    (49) exponenciacao -> . comparacao
    (50) exponenciacao -> . comparacao EXP exp_u
    (41) comparacao -> . valor
    (42) comparacao -> . valor operador_comp valor
    (37) valor -> . ID
    (38) valor -> . literal
    (39) valor -> . chamada
    (40) valor -> . CONSTANTE
    (109) literal -> . PALAVRA
    (110) literal -> . INT
    (111) literal -> . REAL
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )

    !               shift and go to state 43
    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    exp_a                          shift and go to state 31
    comparacao                     shift and go to state 32
    exp_m                          shift and go to state 33
    exp_nao                        shift and go to state 86
    chamada                        shift and go to state 41
    exp_u                          shift and go to state 37
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    valor                          shift and go to state 40

state 58

    (60) exp_a -> exp_a - . exp_m
    (54) exp_m -> . exp_u
    (55) exp_m -> . exp_m * exp_u
    (56) exp_m -> . exp_m DIVINT exp_u
    (57) exp_m -> . exp_m / exp_u
    (51) exp_u -> . exponenciacao
    (52) exp_u -> . - exp_u
    (53) exp_u -> . + exp_u
    (49) exponenciacao -> . comparacao
    (50) exponenciacao -> . comparacao EXP exp_u
    (41) comparacao -> . valor
    (42) comparacao -> . valor operador_comp valor
    (37) valor -> . ID
    (38) valor -> . literal
    (39) valor -> . chamada
    (40) valor -> . CONSTANTE
    (109) literal -> . PALAVRA
    (110) literal -> . INT
    (111) literal -> . REAL
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )

    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    comparacao                     shift and go to state 32
    exp_m                          shift and go to state 87
    chamada                        shift and go to state 41
    exp_u                          shift and go to state 37
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    valor                          shift and go to state 40

state 59

    (59) exp_a -> exp_a + . exp_m
    (54) exp_m -> . exp_u
    (55) exp_m -> . exp_m * exp_u
    (56) exp_m -> . exp_m DIVINT exp_u
    (57) exp_m -> . exp_m / exp_u
    (51) exp_u -> . exponenciacao
    (52) exp_u -> . - exp_u
    (53) exp_u -> . + exp_u
    (49) exponenciacao -> . comparacao
    (50) exponenciacao -> . comparacao EXP exp_u
    (41) comparacao -> . valor
    (42) comparacao -> . valor operador_comp valor
    (37) valor -> . ID
    (38) valor -> . literal
    (39) valor -> . chamada
    (40) valor -> . CONSTANTE
    (109) literal -> . PALAVRA
    (110) literal -> . INT
    (111) literal -> . REAL
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )

    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    comparacao                     shift and go to state 32
    exp_m                          shift and go to state 88
    chamada                        shift and go to state 41
    exp_u                          shift and go to state 37
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    valor                          shift and go to state 40

state 60

    (50) exponenciacao -> comparacao EXP . exp_u
    (51) exp_u -> . exponenciacao
    (52) exp_u -> . - exp_u
    (53) exp_u -> . + exp_u
    (49) exponenciacao -> . comparacao
    (50) exponenciacao -> . comparacao EXP exp_u
    (41) comparacao -> . valor
    (42) comparacao -> . valor operador_comp valor
    (37) valor -> . ID
    (38) valor -> . literal
    (39) valor -> . chamada
    (40) valor -> . CONSTANTE
    (109) literal -> . PALAVRA
    (110) literal -> . INT
    (111) literal -> . REAL
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )

    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    comparacao                     shift and go to state 32
    chamada                        shift and go to state 41
    exp_u                          shift and go to state 89
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    valor                          shift and go to state 40

state 61

    (56) exp_m -> exp_m DIVINT . exp_u
    (51) exp_u -> . exponenciacao
    (52) exp_u -> . - exp_u
    (53) exp_u -> . + exp_u
    (49) exponenciacao -> . comparacao
    (50) exponenciacao -> . comparacao EXP exp_u
    (41) comparacao -> . valor
    (42) comparacao -> . valor operador_comp valor
    (37) valor -> . ID
    (38) valor -> . literal
    (39) valor -> . chamada
    (40) valor -> . CONSTANTE
    (109) literal -> . PALAVRA
    (110) literal -> . INT
    (111) literal -> . REAL
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )

    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    comparacao                     shift and go to state 32
    chamada                        shift and go to state 41
    exp_u                          shift and go to state 90
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    valor                          shift and go to state 40

state 62

    (55) exp_m -> exp_m * . exp_u
    (51) exp_u -> . exponenciacao
    (52) exp_u -> . - exp_u
    (53) exp_u -> . + exp_u
    (49) exponenciacao -> . comparacao
    (50) exponenciacao -> . comparacao EXP exp_u
    (41) comparacao -> . valor
    (42) comparacao -> . valor operador_comp valor
    (37) valor -> . ID
    (38) valor -> . literal
    (39) valor -> . chamada
    (40) valor -> . CONSTANTE
    (109) literal -> . PALAVRA
    (110) literal -> . INT
    (111) literal -> . REAL
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )

    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    comparacao                     shift and go to state 32
    chamada                        shift and go to state 41
    exp_u                          shift and go to state 91
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    valor                          shift and go to state 40

state 63

    (57) exp_m -> exp_m / . exp_u
    (51) exp_u -> . exponenciacao
    (52) exp_u -> . - exp_u
    (53) exp_u -> . + exp_u
    (49) exponenciacao -> . comparacao
    (50) exponenciacao -> . comparacao EXP exp_u
    (41) comparacao -> . valor
    (42) comparacao -> . valor operador_comp valor
    (37) valor -> . ID
    (38) valor -> . literal
    (39) valor -> . chamada
    (40) valor -> . CONSTANTE
    (109) literal -> . PALAVRA
    (110) literal -> . INT
    (111) literal -> . REAL
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )

    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    comparacao                     shift and go to state 32
    chamada                        shift and go to state 41
    exp_u                          shift and go to state 92
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    valor                          shift and go to state 40

state 64

    (22) enquanto -> ENQUANTO expressao : . suite FIM
    (81) suite -> . afirmacao
    (82) suite -> . afirmacao NOVALINHA suite
    (83) suite -> . NOVALINHA suite
    (84) suite -> . empty
    (89) afirmacao -> . afirm_simples
    (90) afirmacao -> . afirm_composto
    (15) empty -> .
    (93) afirm_simples -> . atribuicao
    (94) afirm_simples -> . atribuicao_aumentada
    (95) afirm_simples -> . imprime
    (96) afirm_simples -> . retorna
    (97) afirm_simples -> . declaracao
    (98) afirm_simples -> . QUEBRA
    (99) afirm_simples -> . CONTINUA
    (106) afirm_composto -> . se
    (107) afirm_composto -> . enquanto
    (108) afirm_composto -> . para
    (31) atribuicao -> . ID [ INT ] = valor
    (32) atribuicao -> . ID = valor
    (80) atribuicao_aumentada -> . ID op_aum valor
    (73) imprime -> . IMPRIME expressao
    (72) retorna -> . RETORNA expressao
    (14) declaracao -> . TIPO ID
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    NOVALINHA       shift and go to state 105
    FIM             reduce using rule 15 (empty -> .)
    QUEBRA          shift and go to state 109
    CONTINUA        shift and go to state 110
    ID              shift and go to state 106
    IMPRIME         shift and go to state 107
    RETORNA         shift and go to state 104
    TIPO            shift and go to state 5
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    imprime                        shift and go to state 101
    enquanto                       shift and go to state 96
    afirm_composto                 shift and go to state 102
    atribuicao_aumentada           shift and go to state 97
    afirmacao                      shift and go to state 93
    para                           shift and go to state 103
    se                             shift and go to state 111
    retorna                        shift and go to state 98
    atribuicao                     shift and go to state 108
    suite                          shift and go to state 99
    declaracao                     shift and go to state 95
    afirm_simples                  shift and go to state 94
    empty                          shift and go to state 100

state 65

    (53) exp_u -> + exp_u .

    *               reduce using rule 53 (exp_u -> + exp_u .)
    DIVINT          reduce using rule 53 (exp_u -> + exp_u .)
    /               reduce using rule 53 (exp_u -> + exp_u .)
    +               reduce using rule 53 (exp_u -> + exp_u .)
    -               reduce using rule 53 (exp_u -> + exp_u .)
    E               reduce using rule 53 (exp_u -> + exp_u .)
    OU              reduce using rule 53 (exp_u -> + exp_u .)
    :               reduce using rule 53 (exp_u -> + exp_u .)
    NOVALINHA       reduce using rule 53 (exp_u -> + exp_u .)
    FIM             reduce using rule 53 (exp_u -> + exp_u .)
    SENAOSE         reduce using rule 53 (exp_u -> + exp_u .)
    SENAO           reduce using rule 53 (exp_u -> + exp_u .)
    RETORNA         reduce using rule 53 (exp_u -> + exp_u .)


state 66

    (52) exp_u -> - exp_u .

    *               reduce using rule 52 (exp_u -> - exp_u .)
    DIVINT          reduce using rule 52 (exp_u -> - exp_u .)
    /               reduce using rule 52 (exp_u -> - exp_u .)
    +               reduce using rule 52 (exp_u -> - exp_u .)
    -               reduce using rule 52 (exp_u -> - exp_u .)
    E               reduce using rule 52 (exp_u -> - exp_u .)
    OU              reduce using rule 52 (exp_u -> - exp_u .)
    :               reduce using rule 52 (exp_u -> - exp_u .)
    NOVALINHA       reduce using rule 52 (exp_u -> - exp_u .)
    FIM             reduce using rule 52 (exp_u -> - exp_u .)
    SENAOSE         reduce using rule 52 (exp_u -> - exp_u .)
    SENAO           reduce using rule 52 (exp_u -> - exp_u .)
    RETORNA         reduce using rule 52 (exp_u -> - exp_u .)


state 67

    (47) operador_comp -> MENORIG .

    ID              reduce using rule 47 (operador_comp -> MENORIG .)
    CONSTANTE       reduce using rule 47 (operador_comp -> MENORIG .)
    PALAVRA         reduce using rule 47 (operador_comp -> MENORIG .)
    INT             reduce using rule 47 (operador_comp -> MENORIG .)
    REAL            reduce using rule 47 (operador_comp -> MENORIG .)


state 68

    (48) operador_comp -> DIF .

    ID              reduce using rule 48 (operador_comp -> DIF .)
    CONSTANTE       reduce using rule 48 (operador_comp -> DIF .)
    PALAVRA         reduce using rule 48 (operador_comp -> DIF .)
    INT             reduce using rule 48 (operador_comp -> DIF .)
    REAL            reduce using rule 48 (operador_comp -> DIF .)


state 69

    (42) comparacao -> valor operador_comp . valor
    (37) valor -> . ID
    (38) valor -> . literal
    (39) valor -> . chamada
    (40) valor -> . CONSTANTE
    (109) literal -> . PALAVRA
    (110) literal -> . INT
    (111) literal -> . REAL
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )

    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    literal                        shift and go to state 38
    chamada                        shift and go to state 41
    valor                          shift and go to state 112

state 70

    (46) operador_comp -> MAIORIG .

    ID              reduce using rule 46 (operador_comp -> MAIORIG .)
    CONSTANTE       reduce using rule 46 (operador_comp -> MAIORIG .)
    PALAVRA         reduce using rule 46 (operador_comp -> MAIORIG .)
    INT             reduce using rule 46 (operador_comp -> MAIORIG .)
    REAL            reduce using rule 46 (operador_comp -> MAIORIG .)


state 71

    (45) operador_comp -> IGUIG .

    ID              reduce using rule 45 (operador_comp -> IGUIG .)
    CONSTANTE       reduce using rule 45 (operador_comp -> IGUIG .)
    PALAVRA         reduce using rule 45 (operador_comp -> IGUIG .)
    INT             reduce using rule 45 (operador_comp -> IGUIG .)
    REAL            reduce using rule 45 (operador_comp -> IGUIG .)


state 72

    (43) operador_comp -> < .

    ID              reduce using rule 43 (operador_comp -> < .)
    CONSTANTE       reduce using rule 43 (operador_comp -> < .)
    PALAVRA         reduce using rule 43 (operador_comp -> < .)
    INT             reduce using rule 43 (operador_comp -> < .)
    REAL            reduce using rule 43 (operador_comp -> < .)


state 73

    (44) operador_comp -> > .

    ID              reduce using rule 44 (operador_comp -> > .)
    CONSTANTE       reduce using rule 44 (operador_comp -> > .)
    PALAVRA         reduce using rule 44 (operador_comp -> > .)
    INT             reduce using rule 44 (operador_comp -> > .)
    REAL            reduce using rule 44 (operador_comp -> > .)


state 74

    (66) exp_ou -> exp_ou OU . exp_e
    (63) exp_e -> . exp_nao
    (64) exp_e -> . exp_e E exp_nao
    (61) exp_nao -> . exp_a
    (62) exp_nao -> . ! exp_nao
    (58) exp_a -> . exp_m
    (59) exp_a -> . exp_a + exp_m
    (60) exp_a -> . exp_a - exp_m
    (54) exp_m -> . exp_u
    (55) exp_m -> . exp_m * exp_u
    (56) exp_m -> . exp_m DIVINT exp_u
    (57) exp_m -> . exp_m / exp_u
    (51) exp_u -> . exponenciacao
    (52) exp_u -> . - exp_u
    (53) exp_u -> . + exp_u
    (49) exponenciacao -> . comparacao
    (50) exponenciacao -> . comparacao EXP exp_u
    (41) comparacao -> . valor
    (42) comparacao -> . valor operador_comp valor
    (37) valor -> . ID
    (38) valor -> . literal
    (39) valor -> . chamada
    (40) valor -> . CONSTANTE
    (109) literal -> . PALAVRA
    (110) literal -> . INT
    (111) literal -> . REAL
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )

    !               shift and go to state 43
    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    exp_e                          shift and go to state 113
    exp_a                          shift and go to state 31
    comparacao                     shift and go to state 32
    exp_m                          shift and go to state 33
    exp_nao                        shift and go to state 47
    chamada                        shift and go to state 41
    exp_u                          shift and go to state 37
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    valor                          shift and go to state 40

state 75

    (62) exp_nao -> ! exp_nao .

    E               reduce using rule 62 (exp_nao -> ! exp_nao .)
    OU              reduce using rule 62 (exp_nao -> ! exp_nao .)
    :               reduce using rule 62 (exp_nao -> ! exp_nao .)
    NOVALINHA       reduce using rule 62 (exp_nao -> ! exp_nao .)
    FIM             reduce using rule 62 (exp_nao -> ! exp_nao .)
    SENAOSE         reduce using rule 62 (exp_nao -> ! exp_nao .)
    SENAO           reduce using rule 62 (exp_nao -> ! exp_nao .)
    RETORNA         reduce using rule 62 (exp_nao -> ! exp_nao .)


state 76

    (21) se -> SE expressao : . suite senaosemais senao FIM
    (81) suite -> . afirmacao
    (82) suite -> . afirmacao NOVALINHA suite
    (83) suite -> . NOVALINHA suite
    (84) suite -> . empty
    (89) afirmacao -> . afirm_simples
    (90) afirmacao -> . afirm_composto
    (15) empty -> .
    (93) afirm_simples -> . atribuicao
    (94) afirm_simples -> . atribuicao_aumentada
    (95) afirm_simples -> . imprime
    (96) afirm_simples -> . retorna
    (97) afirm_simples -> . declaracao
    (98) afirm_simples -> . QUEBRA
    (99) afirm_simples -> . CONTINUA
    (106) afirm_composto -> . se
    (107) afirm_composto -> . enquanto
    (108) afirm_composto -> . para
    (31) atribuicao -> . ID [ INT ] = valor
    (32) atribuicao -> . ID = valor
    (80) atribuicao_aumentada -> . ID op_aum valor
    (73) imprime -> . IMPRIME expressao
    (72) retorna -> . RETORNA expressao
    (14) declaracao -> . TIPO ID
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    NOVALINHA       shift and go to state 105
    SENAOSE         reduce using rule 15 (empty -> .)
    SENAO           reduce using rule 15 (empty -> .)
    FIM             reduce using rule 15 (empty -> .)
    QUEBRA          shift and go to state 109
    CONTINUA        shift and go to state 110
    ID              shift and go to state 106
    IMPRIME         shift and go to state 107
    RETORNA         shift and go to state 104
    TIPO            shift and go to state 5
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    imprime                        shift and go to state 101
    enquanto                       shift and go to state 96
    afirm_composto                 shift and go to state 102
    atribuicao_aumentada           shift and go to state 97
    afirmacao                      shift and go to state 93
    para                           shift and go to state 103
    se                             shift and go to state 111
    retorna                        shift and go to state 98
    atribuicao                     shift and go to state 108
    suite                          shift and go to state 114
    declaracao                     shift and go to state 95
    afirm_simples                  shift and go to state 94
    empty                          shift and go to state 100

state 77

    (23) intid -> INT .

    ATE             reduce using rule 23 (intid -> INT .)
    :               reduce using rule 23 (intid -> INT .)


state 78

    (25) para -> PARA ID DE intid . ATE intid : suite FIM

    ATE             shift and go to state 115


state 79

    (24) intid -> ID .

    ATE             reduce using rule 24 (intid -> ID .)
    :               reduce using rule 24 (intid -> ID .)


state 80

    (26) definicao -> DEF TIPO ID ( . params ) : suite_sem_retorno retorna FIM
    (27) definicao -> DEF TIPO ID ( . params ) : suite_sem_retorno retorna novalinha FIM
    (69) params -> . param , params
    (70) params -> . param
    (71) params -> . empty
    (68) param -> . declaracao
    (15) empty -> .
    (14) declaracao -> . TIPO ID

    )               reduce using rule 15 (empty -> .)
    TIPO            shift and go to state 5

    declaracao                     shift and go to state 116
    param                          shift and go to state 117
    params                         shift and go to state 118
    empty                          shift and go to state 119

state 81

    (30) defsubfuncao -> DEF VAZIO ID ( . params ) : suite FIM
    (69) params -> . param , params
    (70) params -> . param
    (71) params -> . empty
    (68) param -> . declaracao
    (15) empty -> .
    (14) declaracao -> . TIPO ID

    )               reduce using rule 15 (empty -> .)
    TIPO            shift and go to state 5

    declaracao                     shift and go to state 116
    params                         shift and go to state 120
    empty                          shift and go to state 119
    param                          shift and go to state 117

state 82

    (33) valorvalor -> , . valor valorvalor
    (37) valor -> . ID
    (38) valor -> . literal
    (39) valor -> . chamada
    (40) valor -> . CONSTANTE
    (109) literal -> . PALAVRA
    (110) literal -> . INT
    (111) literal -> . REAL
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )

    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    literal                        shift and go to state 38
    chamada                        shift and go to state 41
    valor                          shift and go to state 121

state 83

    (34) valorvalor -> empty .

    )               reduce using rule 34 (valorvalor -> empty .)


state 84

    (35) chamada -> ID ( valor valorvalor . )

    )               shift and go to state 122


state 85

    (31) atribuicao -> ID [ INT ] . = valor

    =               shift and go to state 123


state 86

    (64) exp_e -> exp_e E exp_nao .

    E               reduce using rule 64 (exp_e -> exp_e E exp_nao .)
    OU              reduce using rule 64 (exp_e -> exp_e E exp_nao .)
    NOVALINHA       reduce using rule 64 (exp_e -> exp_e E exp_nao .)
    FIM             reduce using rule 64 (exp_e -> exp_e E exp_nao .)
    SENAOSE         reduce using rule 64 (exp_e -> exp_e E exp_nao .)
    SENAO           reduce using rule 64 (exp_e -> exp_e E exp_nao .)
    RETORNA         reduce using rule 64 (exp_e -> exp_e E exp_nao .)
    :               reduce using rule 64 (exp_e -> exp_e E exp_nao .)


state 87

    (60) exp_a -> exp_a - exp_m .
    (55) exp_m -> exp_m . * exp_u
    (56) exp_m -> exp_m . DIVINT exp_u
    (57) exp_m -> exp_m . / exp_u

    +               reduce using rule 60 (exp_a -> exp_a - exp_m .)
    -               reduce using rule 60 (exp_a -> exp_a - exp_m .)
    E               reduce using rule 60 (exp_a -> exp_a - exp_m .)
    OU              reduce using rule 60 (exp_a -> exp_a - exp_m .)
    :               reduce using rule 60 (exp_a -> exp_a - exp_m .)
    NOVALINHA       reduce using rule 60 (exp_a -> exp_a - exp_m .)
    FIM             reduce using rule 60 (exp_a -> exp_a - exp_m .)
    SENAOSE         reduce using rule 60 (exp_a -> exp_a - exp_m .)
    SENAO           reduce using rule 60 (exp_a -> exp_a - exp_m .)
    RETORNA         reduce using rule 60 (exp_a -> exp_a - exp_m .)
    *               shift and go to state 62
    DIVINT          shift and go to state 61
    /               shift and go to state 63


state 88

    (59) exp_a -> exp_a + exp_m .
    (55) exp_m -> exp_m . * exp_u
    (56) exp_m -> exp_m . DIVINT exp_u
    (57) exp_m -> exp_m . / exp_u

    +               reduce using rule 59 (exp_a -> exp_a + exp_m .)
    -               reduce using rule 59 (exp_a -> exp_a + exp_m .)
    E               reduce using rule 59 (exp_a -> exp_a + exp_m .)
    OU              reduce using rule 59 (exp_a -> exp_a + exp_m .)
    :               reduce using rule 59 (exp_a -> exp_a + exp_m .)
    NOVALINHA       reduce using rule 59 (exp_a -> exp_a + exp_m .)
    FIM             reduce using rule 59 (exp_a -> exp_a + exp_m .)
    SENAOSE         reduce using rule 59 (exp_a -> exp_a + exp_m .)
    SENAO           reduce using rule 59 (exp_a -> exp_a + exp_m .)
    RETORNA         reduce using rule 59 (exp_a -> exp_a + exp_m .)
    *               shift and go to state 62
    DIVINT          shift and go to state 61
    /               shift and go to state 63


state 89

    (50) exponenciacao -> comparacao EXP exp_u .

    *               reduce using rule 50 (exponenciacao -> comparacao EXP exp_u .)
    DIVINT          reduce using rule 50 (exponenciacao -> comparacao EXP exp_u .)
    /               reduce using rule 50 (exponenciacao -> comparacao EXP exp_u .)
    +               reduce using rule 50 (exponenciacao -> comparacao EXP exp_u .)
    -               reduce using rule 50 (exponenciacao -> comparacao EXP exp_u .)
    E               reduce using rule 50 (exponenciacao -> comparacao EXP exp_u .)
    OU              reduce using rule 50 (exponenciacao -> comparacao EXP exp_u .)
    :               reduce using rule 50 (exponenciacao -> comparacao EXP exp_u .)
    NOVALINHA       reduce using rule 50 (exponenciacao -> comparacao EXP exp_u .)
    FIM             reduce using rule 50 (exponenciacao -> comparacao EXP exp_u .)
    SENAOSE         reduce using rule 50 (exponenciacao -> comparacao EXP exp_u .)
    SENAO           reduce using rule 50 (exponenciacao -> comparacao EXP exp_u .)
    RETORNA         reduce using rule 50 (exponenciacao -> comparacao EXP exp_u .)


state 90

    (56) exp_m -> exp_m DIVINT exp_u .

    *               reduce using rule 56 (exp_m -> exp_m DIVINT exp_u .)
    DIVINT          reduce using rule 56 (exp_m -> exp_m DIVINT exp_u .)
    /               reduce using rule 56 (exp_m -> exp_m DIVINT exp_u .)
    +               reduce using rule 56 (exp_m -> exp_m DIVINT exp_u .)
    -               reduce using rule 56 (exp_m -> exp_m DIVINT exp_u .)
    E               reduce using rule 56 (exp_m -> exp_m DIVINT exp_u .)
    OU              reduce using rule 56 (exp_m -> exp_m DIVINT exp_u .)
    :               reduce using rule 56 (exp_m -> exp_m DIVINT exp_u .)
    NOVALINHA       reduce using rule 56 (exp_m -> exp_m DIVINT exp_u .)
    FIM             reduce using rule 56 (exp_m -> exp_m DIVINT exp_u .)
    SENAOSE         reduce using rule 56 (exp_m -> exp_m DIVINT exp_u .)
    SENAO           reduce using rule 56 (exp_m -> exp_m DIVINT exp_u .)
    RETORNA         reduce using rule 56 (exp_m -> exp_m DIVINT exp_u .)


state 91

    (55) exp_m -> exp_m * exp_u .

    *               reduce using rule 55 (exp_m -> exp_m * exp_u .)
    DIVINT          reduce using rule 55 (exp_m -> exp_m * exp_u .)
    /               reduce using rule 55 (exp_m -> exp_m * exp_u .)
    +               reduce using rule 55 (exp_m -> exp_m * exp_u .)
    -               reduce using rule 55 (exp_m -> exp_m * exp_u .)
    E               reduce using rule 55 (exp_m -> exp_m * exp_u .)
    OU              reduce using rule 55 (exp_m -> exp_m * exp_u .)
    :               reduce using rule 55 (exp_m -> exp_m * exp_u .)
    NOVALINHA       reduce using rule 55 (exp_m -> exp_m * exp_u .)
    FIM             reduce using rule 55 (exp_m -> exp_m * exp_u .)
    SENAOSE         reduce using rule 55 (exp_m -> exp_m * exp_u .)
    SENAO           reduce using rule 55 (exp_m -> exp_m * exp_u .)
    RETORNA         reduce using rule 55 (exp_m -> exp_m * exp_u .)


state 92

    (57) exp_m -> exp_m / exp_u .

    *               reduce using rule 57 (exp_m -> exp_m / exp_u .)
    DIVINT          reduce using rule 57 (exp_m -> exp_m / exp_u .)
    /               reduce using rule 57 (exp_m -> exp_m / exp_u .)
    +               reduce using rule 57 (exp_m -> exp_m / exp_u .)
    -               reduce using rule 57 (exp_m -> exp_m / exp_u .)
    E               reduce using rule 57 (exp_m -> exp_m / exp_u .)
    OU              reduce using rule 57 (exp_m -> exp_m / exp_u .)
    :               reduce using rule 57 (exp_m -> exp_m / exp_u .)
    NOVALINHA       reduce using rule 57 (exp_m -> exp_m / exp_u .)
    FIM             reduce using rule 57 (exp_m -> exp_m / exp_u .)
    SENAOSE         reduce using rule 57 (exp_m -> exp_m / exp_u .)
    SENAO           reduce using rule 57 (exp_m -> exp_m / exp_u .)
    RETORNA         reduce using rule 57 (exp_m -> exp_m / exp_u .)


state 93

    (81) suite -> afirmacao .
    (82) suite -> afirmacao . NOVALINHA suite

    FIM             reduce using rule 81 (suite -> afirmacao .)
    SENAOSE         reduce using rule 81 (suite -> afirmacao .)
    SENAO           reduce using rule 81 (suite -> afirmacao .)
    NOVALINHA       shift and go to state 124


state 94

    (89) afirmacao -> afirm_simples .

    NOVALINHA       reduce using rule 89 (afirmacao -> afirm_simples .)
    FIM             reduce using rule 89 (afirmacao -> afirm_simples .)
    SENAOSE         reduce using rule 89 (afirmacao -> afirm_simples .)
    SENAO           reduce using rule 89 (afirmacao -> afirm_simples .)


state 95

    (97) afirm_simples -> declaracao .

    NOVALINHA       reduce using rule 97 (afirm_simples -> declaracao .)
    FIM             reduce using rule 97 (afirm_simples -> declaracao .)
    SENAOSE         reduce using rule 97 (afirm_simples -> declaracao .)
    SENAO           reduce using rule 97 (afirm_simples -> declaracao .)


state 96

    (107) afirm_composto -> enquanto .

    NOVALINHA       reduce using rule 107 (afirm_composto -> enquanto .)
    SENAOSE         reduce using rule 107 (afirm_composto -> enquanto .)
    SENAO           reduce using rule 107 (afirm_composto -> enquanto .)
    FIM             reduce using rule 107 (afirm_composto -> enquanto .)
    RETORNA         reduce using rule 107 (afirm_composto -> enquanto .)


state 97

    (94) afirm_simples -> atribuicao_aumentada .

    NOVALINHA       reduce using rule 94 (afirm_simples -> atribuicao_aumentada .)
    FIM             reduce using rule 94 (afirm_simples -> atribuicao_aumentada .)
    SENAOSE         reduce using rule 94 (afirm_simples -> atribuicao_aumentada .)
    SENAO           reduce using rule 94 (afirm_simples -> atribuicao_aumentada .)


state 98

    (96) afirm_simples -> retorna .

    NOVALINHA       reduce using rule 96 (afirm_simples -> retorna .)
    FIM             reduce using rule 96 (afirm_simples -> retorna .)
    SENAOSE         reduce using rule 96 (afirm_simples -> retorna .)
    SENAO           reduce using rule 96 (afirm_simples -> retorna .)


state 99

    (22) enquanto -> ENQUANTO expressao : suite . FIM

    FIM             shift and go to state 125


state 100

    (84) suite -> empty .

    FIM             reduce using rule 84 (suite -> empty .)
    SENAOSE         reduce using rule 84 (suite -> empty .)
    SENAO           reduce using rule 84 (suite -> empty .)


state 101

    (95) afirm_simples -> imprime .

    NOVALINHA       reduce using rule 95 (afirm_simples -> imprime .)
    FIM             reduce using rule 95 (afirm_simples -> imprime .)
    SENAOSE         reduce using rule 95 (afirm_simples -> imprime .)
    SENAO           reduce using rule 95 (afirm_simples -> imprime .)


state 102

    (90) afirmacao -> afirm_composto .

    NOVALINHA       reduce using rule 90 (afirmacao -> afirm_composto .)
    FIM             reduce using rule 90 (afirmacao -> afirm_composto .)
    SENAOSE         reduce using rule 90 (afirmacao -> afirm_composto .)
    SENAO           reduce using rule 90 (afirmacao -> afirm_composto .)


state 103

    (108) afirm_composto -> para .

    NOVALINHA       reduce using rule 108 (afirm_composto -> para .)
    SENAOSE         reduce using rule 108 (afirm_composto -> para .)
    SENAO           reduce using rule 108 (afirm_composto -> para .)
    FIM             reduce using rule 108 (afirm_composto -> para .)
    RETORNA         reduce using rule 108 (afirm_composto -> para .)


state 104

    (72) retorna -> RETORNA . expressao
    (67) expressao -> . exp_ou
    (65) exp_ou -> . exp_e
    (66) exp_ou -> . exp_ou OU exp_e
    (63) exp_e -> . exp_nao
    (64) exp_e -> . exp_e E exp_nao
    (61) exp_nao -> . exp_a
    (62) exp_nao -> . ! exp_nao
    (58) exp_a -> . exp_m
    (59) exp_a -> . exp_a + exp_m
    (60) exp_a -> . exp_a - exp_m
    (54) exp_m -> . exp_u
    (55) exp_m -> . exp_m * exp_u
    (56) exp_m -> . exp_m DIVINT exp_u
    (57) exp_m -> . exp_m / exp_u
    (51) exp_u -> . exponenciacao
    (52) exp_u -> . - exp_u
    (53) exp_u -> . + exp_u
    (49) exponenciacao -> . comparacao
    (50) exponenciacao -> . comparacao EXP exp_u
    (41) comparacao -> . valor
    (42) comparacao -> . valor operador_comp valor
    (37) valor -> . ID
    (38) valor -> . literal
    (39) valor -> . chamada
    (40) valor -> . CONSTANTE
    (109) literal -> . PALAVRA
    (110) literal -> . INT
    (111) literal -> . REAL
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )

    !               shift and go to state 43
    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    exp_e                          shift and go to state 30
    exp_a                          shift and go to state 31
    comparacao                     shift and go to state 32
    exp_m                          shift and go to state 33
    expressao                      shift and go to state 126
    chamada                        shift and go to state 41
    valor                          shift and go to state 40
    exp_u                          shift and go to state 37
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    exp_nao                        shift and go to state 47
    exp_ou                         shift and go to state 42

state 105

    (83) suite -> NOVALINHA . suite
    (81) suite -> . afirmacao
    (82) suite -> . afirmacao NOVALINHA suite
    (83) suite -> . NOVALINHA suite
    (84) suite -> . empty
    (89) afirmacao -> . afirm_simples
    (90) afirmacao -> . afirm_composto
    (15) empty -> .
    (93) afirm_simples -> . atribuicao
    (94) afirm_simples -> . atribuicao_aumentada
    (95) afirm_simples -> . imprime
    (96) afirm_simples -> . retorna
    (97) afirm_simples -> . declaracao
    (98) afirm_simples -> . QUEBRA
    (99) afirm_simples -> . CONTINUA
    (106) afirm_composto -> . se
    (107) afirm_composto -> . enquanto
    (108) afirm_composto -> . para
    (31) atribuicao -> . ID [ INT ] = valor
    (32) atribuicao -> . ID = valor
    (80) atribuicao_aumentada -> . ID op_aum valor
    (73) imprime -> . IMPRIME expressao
    (72) retorna -> . RETORNA expressao
    (14) declaracao -> . TIPO ID
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    NOVALINHA       shift and go to state 105
    FIM             reduce using rule 15 (empty -> .)
    SENAOSE         reduce using rule 15 (empty -> .)
    SENAO           reduce using rule 15 (empty -> .)
    QUEBRA          shift and go to state 109
    CONTINUA        shift and go to state 110
    ID              shift and go to state 106
    IMPRIME         shift and go to state 107
    RETORNA         shift and go to state 104
    TIPO            shift and go to state 5
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    imprime                        shift and go to state 101
    enquanto                       shift and go to state 96
    afirm_composto                 shift and go to state 102
    atribuicao_aumentada           shift and go to state 97
    atribuicao                     shift and go to state 108
    afirmacao                      shift and go to state 93
    para                           shift and go to state 103
    se                             shift and go to state 111
    retorna                        shift and go to state 98
    suite                          shift and go to state 127
    declaracao                     shift and go to state 95
    afirm_simples                  shift and go to state 94
    empty                          shift and go to state 100

state 106

    (31) atribuicao -> ID . [ INT ] = valor
    (32) atribuicao -> ID . = valor
    (80) atribuicao_aumentada -> ID . op_aum valor
    (74) op_aum -> . MAISIG
    (75) op_aum -> . MENOSIG
    (76) op_aum -> . MULTIG
    (77) op_aum -> . DIVIG
    (78) op_aum -> . MODIG
    (79) op_aum -> . EXPIG

    [               shift and go to state 27
    =               shift and go to state 28
    MAISIG          shift and go to state 131
    MENOSIG         shift and go to state 129
    MULTIG          shift and go to state 133
    DIVIG           shift and go to state 130
    MODIG           shift and go to state 134
    EXPIG           shift and go to state 128

    op_aum                         shift and go to state 132

state 107

    (73) imprime -> IMPRIME . expressao
    (67) expressao -> . exp_ou
    (65) exp_ou -> . exp_e
    (66) exp_ou -> . exp_ou OU exp_e
    (63) exp_e -> . exp_nao
    (64) exp_e -> . exp_e E exp_nao
    (61) exp_nao -> . exp_a
    (62) exp_nao -> . ! exp_nao
    (58) exp_a -> . exp_m
    (59) exp_a -> . exp_a + exp_m
    (60) exp_a -> . exp_a - exp_m
    (54) exp_m -> . exp_u
    (55) exp_m -> . exp_m * exp_u
    (56) exp_m -> . exp_m DIVINT exp_u
    (57) exp_m -> . exp_m / exp_u
    (51) exp_u -> . exponenciacao
    (52) exp_u -> . - exp_u
    (53) exp_u -> . + exp_u
    (49) exponenciacao -> . comparacao
    (50) exponenciacao -> . comparacao EXP exp_u
    (41) comparacao -> . valor
    (42) comparacao -> . valor operador_comp valor
    (37) valor -> . ID
    (38) valor -> . literal
    (39) valor -> . chamada
    (40) valor -> . CONSTANTE
    (109) literal -> . PALAVRA
    (110) literal -> . INT
    (111) literal -> . REAL
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )

    !               shift and go to state 43
    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    exp_e                          shift and go to state 30
    exp_a                          shift and go to state 31
    comparacao                     shift and go to state 32
    exp_m                          shift and go to state 33
    expressao                      shift and go to state 135
    chamada                        shift and go to state 41
    valor                          shift and go to state 40
    exp_u                          shift and go to state 37
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    exp_nao                        shift and go to state 47
    exp_ou                         shift and go to state 42

state 108

    (93) afirm_simples -> atribuicao .

    NOVALINHA       reduce using rule 93 (afirm_simples -> atribuicao .)
    FIM             reduce using rule 93 (afirm_simples -> atribuicao .)
    SENAOSE         reduce using rule 93 (afirm_simples -> atribuicao .)
    SENAO           reduce using rule 93 (afirm_simples -> atribuicao .)


state 109

    (98) afirm_simples -> QUEBRA .

    NOVALINHA       reduce using rule 98 (afirm_simples -> QUEBRA .)
    FIM             reduce using rule 98 (afirm_simples -> QUEBRA .)
    SENAOSE         reduce using rule 98 (afirm_simples -> QUEBRA .)
    SENAO           reduce using rule 98 (afirm_simples -> QUEBRA .)


state 110

    (99) afirm_simples -> CONTINUA .

    NOVALINHA       reduce using rule 99 (afirm_simples -> CONTINUA .)
    FIM             reduce using rule 99 (afirm_simples -> CONTINUA .)
    SENAOSE         reduce using rule 99 (afirm_simples -> CONTINUA .)
    SENAO           reduce using rule 99 (afirm_simples -> CONTINUA .)


state 111

    (106) afirm_composto -> se .

    NOVALINHA       reduce using rule 106 (afirm_composto -> se .)
    SENAOSE         reduce using rule 106 (afirm_composto -> se .)
    SENAO           reduce using rule 106 (afirm_composto -> se .)
    FIM             reduce using rule 106 (afirm_composto -> se .)
    RETORNA         reduce using rule 106 (afirm_composto -> se .)


state 112

    (42) comparacao -> valor operador_comp valor .

    EXP             reduce using rule 42 (comparacao -> valor operador_comp valor .)
    *               reduce using rule 42 (comparacao -> valor operador_comp valor .)
    DIVINT          reduce using rule 42 (comparacao -> valor operador_comp valor .)
    /               reduce using rule 42 (comparacao -> valor operador_comp valor .)
    +               reduce using rule 42 (comparacao -> valor operador_comp valor .)
    -               reduce using rule 42 (comparacao -> valor operador_comp valor .)
    E               reduce using rule 42 (comparacao -> valor operador_comp valor .)
    OU              reduce using rule 42 (comparacao -> valor operador_comp valor .)
    :               reduce using rule 42 (comparacao -> valor operador_comp valor .)
    NOVALINHA       reduce using rule 42 (comparacao -> valor operador_comp valor .)
    FIM             reduce using rule 42 (comparacao -> valor operador_comp valor .)
    SENAOSE         reduce using rule 42 (comparacao -> valor operador_comp valor .)
    SENAO           reduce using rule 42 (comparacao -> valor operador_comp valor .)
    RETORNA         reduce using rule 42 (comparacao -> valor operador_comp valor .)


state 113

    (66) exp_ou -> exp_ou OU exp_e .
    (64) exp_e -> exp_e . E exp_nao

    OU              reduce using rule 66 (exp_ou -> exp_ou OU exp_e .)
    NOVALINHA       reduce using rule 66 (exp_ou -> exp_ou OU exp_e .)
    FIM             reduce using rule 66 (exp_ou -> exp_ou OU exp_e .)
    SENAOSE         reduce using rule 66 (exp_ou -> exp_ou OU exp_e .)
    SENAO           reduce using rule 66 (exp_ou -> exp_ou OU exp_e .)
    :               reduce using rule 66 (exp_ou -> exp_ou OU exp_e .)
    RETORNA         reduce using rule 66 (exp_ou -> exp_ou OU exp_e .)
    E               shift and go to state 57


state 114

    (21) se -> SE expressao : suite . senaosemais senao FIM
    (16) senaosemais -> . senaose senaosemais
    (17) senaosemais -> . empty
    (18) senaose -> . SENAOSE expressao : suite
    (15) empty -> .

    SENAOSE         shift and go to state 137
    SENAO           reduce using rule 15 (empty -> .)
    FIM             reduce using rule 15 (empty -> .)

    senaosemais                    shift and go to state 136
    senaose                        shift and go to state 139
    empty                          shift and go to state 138

state 115

    (25) para -> PARA ID DE intid ATE . intid : suite FIM
    (23) intid -> . INT
    (24) intid -> . ID

    INT             shift and go to state 77
    ID              shift and go to state 79

    intid                          shift and go to state 140

state 116

    (68) param -> declaracao .

    ,               reduce using rule 68 (param -> declaracao .)
    )               reduce using rule 68 (param -> declaracao .)


state 117

    (69) params -> param . , params
    (70) params -> param .

    ,               shift and go to state 141
    )               reduce using rule 70 (params -> param .)


state 118

    (26) definicao -> DEF TIPO ID ( params . ) : suite_sem_retorno retorna FIM
    (27) definicao -> DEF TIPO ID ( params . ) : suite_sem_retorno retorna novalinha FIM

    )               shift and go to state 142


state 119

    (71) params -> empty .

    )               reduce using rule 71 (params -> empty .)


state 120

    (30) defsubfuncao -> DEF VAZIO ID ( params . ) : suite FIM

    )               shift and go to state 143


state 121

    (33) valorvalor -> , valor . valorvalor
    (33) valorvalor -> . , valor valorvalor
    (34) valorvalor -> . empty
    (15) empty -> .

    ,               shift and go to state 82
    )               reduce using rule 15 (empty -> .)

    empty                          shift and go to state 83
    valorvalor                     shift and go to state 144

state 122

    (35) chamada -> ID ( valor valorvalor ) .

    <               reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    >               reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    IGUIG           reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    MAIORIG         reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    MENORIG         reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    DIF             reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    EXP             reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    *               reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    DIVINT          reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    /               reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    +               reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    -               reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    E               reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    OU              reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    :               reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    NOVALINHA       reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    FIM             reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    SENAOSE         reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    SENAO           reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    RETORNA         reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    TIPO            reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    DEF             reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    ID              reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    SE              reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    ENQUANTO        reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    PARA            reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    $end            reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    ,               reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)
    )               reduce using rule 35 (chamada -> ID ( valor valorvalor ) .)


state 123

    (31) atribuicao -> ID [ INT ] = . valor
    (37) valor -> . ID
    (38) valor -> . literal
    (39) valor -> . chamada
    (40) valor -> . CONSTANTE
    (109) literal -> . PALAVRA
    (110) literal -> . INT
    (111) literal -> . REAL
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )

    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    literal                        shift and go to state 38
    chamada                        shift and go to state 41
    valor                          shift and go to state 145

state 124

    (82) suite -> afirmacao NOVALINHA . suite
    (81) suite -> . afirmacao
    (82) suite -> . afirmacao NOVALINHA suite
    (83) suite -> . NOVALINHA suite
    (84) suite -> . empty
    (89) afirmacao -> . afirm_simples
    (90) afirmacao -> . afirm_composto
    (15) empty -> .
    (93) afirm_simples -> . atribuicao
    (94) afirm_simples -> . atribuicao_aumentada
    (95) afirm_simples -> . imprime
    (96) afirm_simples -> . retorna
    (97) afirm_simples -> . declaracao
    (98) afirm_simples -> . QUEBRA
    (99) afirm_simples -> . CONTINUA
    (106) afirm_composto -> . se
    (107) afirm_composto -> . enquanto
    (108) afirm_composto -> . para
    (31) atribuicao -> . ID [ INT ] = valor
    (32) atribuicao -> . ID = valor
    (80) atribuicao_aumentada -> . ID op_aum valor
    (73) imprime -> . IMPRIME expressao
    (72) retorna -> . RETORNA expressao
    (14) declaracao -> . TIPO ID
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    NOVALINHA       shift and go to state 105
    FIM             reduce using rule 15 (empty -> .)
    SENAOSE         reduce using rule 15 (empty -> .)
    SENAO           reduce using rule 15 (empty -> .)
    QUEBRA          shift and go to state 109
    CONTINUA        shift and go to state 110
    ID              shift and go to state 106
    IMPRIME         shift and go to state 107
    RETORNA         shift and go to state 104
    TIPO            shift and go to state 5
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    imprime                        shift and go to state 101
    enquanto                       shift and go to state 96
    afirm_composto                 shift and go to state 102
    atribuicao_aumentada           shift and go to state 97
    atribuicao                     shift and go to state 108
    afirmacao                      shift and go to state 93
    para                           shift and go to state 103
    se                             shift and go to state 111
    retorna                        shift and go to state 98
    suite                          shift and go to state 146
    declaracao                     shift and go to state 95
    afirm_simples                  shift and go to state 94
    empty                          shift and go to state 100

state 125

    (22) enquanto -> ENQUANTO expressao : suite FIM .

    NOVALINHA       reduce using rule 22 (enquanto -> ENQUANTO expressao : suite FIM .)
    TIPO            reduce using rule 22 (enquanto -> ENQUANTO expressao : suite FIM .)
    DEF             reduce using rule 22 (enquanto -> ENQUANTO expressao : suite FIM .)
    ID              reduce using rule 22 (enquanto -> ENQUANTO expressao : suite FIM .)
    SE              reduce using rule 22 (enquanto -> ENQUANTO expressao : suite FIM .)
    ENQUANTO        reduce using rule 22 (enquanto -> ENQUANTO expressao : suite FIM .)
    PARA            reduce using rule 22 (enquanto -> ENQUANTO expressao : suite FIM .)
    $end            reduce using rule 22 (enquanto -> ENQUANTO expressao : suite FIM .)
    FIM             reduce using rule 22 (enquanto -> ENQUANTO expressao : suite FIM .)
    SENAOSE         reduce using rule 22 (enquanto -> ENQUANTO expressao : suite FIM .)
    SENAO           reduce using rule 22 (enquanto -> ENQUANTO expressao : suite FIM .)
    RETORNA         reduce using rule 22 (enquanto -> ENQUANTO expressao : suite FIM .)


state 126

    (72) retorna -> RETORNA expressao .

    NOVALINHA       reduce using rule 72 (retorna -> RETORNA expressao .)
    FIM             reduce using rule 72 (retorna -> RETORNA expressao .)
    SENAOSE         reduce using rule 72 (retorna -> RETORNA expressao .)
    SENAO           reduce using rule 72 (retorna -> RETORNA expressao .)


state 127

    (83) suite -> NOVALINHA suite .

    FIM             reduce using rule 83 (suite -> NOVALINHA suite .)
    SENAOSE         reduce using rule 83 (suite -> NOVALINHA suite .)
    SENAO           reduce using rule 83 (suite -> NOVALINHA suite .)


state 128

    (79) op_aum -> EXPIG .

    ID              reduce using rule 79 (op_aum -> EXPIG .)
    CONSTANTE       reduce using rule 79 (op_aum -> EXPIG .)
    PALAVRA         reduce using rule 79 (op_aum -> EXPIG .)
    INT             reduce using rule 79 (op_aum -> EXPIG .)
    REAL            reduce using rule 79 (op_aum -> EXPIG .)


state 129

    (75) op_aum -> MENOSIG .

    ID              reduce using rule 75 (op_aum -> MENOSIG .)
    CONSTANTE       reduce using rule 75 (op_aum -> MENOSIG .)
    PALAVRA         reduce using rule 75 (op_aum -> MENOSIG .)
    INT             reduce using rule 75 (op_aum -> MENOSIG .)
    REAL            reduce using rule 75 (op_aum -> MENOSIG .)


state 130

    (77) op_aum -> DIVIG .

    ID              reduce using rule 77 (op_aum -> DIVIG .)
    CONSTANTE       reduce using rule 77 (op_aum -> DIVIG .)
    PALAVRA         reduce using rule 77 (op_aum -> DIVIG .)
    INT             reduce using rule 77 (op_aum -> DIVIG .)
    REAL            reduce using rule 77 (op_aum -> DIVIG .)


state 131

    (74) op_aum -> MAISIG .

    ID              reduce using rule 74 (op_aum -> MAISIG .)
    CONSTANTE       reduce using rule 74 (op_aum -> MAISIG .)
    PALAVRA         reduce using rule 74 (op_aum -> MAISIG .)
    INT             reduce using rule 74 (op_aum -> MAISIG .)
    REAL            reduce using rule 74 (op_aum -> MAISIG .)


state 132

    (80) atribuicao_aumentada -> ID op_aum . valor
    (37) valor -> . ID
    (38) valor -> . literal
    (39) valor -> . chamada
    (40) valor -> . CONSTANTE
    (109) literal -> . PALAVRA
    (110) literal -> . INT
    (111) literal -> . REAL
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )

    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    literal                        shift and go to state 38
    chamada                        shift and go to state 41
    valor                          shift and go to state 147

state 133

    (76) op_aum -> MULTIG .

    ID              reduce using rule 76 (op_aum -> MULTIG .)
    CONSTANTE       reduce using rule 76 (op_aum -> MULTIG .)
    PALAVRA         reduce using rule 76 (op_aum -> MULTIG .)
    INT             reduce using rule 76 (op_aum -> MULTIG .)
    REAL            reduce using rule 76 (op_aum -> MULTIG .)


state 134

    (78) op_aum -> MODIG .

    ID              reduce using rule 78 (op_aum -> MODIG .)
    CONSTANTE       reduce using rule 78 (op_aum -> MODIG .)
    PALAVRA         reduce using rule 78 (op_aum -> MODIG .)
    INT             reduce using rule 78 (op_aum -> MODIG .)
    REAL            reduce using rule 78 (op_aum -> MODIG .)


state 135

    (73) imprime -> IMPRIME expressao .

    NOVALINHA       reduce using rule 73 (imprime -> IMPRIME expressao .)
    FIM             reduce using rule 73 (imprime -> IMPRIME expressao .)
    SENAOSE         reduce using rule 73 (imprime -> IMPRIME expressao .)
    SENAO           reduce using rule 73 (imprime -> IMPRIME expressao .)
    RETORNA         reduce using rule 73 (imprime -> IMPRIME expressao .)


state 136

    (21) se -> SE expressao : suite senaosemais . senao FIM
    (19) senao -> . SENAO : suite
    (20) senao -> . empty
    (15) empty -> .

    SENAO           shift and go to state 149
    FIM             reduce using rule 15 (empty -> .)

    senao                          shift and go to state 148
    empty                          shift and go to state 150

state 137

    (18) senaose -> SENAOSE . expressao : suite
    (67) expressao -> . exp_ou
    (65) exp_ou -> . exp_e
    (66) exp_ou -> . exp_ou OU exp_e
    (63) exp_e -> . exp_nao
    (64) exp_e -> . exp_e E exp_nao
    (61) exp_nao -> . exp_a
    (62) exp_nao -> . ! exp_nao
    (58) exp_a -> . exp_m
    (59) exp_a -> . exp_a + exp_m
    (60) exp_a -> . exp_a - exp_m
    (54) exp_m -> . exp_u
    (55) exp_m -> . exp_m * exp_u
    (56) exp_m -> . exp_m DIVINT exp_u
    (57) exp_m -> . exp_m / exp_u
    (51) exp_u -> . exponenciacao
    (52) exp_u -> . - exp_u
    (53) exp_u -> . + exp_u
    (49) exponenciacao -> . comparacao
    (50) exponenciacao -> . comparacao EXP exp_u
    (41) comparacao -> . valor
    (42) comparacao -> . valor operador_comp valor
    (37) valor -> . ID
    (38) valor -> . literal
    (39) valor -> . chamada
    (40) valor -> . CONSTANTE
    (109) literal -> . PALAVRA
    (110) literal -> . INT
    (111) literal -> . REAL
    (35) chamada -> . ID ( valor valorvalor )
    (36) chamada -> . ID ( )

    !               shift and go to state 43
    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    exp_e                          shift and go to state 30
    exp_a                          shift and go to state 31
    comparacao                     shift and go to state 32
    exp_m                          shift and go to state 33
    expressao                      shift and go to state 151
    chamada                        shift and go to state 41
    valor                          shift and go to state 40
    exp_u                          shift and go to state 37
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    exp_nao                        shift and go to state 47
    exp_ou                         shift and go to state 42

state 138

    (17) senaosemais -> empty .

    SENAO           reduce using rule 17 (senaosemais -> empty .)
    FIM             reduce using rule 17 (senaosemais -> empty .)


state 139

    (16) senaosemais -> senaose . senaosemais
    (16) senaosemais -> . senaose senaosemais
    (17) senaosemais -> . empty
    (18) senaose -> . SENAOSE expressao : suite
    (15) empty -> .

    SENAOSE         shift and go to state 137
    SENAO           reduce using rule 15 (empty -> .)
    FIM             reduce using rule 15 (empty -> .)

    senaosemais                    shift and go to state 152
    senaose                        shift and go to state 139
    empty                          shift and go to state 138

state 140

    (25) para -> PARA ID DE intid ATE intid . : suite FIM

    :               shift and go to state 153


state 141

    (69) params -> param , . params
    (69) params -> . param , params
    (70) params -> . param
    (71) params -> . empty
    (68) param -> . declaracao
    (15) empty -> .
    (14) declaracao -> . TIPO ID

    )               reduce using rule 15 (empty -> .)
    TIPO            shift and go to state 5

    declaracao                     shift and go to state 116
    params                         shift and go to state 154
    empty                          shift and go to state 119
    param                          shift and go to state 117

state 142

    (26) definicao -> DEF TIPO ID ( params ) . : suite_sem_retorno retorna FIM
    (27) definicao -> DEF TIPO ID ( params ) . : suite_sem_retorno retorna novalinha FIM

    :               shift and go to state 155


state 143

    (30) defsubfuncao -> DEF VAZIO ID ( params ) . : suite FIM

    :               shift and go to state 156


state 144

    (33) valorvalor -> , valor valorvalor .

    )               reduce using rule 33 (valorvalor -> , valor valorvalor .)


state 145

    (31) atribuicao -> ID [ INT ] = valor .

    NOVALINHA       reduce using rule 31 (atribuicao -> ID [ INT ] = valor .)
    SENAOSE         reduce using rule 31 (atribuicao -> ID [ INT ] = valor .)
    SENAO           reduce using rule 31 (atribuicao -> ID [ INT ] = valor .)
    FIM             reduce using rule 31 (atribuicao -> ID [ INT ] = valor .)
    TIPO            reduce using rule 31 (atribuicao -> ID [ INT ] = valor .)
    DEF             reduce using rule 31 (atribuicao -> ID [ INT ] = valor .)
    ID              reduce using rule 31 (atribuicao -> ID [ INT ] = valor .)
    SE              reduce using rule 31 (atribuicao -> ID [ INT ] = valor .)
    ENQUANTO        reduce using rule 31 (atribuicao -> ID [ INT ] = valor .)
    PARA            reduce using rule 31 (atribuicao -> ID [ INT ] = valor .)
    $end            reduce using rule 31 (atribuicao -> ID [ INT ] = valor .)
    RETORNA         reduce using rule 31 (atribuicao -> ID [ INT ] = valor .)


state 146

    (82) suite -> afirmacao NOVALINHA suite .

    FIM             reduce using rule 82 (suite -> afirmacao NOVALINHA suite .)
    SENAOSE         reduce using rule 82 (suite -> afirmacao NOVALINHA suite .)
    SENAO           reduce using rule 82 (suite -> afirmacao NOVALINHA suite .)


state 147

    (80) atribuicao_aumentada -> ID op_aum valor .

    NOVALINHA       reduce using rule 80 (atribuicao_aumentada -> ID op_aum valor .)
    SENAOSE         reduce using rule 80 (atribuicao_aumentada -> ID op_aum valor .)
    SENAO           reduce using rule 80 (atribuicao_aumentada -> ID op_aum valor .)
    FIM             reduce using rule 80 (atribuicao_aumentada -> ID op_aum valor .)
    RETORNA         reduce using rule 80 (atribuicao_aumentada -> ID op_aum valor .)


state 148

    (21) se -> SE expressao : suite senaosemais senao . FIM

    FIM             shift and go to state 157


state 149

    (19) senao -> SENAO . : suite

    :               shift and go to state 158


state 150

    (20) senao -> empty .

    FIM             reduce using rule 20 (senao -> empty .)


state 151

    (18) senaose -> SENAOSE expressao . : suite

    :               shift and go to state 159


state 152

    (16) senaosemais -> senaose senaosemais .

    SENAO           reduce using rule 16 (senaosemais -> senaose senaosemais .)
    FIM             reduce using rule 16 (senaosemais -> senaose senaosemais .)


state 153

    (25) para -> PARA ID DE intid ATE intid : . suite FIM
    (81) suite -> . afirmacao
    (82) suite -> . afirmacao NOVALINHA suite
    (83) suite -> . NOVALINHA suite
    (84) suite -> . empty
    (89) afirmacao -> . afirm_simples
    (90) afirmacao -> . afirm_composto
    (15) empty -> .
    (93) afirm_simples -> . atribuicao
    (94) afirm_simples -> . atribuicao_aumentada
    (95) afirm_simples -> . imprime
    (96) afirm_simples -> . retorna
    (97) afirm_simples -> . declaracao
    (98) afirm_simples -> . QUEBRA
    (99) afirm_simples -> . CONTINUA
    (106) afirm_composto -> . se
    (107) afirm_composto -> . enquanto
    (108) afirm_composto -> . para
    (31) atribuicao -> . ID [ INT ] = valor
    (32) atribuicao -> . ID = valor
    (80) atribuicao_aumentada -> . ID op_aum valor
    (73) imprime -> . IMPRIME expressao
    (72) retorna -> . RETORNA expressao
    (14) declaracao -> . TIPO ID
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    NOVALINHA       shift and go to state 105
    FIM             reduce using rule 15 (empty -> .)
    QUEBRA          shift and go to state 109
    CONTINUA        shift and go to state 110
    ID              shift and go to state 106
    IMPRIME         shift and go to state 107
    RETORNA         shift and go to state 104
    TIPO            shift and go to state 5
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    imprime                        shift and go to state 101
    enquanto                       shift and go to state 96
    afirm_composto                 shift and go to state 102
    atribuicao_aumentada           shift and go to state 97
    atribuicao                     shift and go to state 108
    afirmacao                      shift and go to state 93
    para                           shift and go to state 103
    se                             shift and go to state 111
    retorna                        shift and go to state 98
    suite                          shift and go to state 160
    declaracao                     shift and go to state 95
    afirm_simples                  shift and go to state 94
    empty                          shift and go to state 100

state 154

    (69) params -> param , params .

    )               reduce using rule 69 (params -> param , params .)


state 155

    (26) definicao -> DEF TIPO ID ( params ) : . suite_sem_retorno retorna FIM
    (27) definicao -> DEF TIPO ID ( params ) : . suite_sem_retorno retorna novalinha FIM
    (85) suite_sem_retorno -> . afirmacao_sem_retorno
    (86) suite_sem_retorno -> . afirmacao_sem_retorno NOVALINHA suite_sem_retorno
    (87) suite_sem_retorno -> . NOVALINHA suite_sem_retorno
    (88) suite_sem_retorno -> . empty
    (91) afirmacao_sem_retorno -> . afirm_simples_sem_retorno
    (92) afirmacao_sem_retorno -> . afirm_composto
    (15) empty -> .
    (100) afirm_simples_sem_retorno -> . atribuicao
    (101) afirm_simples_sem_retorno -> . atribuicao_aumentada
    (102) afirm_simples_sem_retorno -> . imprime
    (103) afirm_simples_sem_retorno -> . declaracao
    (104) afirm_simples_sem_retorno -> . QUEBRA
    (105) afirm_simples_sem_retorno -> . CONTINUA
    (106) afirm_composto -> . se
    (107) afirm_composto -> . enquanto
    (108) afirm_composto -> . para
    (31) atribuicao -> . ID [ INT ] = valor
    (32) atribuicao -> . ID = valor
    (80) atribuicao_aumentada -> . ID op_aum valor
    (73) imprime -> . IMPRIME expressao
    (14) declaracao -> . TIPO ID
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    NOVALINHA       shift and go to state 161
    RETORNA         reduce using rule 15 (empty -> .)
    QUEBRA          shift and go to state 171
    CONTINUA        shift and go to state 172
    ID              shift and go to state 106
    IMPRIME         shift and go to state 107
    TIPO            shift and go to state 5
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    enquanto                       shift and go to state 96
    atribuicao_aumentada           shift and go to state 170
    empty                          shift and go to state 162
    suite_sem_retorno              shift and go to state 163
    imprime                        shift and go to state 164
    afirm_composto                 shift and go to state 165
    afirm_simples_sem_retorno      shift and go to state 166
    para                           shift and go to state 103
    declaracao                     shift and go to state 167
    atribuicao                     shift and go to state 168
    afirmacao_sem_retorno          shift and go to state 169
    se                             shift and go to state 111

state 156

    (30) defsubfuncao -> DEF VAZIO ID ( params ) : . suite FIM
    (81) suite -> . afirmacao
    (82) suite -> . afirmacao NOVALINHA suite
    (83) suite -> . NOVALINHA suite
    (84) suite -> . empty
    (89) afirmacao -> . afirm_simples
    (90) afirmacao -> . afirm_composto
    (15) empty -> .
    (93) afirm_simples -> . atribuicao
    (94) afirm_simples -> . atribuicao_aumentada
    (95) afirm_simples -> . imprime
    (96) afirm_simples -> . retorna
    (97) afirm_simples -> . declaracao
    (98) afirm_simples -> . QUEBRA
    (99) afirm_simples -> . CONTINUA
    (106) afirm_composto -> . se
    (107) afirm_composto -> . enquanto
    (108) afirm_composto -> . para
    (31) atribuicao -> . ID [ INT ] = valor
    (32) atribuicao -> . ID = valor
    (80) atribuicao_aumentada -> . ID op_aum valor
    (73) imprime -> . IMPRIME expressao
    (72) retorna -> . RETORNA expressao
    (14) declaracao -> . TIPO ID
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    NOVALINHA       shift and go to state 105
    FIM             reduce using rule 15 (empty -> .)
    QUEBRA          shift and go to state 109
    CONTINUA        shift and go to state 110
    ID              shift and go to state 106
    IMPRIME         shift and go to state 107
    RETORNA         shift and go to state 104
    TIPO            shift and go to state 5
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    imprime                        shift and go to state 101
    enquanto                       shift and go to state 96
    afirm_composto                 shift and go to state 102
    atribuicao_aumentada           shift and go to state 97
    atribuicao                     shift and go to state 108
    afirmacao                      shift and go to state 93
    para                           shift and go to state 103
    se                             shift and go to state 111
    retorna                        shift and go to state 98
    suite                          shift and go to state 173
    declaracao                     shift and go to state 95
    afirm_simples                  shift and go to state 94
    empty                          shift and go to state 100

state 157

    (21) se -> SE expressao : suite senaosemais senao FIM .

    NOVALINHA       reduce using rule 21 (se -> SE expressao : suite senaosemais senao FIM .)
    TIPO            reduce using rule 21 (se -> SE expressao : suite senaosemais senao FIM .)
    DEF             reduce using rule 21 (se -> SE expressao : suite senaosemais senao FIM .)
    ID              reduce using rule 21 (se -> SE expressao : suite senaosemais senao FIM .)
    SE              reduce using rule 21 (se -> SE expressao : suite senaosemais senao FIM .)
    ENQUANTO        reduce using rule 21 (se -> SE expressao : suite senaosemais senao FIM .)
    PARA            reduce using rule 21 (se -> SE expressao : suite senaosemais senao FIM .)
    $end            reduce using rule 21 (se -> SE expressao : suite senaosemais senao FIM .)
    FIM             reduce using rule 21 (se -> SE expressao : suite senaosemais senao FIM .)
    RETORNA         reduce using rule 21 (se -> SE expressao : suite senaosemais senao FIM .)
    SENAOSE         reduce using rule 21 (se -> SE expressao : suite senaosemais senao FIM .)
    SENAO           reduce using rule 21 (se -> SE expressao : suite senaosemais senao FIM .)


state 158

    (19) senao -> SENAO : . suite
    (81) suite -> . afirmacao
    (82) suite -> . afirmacao NOVALINHA suite
    (83) suite -> . NOVALINHA suite
    (84) suite -> . empty
    (89) afirmacao -> . afirm_simples
    (90) afirmacao -> . afirm_composto
    (15) empty -> .
    (93) afirm_simples -> . atribuicao
    (94) afirm_simples -> . atribuicao_aumentada
    (95) afirm_simples -> . imprime
    (96) afirm_simples -> . retorna
    (97) afirm_simples -> . declaracao
    (98) afirm_simples -> . QUEBRA
    (99) afirm_simples -> . CONTINUA
    (106) afirm_composto -> . se
    (107) afirm_composto -> . enquanto
    (108) afirm_composto -> . para
    (31) atribuicao -> . ID [ INT ] = valor
    (32) atribuicao -> . ID = valor
    (80) atribuicao_aumentada -> . ID op_aum valor
    (73) imprime -> . IMPRIME expressao
    (72) retorna -> . RETORNA expressao
    (14) declaracao -> . TIPO ID
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    NOVALINHA       shift and go to state 105
    FIM             reduce using rule 15 (empty -> .)
    QUEBRA          shift and go to state 109
    CONTINUA        shift and go to state 110
    ID              shift and go to state 106
    IMPRIME         shift and go to state 107
    RETORNA         shift and go to state 104
    TIPO            shift and go to state 5
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    imprime                        shift and go to state 101
    enquanto                       shift and go to state 96
    afirm_composto                 shift and go to state 102
    atribuicao_aumentada           shift and go to state 97
    atribuicao                     shift and go to state 108
    afirmacao                      shift and go to state 93
    para                           shift and go to state 103
    se                             shift and go to state 111
    retorna                        shift and go to state 98
    suite                          shift and go to state 174
    declaracao                     shift and go to state 95
    afirm_simples                  shift and go to state 94
    empty                          shift and go to state 100

state 159

    (18) senaose -> SENAOSE expressao : . suite
    (81) suite -> . afirmacao
    (82) suite -> . afirmacao NOVALINHA suite
    (83) suite -> . NOVALINHA suite
    (84) suite -> . empty
    (89) afirmacao -> . afirm_simples
    (90) afirmacao -> . afirm_composto
    (15) empty -> .
    (93) afirm_simples -> . atribuicao
    (94) afirm_simples -> . atribuicao_aumentada
    (95) afirm_simples -> . imprime
    (96) afirm_simples -> . retorna
    (97) afirm_simples -> . declaracao
    (98) afirm_simples -> . QUEBRA
    (99) afirm_simples -> . CONTINUA
    (106) afirm_composto -> . se
    (107) afirm_composto -> . enquanto
    (108) afirm_composto -> . para
    (31) atribuicao -> . ID [ INT ] = valor
    (32) atribuicao -> . ID = valor
    (80) atribuicao_aumentada -> . ID op_aum valor
    (73) imprime -> . IMPRIME expressao
    (72) retorna -> . RETORNA expressao
    (14) declaracao -> . TIPO ID
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    NOVALINHA       shift and go to state 105
    SENAOSE         reduce using rule 15 (empty -> .)
    SENAO           reduce using rule 15 (empty -> .)
    FIM             reduce using rule 15 (empty -> .)
    QUEBRA          shift and go to state 109
    CONTINUA        shift and go to state 110
    ID              shift and go to state 106
    IMPRIME         shift and go to state 107
    RETORNA         shift and go to state 104
    TIPO            shift and go to state 5
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    imprime                        shift and go to state 101
    enquanto                       shift and go to state 96
    afirm_composto                 shift and go to state 102
    atribuicao_aumentada           shift and go to state 97
    afirmacao                      shift and go to state 93
    para                           shift and go to state 103
    se                             shift and go to state 111
    retorna                        shift and go to state 98
    atribuicao                     shift and go to state 108
    suite                          shift and go to state 175
    declaracao                     shift and go to state 95
    afirm_simples                  shift and go to state 94
    empty                          shift and go to state 100

state 160

    (25) para -> PARA ID DE intid ATE intid : suite . FIM

    FIM             shift and go to state 176


state 161

    (87) suite_sem_retorno -> NOVALINHA . suite_sem_retorno
    (85) suite_sem_retorno -> . afirmacao_sem_retorno
    (86) suite_sem_retorno -> . afirmacao_sem_retorno NOVALINHA suite_sem_retorno
    (87) suite_sem_retorno -> . NOVALINHA suite_sem_retorno
    (88) suite_sem_retorno -> . empty
    (91) afirmacao_sem_retorno -> . afirm_simples_sem_retorno
    (92) afirmacao_sem_retorno -> . afirm_composto
    (15) empty -> .
    (100) afirm_simples_sem_retorno -> . atribuicao
    (101) afirm_simples_sem_retorno -> . atribuicao_aumentada
    (102) afirm_simples_sem_retorno -> . imprime
    (103) afirm_simples_sem_retorno -> . declaracao
    (104) afirm_simples_sem_retorno -> . QUEBRA
    (105) afirm_simples_sem_retorno -> . CONTINUA
    (106) afirm_composto -> . se
    (107) afirm_composto -> . enquanto
    (108) afirm_composto -> . para
    (31) atribuicao -> . ID [ INT ] = valor
    (32) atribuicao -> . ID = valor
    (80) atribuicao_aumentada -> . ID op_aum valor
    (73) imprime -> . IMPRIME expressao
    (14) declaracao -> . TIPO ID
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    NOVALINHA       shift and go to state 161
    RETORNA         reduce using rule 15 (empty -> .)
    QUEBRA          shift and go to state 171
    CONTINUA        shift and go to state 172
    ID              shift and go to state 106
    IMPRIME         shift and go to state 107
    TIPO            shift and go to state 5
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    imprime                        shift and go to state 164
    enquanto                       shift and go to state 96
    afirm_composto                 shift and go to state 165
    atribuicao_aumentada           shift and go to state 170
    atribuicao                     shift and go to state 168
    afirmacao_sem_retorno          shift and go to state 169
    afirm_simples_sem_retorno      shift and go to state 166
    para                           shift and go to state 103
    se                             shift and go to state 111
    declaracao                     shift and go to state 167
    empty                          shift and go to state 162
    suite_sem_retorno              shift and go to state 177

state 162

    (88) suite_sem_retorno -> empty .

    RETORNA         reduce using rule 88 (suite_sem_retorno -> empty .)


state 163

    (26) definicao -> DEF TIPO ID ( params ) : suite_sem_retorno . retorna FIM
    (27) definicao -> DEF TIPO ID ( params ) : suite_sem_retorno . retorna novalinha FIM
    (72) retorna -> . RETORNA expressao

    RETORNA         shift and go to state 104

    retorna                        shift and go to state 178

state 164

    (102) afirm_simples_sem_retorno -> imprime .

    NOVALINHA       reduce using rule 102 (afirm_simples_sem_retorno -> imprime .)
    RETORNA         reduce using rule 102 (afirm_simples_sem_retorno -> imprime .)


state 165

    (92) afirmacao_sem_retorno -> afirm_composto .

    NOVALINHA       reduce using rule 92 (afirmacao_sem_retorno -> afirm_composto .)
    RETORNA         reduce using rule 92 (afirmacao_sem_retorno -> afirm_composto .)


state 166

    (91) afirmacao_sem_retorno -> afirm_simples_sem_retorno .

    NOVALINHA       reduce using rule 91 (afirmacao_sem_retorno -> afirm_simples_sem_retorno .)
    RETORNA         reduce using rule 91 (afirmacao_sem_retorno -> afirm_simples_sem_retorno .)


state 167

    (103) afirm_simples_sem_retorno -> declaracao .

    NOVALINHA       reduce using rule 103 (afirm_simples_sem_retorno -> declaracao .)
    RETORNA         reduce using rule 103 (afirm_simples_sem_retorno -> declaracao .)


state 168

    (100) afirm_simples_sem_retorno -> atribuicao .

    NOVALINHA       reduce using rule 100 (afirm_simples_sem_retorno -> atribuicao .)
    RETORNA         reduce using rule 100 (afirm_simples_sem_retorno -> atribuicao .)


state 169

    (85) suite_sem_retorno -> afirmacao_sem_retorno .
    (86) suite_sem_retorno -> afirmacao_sem_retorno . NOVALINHA suite_sem_retorno

    RETORNA         reduce using rule 85 (suite_sem_retorno -> afirmacao_sem_retorno .)
    NOVALINHA       shift and go to state 179


state 170

    (101) afirm_simples_sem_retorno -> atribuicao_aumentada .

    NOVALINHA       reduce using rule 101 (afirm_simples_sem_retorno -> atribuicao_aumentada .)
    RETORNA         reduce using rule 101 (afirm_simples_sem_retorno -> atribuicao_aumentada .)


state 171

    (104) afirm_simples_sem_retorno -> QUEBRA .

    NOVALINHA       reduce using rule 104 (afirm_simples_sem_retorno -> QUEBRA .)
    RETORNA         reduce using rule 104 (afirm_simples_sem_retorno -> QUEBRA .)


state 172

    (105) afirm_simples_sem_retorno -> CONTINUA .

    NOVALINHA       reduce using rule 105 (afirm_simples_sem_retorno -> CONTINUA .)
    RETORNA         reduce using rule 105 (afirm_simples_sem_retorno -> CONTINUA .)


state 173

    (30) defsubfuncao -> DEF VAZIO ID ( params ) : suite . FIM

    FIM             shift and go to state 180


state 174

    (19) senao -> SENAO : suite .

    FIM             reduce using rule 19 (senao -> SENAO : suite .)


state 175

    (18) senaose -> SENAOSE expressao : suite .

    SENAOSE         reduce using rule 18 (senaose -> SENAOSE expressao : suite .)
    SENAO           reduce using rule 18 (senaose -> SENAOSE expressao : suite .)
    FIM             reduce using rule 18 (senaose -> SENAOSE expressao : suite .)


state 176

    (25) para -> PARA ID DE intid ATE intid : suite FIM .

    NOVALINHA       reduce using rule 25 (para -> PARA ID DE intid ATE intid : suite FIM .)
    TIPO            reduce using rule 25 (para -> PARA ID DE intid ATE intid : suite FIM .)
    DEF             reduce using rule 25 (para -> PARA ID DE intid ATE intid : suite FIM .)
    ID              reduce using rule 25 (para -> PARA ID DE intid ATE intid : suite FIM .)
    SE              reduce using rule 25 (para -> PARA ID DE intid ATE intid : suite FIM .)
    ENQUANTO        reduce using rule 25 (para -> PARA ID DE intid ATE intid : suite FIM .)
    PARA            reduce using rule 25 (para -> PARA ID DE intid ATE intid : suite FIM .)
    $end            reduce using rule 25 (para -> PARA ID DE intid ATE intid : suite FIM .)
    FIM             reduce using rule 25 (para -> PARA ID DE intid ATE intid : suite FIM .)
    SENAOSE         reduce using rule 25 (para -> PARA ID DE intid ATE intid : suite FIM .)
    SENAO           reduce using rule 25 (para -> PARA ID DE intid ATE intid : suite FIM .)
    RETORNA         reduce using rule 25 (para -> PARA ID DE intid ATE intid : suite FIM .)


state 177

    (87) suite_sem_retorno -> NOVALINHA suite_sem_retorno .

    RETORNA         reduce using rule 87 (suite_sem_retorno -> NOVALINHA suite_sem_retorno .)


state 178

    (26) definicao -> DEF TIPO ID ( params ) : suite_sem_retorno retorna . FIM
    (27) definicao -> DEF TIPO ID ( params ) : suite_sem_retorno retorna . novalinha FIM
    (28) novalinha -> . NOVALINHA
    (29) novalinha -> . NOVALINHA novalinha

    FIM             shift and go to state 182
    NOVALINHA       shift and go to state 183

    novalinha                      shift and go to state 181

state 179

    (86) suite_sem_retorno -> afirmacao_sem_retorno NOVALINHA . suite_sem_retorno
    (85) suite_sem_retorno -> . afirmacao_sem_retorno
    (86) suite_sem_retorno -> . afirmacao_sem_retorno NOVALINHA suite_sem_retorno
    (87) suite_sem_retorno -> . NOVALINHA suite_sem_retorno
    (88) suite_sem_retorno -> . empty
    (91) afirmacao_sem_retorno -> . afirm_simples_sem_retorno
    (92) afirmacao_sem_retorno -> . afirm_composto
    (15) empty -> .
    (100) afirm_simples_sem_retorno -> . atribuicao
    (101) afirm_simples_sem_retorno -> . atribuicao_aumentada
    (102) afirm_simples_sem_retorno -> . imprime
    (103) afirm_simples_sem_retorno -> . declaracao
    (104) afirm_simples_sem_retorno -> . QUEBRA
    (105) afirm_simples_sem_retorno -> . CONTINUA
    (106) afirm_composto -> . se
    (107) afirm_composto -> . enquanto
    (108) afirm_composto -> . para
    (31) atribuicao -> . ID [ INT ] = valor
    (32) atribuicao -> . ID = valor
    (80) atribuicao_aumentada -> . ID op_aum valor
    (73) imprime -> . IMPRIME expressao
    (14) declaracao -> . TIPO ID
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    NOVALINHA       shift and go to state 161
    RETORNA         reduce using rule 15 (empty -> .)
    QUEBRA          shift and go to state 171
    CONTINUA        shift and go to state 172
    ID              shift and go to state 106
    IMPRIME         shift and go to state 107
    TIPO            shift and go to state 5
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    imprime                        shift and go to state 164
    enquanto                       shift and go to state 96
    afirm_composto                 shift and go to state 165
    atribuicao_aumentada           shift and go to state 170
    atribuicao                     shift and go to state 168
    afirmacao_sem_retorno          shift and go to state 169
    afirm_simples_sem_retorno      shift and go to state 166
    para                           shift and go to state 103
    se                             shift and go to state 111
    declaracao                     shift and go to state 167
    empty                          shift and go to state 162
    suite_sem_retorno              shift and go to state 184

state 180

    (30) defsubfuncao -> DEF VAZIO ID ( params ) : suite FIM .

    NOVALINHA       reduce using rule 30 (defsubfuncao -> DEF VAZIO ID ( params ) : suite FIM .)
    TIPO            reduce using rule 30 (defsubfuncao -> DEF VAZIO ID ( params ) : suite FIM .)
    DEF             reduce using rule 30 (defsubfuncao -> DEF VAZIO ID ( params ) : suite FIM .)
    ID              reduce using rule 30 (defsubfuncao -> DEF VAZIO ID ( params ) : suite FIM .)
    SE              reduce using rule 30 (defsubfuncao -> DEF VAZIO ID ( params ) : suite FIM .)
    ENQUANTO        reduce using rule 30 (defsubfuncao -> DEF VAZIO ID ( params ) : suite FIM .)
    PARA            reduce using rule 30 (defsubfuncao -> DEF VAZIO ID ( params ) : suite FIM .)
    $end            reduce using rule 30 (defsubfuncao -> DEF VAZIO ID ( params ) : suite FIM .)


state 181

    (27) definicao -> DEF TIPO ID ( params ) : suite_sem_retorno retorna novalinha . FIM

    FIM             shift and go to state 185


state 182

    (26) definicao -> DEF TIPO ID ( params ) : suite_sem_retorno retorna FIM .

    NOVALINHA       reduce using rule 26 (definicao -> DEF TIPO ID ( params ) : suite_sem_retorno retorna FIM .)
    TIPO            reduce using rule 26 (definicao -> DEF TIPO ID ( params ) : suite_sem_retorno retorna FIM .)
    DEF             reduce using rule 26 (definicao -> DEF TIPO ID ( params ) : suite_sem_retorno retorna FIM .)
    ID              reduce using rule 26 (definicao -> DEF TIPO ID ( params ) : suite_sem_retorno retorna FIM .)
    SE              reduce using rule 26 (definicao -> DEF TIPO ID ( params ) : suite_sem_retorno retorna FIM .)
    ENQUANTO        reduce using rule 26 (definicao -> DEF TIPO ID ( params ) : suite_sem_retorno retorna FIM .)
    PARA            reduce using rule 26 (definicao -> DEF TIPO ID ( params ) : suite_sem_retorno retorna FIM .)
    $end            reduce using rule 26 (definicao -> DEF TIPO ID ( params ) : suite_sem_retorno retorna FIM .)


state 183

    (28) novalinha -> NOVALINHA .
    (29) novalinha -> NOVALINHA . novalinha
    (28) novalinha -> . NOVALINHA
    (29) novalinha -> . NOVALINHA novalinha

    FIM             reduce using rule 28 (novalinha -> NOVALINHA .)
    NOVALINHA       shift and go to state 183

    novalinha                      shift and go to state 186

state 184

    (86) suite_sem_retorno -> afirmacao_sem_retorno NOVALINHA suite_sem_retorno .

    RETORNA         reduce using rule 86 (suite_sem_retorno -> afirmacao_sem_retorno NOVALINHA suite_sem_retorno .)


state 185

    (27) definicao -> DEF TIPO ID ( params ) : suite_sem_retorno retorna novalinha FIM .

    NOVALINHA       reduce using rule 27 (definicao -> DEF TIPO ID ( params ) : suite_sem_retorno retorna novalinha FIM .)
    TIPO            reduce using rule 27 (definicao -> DEF TIPO ID ( params ) : suite_sem_retorno retorna novalinha FIM .)
    DEF             reduce using rule 27 (definicao -> DEF TIPO ID ( params ) : suite_sem_retorno retorna novalinha FIM .)
    ID              reduce using rule 27 (definicao -> DEF TIPO ID ( params ) : suite_sem_retorno retorna novalinha FIM .)
    SE              reduce using rule 27 (definicao -> DEF TIPO ID ( params ) : suite_sem_retorno retorna novalinha FIM .)
    ENQUANTO        reduce using rule 27 (definicao -> DEF TIPO ID ( params ) : suite_sem_retorno retorna novalinha FIM .)
    PARA            reduce using rule 27 (definicao -> DEF TIPO ID ( params ) : suite_sem_retorno retorna novalinha FIM .)
    $end            reduce using rule 27 (definicao -> DEF TIPO ID ( params ) : suite_sem_retorno retorna novalinha FIM .)


state 186

    (29) novalinha -> NOVALINHA novalinha .

    FIM             reduce using rule 29 (novalinha -> NOVALINHA novalinha .)

