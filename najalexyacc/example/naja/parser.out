Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> primario
Rule 2     program -> primario program
Rule 3     program -> NOVALINHA
Rule 4     primario -> controle
Rule 5     primario -> declaracao
Rule 6     primario -> definicao
Rule 7     primario -> atribuicao
Rule 8     primario -> chamada
Rule 9     primario -> defsubfuncao
Rule 10    primario -> NOVALINHA primario
Rule 11    controle -> se
Rule 12    controle -> enquanto
Rule 13    controle -> para
Rule 14    declaracao -> TIPO ID
Rule 15    empty -> <empty>
Rule 16    senaosemais -> senaose senaosemais
Rule 17    senaosemais -> empty
Rule 18    senaose -> SENAOSE expressao : suite
Rule 19    senao -> SENAO : suite
Rule 20    senao -> empty
Rule 21    se -> SE expressao : suite senaosemais senao FIM
Rule 22    enquanto -> ENQUANTO expressao : suite FIM
Rule 23    intid -> INT
Rule 24    intid -> ID
Rule 25    para -> PARA ID DE intid ATE intid : suite FIM
Rule 26    definicao -> DEF TIPO ID ( params ) : suite FIM
Rule 27    defsubfuncao -> DEF VAZIO ID ( params ) : suite FIM
Rule 28    atribuicao -> ID [ INT ] = valor
Rule 29    atribuicao -> ID = valor
Rule 30    valorvalor -> , valor valorvalor
Rule 31    valorvalor -> empty
Rule 32    chamada -> ID ( valor valorvalor )
Rule 33    chamada -> ID ( )
Rule 34    valor -> ID
Rule 35    valor -> literal
Rule 36    valor -> chamada
Rule 37    valor -> CONSTANTE
Rule 38    expressao -> exp_ou
Rule 39    comparacao -> valor
Rule 40    comparacao -> valor operador_comp valor
Rule 41    operador_comp -> <
Rule 42    operador_comp -> >
Rule 43    operador_comp -> IGUIG
Rule 44    operador_comp -> MAIORIG
Rule 45    operador_comp -> MENORIG
Rule 46    operador_comp -> DIF
Rule 47    exponenciacao -> comparacao
Rule 48    exponenciacao -> comparacao EXP exp_u
Rule 49    exp_u -> exponenciacao
Rule 50    exp_u -> - exp_u
Rule 51    exp_u -> + exp_u
Rule 52    param -> declaracao
Rule 53    params -> param , params
Rule 54    params -> param
Rule 55    params -> empty
Rule 56    retorna -> RETORNA expressao
Rule 57    imprime -> IMPRIME expressao
Rule 58    op_aum -> MAISIG
Rule 59    op_aum -> MENOSIG
Rule 60    op_aum -> MULTIG
Rule 61    op_aum -> DIVIG
Rule 62    op_aum -> MODIG
Rule 63    op_aum -> EXPIG
Rule 64    exp_m -> exp_u
Rule 65    exp_m -> exp_m * exp_u
Rule 66    exp_m -> exp_m DIVINT exp_u
Rule 67    exp_m -> exp_m / exp_u
Rule 68    exp_a -> exp_m
Rule 69    exp_a -> exp_a + exp_m
Rule 70    exp_a -> exp_a - exp_m
Rule 71    exp_ou -> exp_e
Rule 72    exp_ou -> exp_ou OU exp_e
Rule 73    exp_e -> exp_nao
Rule 74    exp_e -> exp_e E exp_nao
Rule 75    exp_nao -> exp_a
Rule 76    exp_nao -> ! exp_nao
Rule 77    suite -> afirmacao
Rule 78    suite -> afirmacao NOVALINHA suite
Rule 79    suite -> NOVALINHA suite
Rule 80    suite -> empty
Rule 81    afirmacao -> afirm_simples
Rule 82    afirmacao -> afirm_composto
Rule 83    afirm_simples -> atribuicao
Rule 84    afirm_simples -> atribuicao_aumentada
Rule 85    afirm_simples -> imprime
Rule 86    afirm_simples -> retorna
Rule 87    afirm_simples -> QUEBRA
Rule 88    afirm_simples -> CONTINUA
Rule 89    afirm_composto -> se
Rule 90    afirm_composto -> enquanto
Rule 91    afirm_composto -> para
Rule 92    atribuicao_aumentada -> ID op_aum valor
Rule 93    literal -> PALAVRA
Rule 94    literal -> INT
Rule 95    literal -> REAL

Terminals, with rules where they appear

!                    : 76
(                    : 26 27 32 33
)                    : 26 27 32 33
*                    : 65
+                    : 51 69
,                    : 30 53
-                    : 50 70
/                    : 67
:                    : 18 19 21 22 25 26 27
<                    : 41
=                    : 28 29
>                    : 42
ATE                  : 25
CONSTANTE            : 37
CONTINUA             : 88
DE                   : 25
DEF                  : 26 27
DIF                  : 46
DIVIG                : 61
DIVINT               : 66
E                    : 74
ENQUANTO             : 22
EXP                  : 48
EXPIG                : 63
FIM                  : 21 22 25 26 27
ID                   : 14 24 25 26 27 28 29 32 33 34 92
IGUIG                : 43
IMPRIME              : 57
INT                  : 23 28 94
MAIORIG              : 44
MAISIG               : 58
MENORIG              : 45
MENOSIG              : 59
MODIG                : 62
MULTIG               : 60
NOVALINHA            : 3 10 78 79
OU                   : 72
PALAVRA              : 93
PARA                 : 25
QUEBRA               : 87
REAL                 : 95
RETORNA              : 56
SE                   : 21
SENAO                : 19
SENAOSE              : 18
TIPO                 : 14 26
VAZIO                : 27
[                    : 28
]                    : 28
error                : 

Nonterminals, with rules where they appear

afirm_composto       : 82
afirm_simples        : 81
afirmacao            : 77 78
atribuicao           : 7 83
atribuicao_aumentada : 84
chamada              : 8 36
comparacao           : 47 48
controle             : 4
declaracao           : 5 52
definicao            : 6
defsubfuncao         : 9
empty                : 17 20 31 55 80
enquanto             : 12 90
exp_a                : 69 70 75
exp_e                : 71 72 74
exp_m                : 65 66 67 68 69 70
exp_nao              : 73 74 76
exp_ou               : 38 72
exp_u                : 48 50 51 64 65 66 67
exponenciacao        : 49
expressao            : 18 21 22 56 57
imprime              : 85
intid                : 25 25
literal              : 35
op_aum               : 92
operador_comp        : 40
para                 : 13 91
param                : 53 54
params               : 26 27 53
primario             : 1 2 10
program              : 2 0
retorna              : 86
se                   : 11 89
senao                : 21
senaose              : 16
senaosemais          : 16 21
suite                : 18 19 21 22 25 26 27 78 79
valor                : 28 29 30 32 39 40 40 92
valorvalor           : 30 32

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . primario
    (2) program -> . primario program
    (3) program -> . NOVALINHA
    (4) primario -> . controle
    (5) primario -> . declaracao
    (6) primario -> . definicao
    (7) primario -> . atribuicao
    (8) primario -> . chamada
    (9) primario -> . defsubfuncao
    (10) primario -> . NOVALINHA primario
    (11) controle -> . se
    (12) controle -> . enquanto
    (13) controle -> . para
    (14) declaracao -> . TIPO ID
    (26) definicao -> . DEF TIPO ID ( params ) : suite FIM
    (28) atribuicao -> . ID [ INT ] = valor
    (29) atribuicao -> . ID = valor
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )
    (27) defsubfuncao -> . DEF VAZIO ID ( params ) : suite FIM
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    NOVALINHA       shift and go to state 3
    TIPO            shift and go to state 5
    DEF             shift and go to state 2
    ID              shift and go to state 13
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    enquanto                       shift and go to state 4
    para                           shift and go to state 9
    primario                       shift and go to state 6
    chamada                        shift and go to state 10
    defsubfuncao                   shift and go to state 16
    program                        shift and go to state 7
    atribuicao                     shift and go to state 15
    controle                       shift and go to state 8
    definicao                      shift and go to state 11
    declaracao                     shift and go to state 12
    se                             shift and go to state 18

state 1

    (25) para -> PARA . ID DE intid ATE intid : suite FIM

    ID              shift and go to state 19


state 2

    (26) definicao -> DEF . TIPO ID ( params ) : suite FIM
    (27) defsubfuncao -> DEF . VAZIO ID ( params ) : suite FIM

    TIPO            shift and go to state 20
    VAZIO           shift and go to state 21


state 3

    (3) program -> NOVALINHA .
    (10) primario -> NOVALINHA . primario
    (4) primario -> . controle
    (5) primario -> . declaracao
    (6) primario -> . definicao
    (7) primario -> . atribuicao
    (8) primario -> . chamada
    (9) primario -> . defsubfuncao
    (10) primario -> . NOVALINHA primario
    (11) controle -> . se
    (12) controle -> . enquanto
    (13) controle -> . para
    (14) declaracao -> . TIPO ID
    (26) definicao -> . DEF TIPO ID ( params ) : suite FIM
    (28) atribuicao -> . ID [ INT ] = valor
    (29) atribuicao -> . ID = valor
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )
    (27) defsubfuncao -> . DEF VAZIO ID ( params ) : suite FIM
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    $end            reduce using rule 3 (program -> NOVALINHA .)
    NOVALINHA       shift and go to state 22
    TIPO            shift and go to state 5
    DEF             shift and go to state 2
    ID              shift and go to state 13
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    enquanto                       shift and go to state 4
    para                           shift and go to state 9
    primario                       shift and go to state 23
    chamada                        shift and go to state 10
    defsubfuncao                   shift and go to state 16
    atribuicao                     shift and go to state 15
    controle                       shift and go to state 8
    definicao                      shift and go to state 11
    declaracao                     shift and go to state 12
    se                             shift and go to state 18

state 4

    (12) controle -> enquanto .

    NOVALINHA       reduce using rule 12 (controle -> enquanto .)
    TIPO            reduce using rule 12 (controle -> enquanto .)
    DEF             reduce using rule 12 (controle -> enquanto .)
    ID              reduce using rule 12 (controle -> enquanto .)
    SE              reduce using rule 12 (controle -> enquanto .)
    ENQUANTO        reduce using rule 12 (controle -> enquanto .)
    PARA            reduce using rule 12 (controle -> enquanto .)
    $end            reduce using rule 12 (controle -> enquanto .)


state 5

    (14) declaracao -> TIPO . ID

    ID              shift and go to state 24


state 6

    (1) program -> primario .
    (2) program -> primario . program
    (1) program -> . primario
    (2) program -> . primario program
    (3) program -> . NOVALINHA
    (4) primario -> . controle
    (5) primario -> . declaracao
    (6) primario -> . definicao
    (7) primario -> . atribuicao
    (8) primario -> . chamada
    (9) primario -> . defsubfuncao
    (10) primario -> . NOVALINHA primario
    (11) controle -> . se
    (12) controle -> . enquanto
    (13) controle -> . para
    (14) declaracao -> . TIPO ID
    (26) definicao -> . DEF TIPO ID ( params ) : suite FIM
    (28) atribuicao -> . ID [ INT ] = valor
    (29) atribuicao -> . ID = valor
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )
    (27) defsubfuncao -> . DEF VAZIO ID ( params ) : suite FIM
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    $end            reduce using rule 1 (program -> primario .)
    NOVALINHA       shift and go to state 3
    TIPO            shift and go to state 5
    DEF             shift and go to state 2
    ID              shift and go to state 13
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    enquanto                       shift and go to state 4
    para                           shift and go to state 9
    primario                       shift and go to state 6
    chamada                        shift and go to state 10
    defsubfuncao                   shift and go to state 16
    program                        shift and go to state 25
    atribuicao                     shift and go to state 15
    controle                       shift and go to state 8
    definicao                      shift and go to state 11
    declaracao                     shift and go to state 12
    se                             shift and go to state 18

state 7

    (0) S' -> program .



state 8

    (4) primario -> controle .

    NOVALINHA       reduce using rule 4 (primario -> controle .)
    TIPO            reduce using rule 4 (primario -> controle .)
    DEF             reduce using rule 4 (primario -> controle .)
    ID              reduce using rule 4 (primario -> controle .)
    SE              reduce using rule 4 (primario -> controle .)
    ENQUANTO        reduce using rule 4 (primario -> controle .)
    PARA            reduce using rule 4 (primario -> controle .)
    $end            reduce using rule 4 (primario -> controle .)


state 9

    (13) controle -> para .

    NOVALINHA       reduce using rule 13 (controle -> para .)
    TIPO            reduce using rule 13 (controle -> para .)
    DEF             reduce using rule 13 (controle -> para .)
    ID              reduce using rule 13 (controle -> para .)
    SE              reduce using rule 13 (controle -> para .)
    ENQUANTO        reduce using rule 13 (controle -> para .)
    PARA            reduce using rule 13 (controle -> para .)
    $end            reduce using rule 13 (controle -> para .)


state 10

    (8) primario -> chamada .

    NOVALINHA       reduce using rule 8 (primario -> chamada .)
    TIPO            reduce using rule 8 (primario -> chamada .)
    DEF             reduce using rule 8 (primario -> chamada .)
    ID              reduce using rule 8 (primario -> chamada .)
    SE              reduce using rule 8 (primario -> chamada .)
    ENQUANTO        reduce using rule 8 (primario -> chamada .)
    PARA            reduce using rule 8 (primario -> chamada .)
    $end            reduce using rule 8 (primario -> chamada .)


state 11

    (6) primario -> definicao .

    NOVALINHA       reduce using rule 6 (primario -> definicao .)
    TIPO            reduce using rule 6 (primario -> definicao .)
    DEF             reduce using rule 6 (primario -> definicao .)
    ID              reduce using rule 6 (primario -> definicao .)
    SE              reduce using rule 6 (primario -> definicao .)
    ENQUANTO        reduce using rule 6 (primario -> definicao .)
    PARA            reduce using rule 6 (primario -> definicao .)
    $end            reduce using rule 6 (primario -> definicao .)


state 12

    (5) primario -> declaracao .

    NOVALINHA       reduce using rule 5 (primario -> declaracao .)
    TIPO            reduce using rule 5 (primario -> declaracao .)
    DEF             reduce using rule 5 (primario -> declaracao .)
    ID              reduce using rule 5 (primario -> declaracao .)
    SE              reduce using rule 5 (primario -> declaracao .)
    ENQUANTO        reduce using rule 5 (primario -> declaracao .)
    PARA            reduce using rule 5 (primario -> declaracao .)
    $end            reduce using rule 5 (primario -> declaracao .)


state 13

    (28) atribuicao -> ID . [ INT ] = valor
    (29) atribuicao -> ID . = valor
    (32) chamada -> ID . ( valor valorvalor )
    (33) chamada -> ID . ( )

    [               shift and go to state 27
    =               shift and go to state 28
    (               shift and go to state 26


state 14

    (22) enquanto -> ENQUANTO . expressao : suite FIM
    (38) expressao -> . exp_ou
    (71) exp_ou -> . exp_e
    (72) exp_ou -> . exp_ou OU exp_e
    (73) exp_e -> . exp_nao
    (74) exp_e -> . exp_e E exp_nao
    (75) exp_nao -> . exp_a
    (76) exp_nao -> . ! exp_nao
    (68) exp_a -> . exp_m
    (69) exp_a -> . exp_a + exp_m
    (70) exp_a -> . exp_a - exp_m
    (64) exp_m -> . exp_u
    (65) exp_m -> . exp_m * exp_u
    (66) exp_m -> . exp_m DIVINT exp_u
    (67) exp_m -> . exp_m / exp_u
    (49) exp_u -> . exponenciacao
    (50) exp_u -> . - exp_u
    (51) exp_u -> . + exp_u
    (47) exponenciacao -> . comparacao
    (48) exponenciacao -> . comparacao EXP exp_u
    (39) comparacao -> . valor
    (40) comparacao -> . valor operador_comp valor
    (34) valor -> . ID
    (35) valor -> . literal
    (36) valor -> . chamada
    (37) valor -> . CONSTANTE
    (93) literal -> . PALAVRA
    (94) literal -> . INT
    (95) literal -> . REAL
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )

    !               shift and go to state 43
    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    exp_e                          shift and go to state 30
    exp_a                          shift and go to state 31
    comparacao                     shift and go to state 32
    exp_m                          shift and go to state 33
    expressao                      shift and go to state 34
    chamada                        shift and go to state 41
    valor                          shift and go to state 40
    exp_u                          shift and go to state 37
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    exp_nao                        shift and go to state 47
    exp_ou                         shift and go to state 42

state 15

    (7) primario -> atribuicao .

    NOVALINHA       reduce using rule 7 (primario -> atribuicao .)
    TIPO            reduce using rule 7 (primario -> atribuicao .)
    DEF             reduce using rule 7 (primario -> atribuicao .)
    ID              reduce using rule 7 (primario -> atribuicao .)
    SE              reduce using rule 7 (primario -> atribuicao .)
    ENQUANTO        reduce using rule 7 (primario -> atribuicao .)
    PARA            reduce using rule 7 (primario -> atribuicao .)
    $end            reduce using rule 7 (primario -> atribuicao .)


state 16

    (9) primario -> defsubfuncao .

    NOVALINHA       reduce using rule 9 (primario -> defsubfuncao .)
    TIPO            reduce using rule 9 (primario -> defsubfuncao .)
    DEF             reduce using rule 9 (primario -> defsubfuncao .)
    ID              reduce using rule 9 (primario -> defsubfuncao .)
    SE              reduce using rule 9 (primario -> defsubfuncao .)
    ENQUANTO        reduce using rule 9 (primario -> defsubfuncao .)
    PARA            reduce using rule 9 (primario -> defsubfuncao .)
    $end            reduce using rule 9 (primario -> defsubfuncao .)


state 17

    (21) se -> SE . expressao : suite senaosemais senao FIM
    (38) expressao -> . exp_ou
    (71) exp_ou -> . exp_e
    (72) exp_ou -> . exp_ou OU exp_e
    (73) exp_e -> . exp_nao
    (74) exp_e -> . exp_e E exp_nao
    (75) exp_nao -> . exp_a
    (76) exp_nao -> . ! exp_nao
    (68) exp_a -> . exp_m
    (69) exp_a -> . exp_a + exp_m
    (70) exp_a -> . exp_a - exp_m
    (64) exp_m -> . exp_u
    (65) exp_m -> . exp_m * exp_u
    (66) exp_m -> . exp_m DIVINT exp_u
    (67) exp_m -> . exp_m / exp_u
    (49) exp_u -> . exponenciacao
    (50) exp_u -> . - exp_u
    (51) exp_u -> . + exp_u
    (47) exponenciacao -> . comparacao
    (48) exponenciacao -> . comparacao EXP exp_u
    (39) comparacao -> . valor
    (40) comparacao -> . valor operador_comp valor
    (34) valor -> . ID
    (35) valor -> . literal
    (36) valor -> . chamada
    (37) valor -> . CONSTANTE
    (93) literal -> . PALAVRA
    (94) literal -> . INT
    (95) literal -> . REAL
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )

    !               shift and go to state 43
    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    exp_e                          shift and go to state 30
    exp_a                          shift and go to state 31
    comparacao                     shift and go to state 32
    exp_m                          shift and go to state 33
    expressao                      shift and go to state 49
    chamada                        shift and go to state 41
    exp_u                          shift and go to state 37
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    exp_nao                        shift and go to state 47
    exp_ou                         shift and go to state 42
    valor                          shift and go to state 40

state 18

    (11) controle -> se .

    NOVALINHA       reduce using rule 11 (controle -> se .)
    TIPO            reduce using rule 11 (controle -> se .)
    DEF             reduce using rule 11 (controle -> se .)
    ID              reduce using rule 11 (controle -> se .)
    SE              reduce using rule 11 (controle -> se .)
    ENQUANTO        reduce using rule 11 (controle -> se .)
    PARA            reduce using rule 11 (controle -> se .)
    $end            reduce using rule 11 (controle -> se .)


state 19

    (25) para -> PARA ID . DE intid ATE intid : suite FIM

    DE              shift and go to state 50


state 20

    (26) definicao -> DEF TIPO . ID ( params ) : suite FIM

    ID              shift and go to state 51


state 21

    (27) defsubfuncao -> DEF VAZIO . ID ( params ) : suite FIM

    ID              shift and go to state 52


state 22

    (10) primario -> NOVALINHA . primario
    (4) primario -> . controle
    (5) primario -> . declaracao
    (6) primario -> . definicao
    (7) primario -> . atribuicao
    (8) primario -> . chamada
    (9) primario -> . defsubfuncao
    (10) primario -> . NOVALINHA primario
    (11) controle -> . se
    (12) controle -> . enquanto
    (13) controle -> . para
    (14) declaracao -> . TIPO ID
    (26) definicao -> . DEF TIPO ID ( params ) : suite FIM
    (28) atribuicao -> . ID [ INT ] = valor
    (29) atribuicao -> . ID = valor
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )
    (27) defsubfuncao -> . DEF VAZIO ID ( params ) : suite FIM
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    NOVALINHA       shift and go to state 22
    TIPO            shift and go to state 5
    DEF             shift and go to state 2
    ID              shift and go to state 13
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    enquanto                       shift and go to state 4
    para                           shift and go to state 9
    primario                       shift and go to state 23
    chamada                        shift and go to state 10
    defsubfuncao                   shift and go to state 16
    atribuicao                     shift and go to state 15
    controle                       shift and go to state 8
    definicao                      shift and go to state 11
    declaracao                     shift and go to state 12
    se                             shift and go to state 18

state 23

    (10) primario -> NOVALINHA primario .

    NOVALINHA       reduce using rule 10 (primario -> NOVALINHA primario .)
    TIPO            reduce using rule 10 (primario -> NOVALINHA primario .)
    DEF             reduce using rule 10 (primario -> NOVALINHA primario .)
    ID              reduce using rule 10 (primario -> NOVALINHA primario .)
    SE              reduce using rule 10 (primario -> NOVALINHA primario .)
    ENQUANTO        reduce using rule 10 (primario -> NOVALINHA primario .)
    PARA            reduce using rule 10 (primario -> NOVALINHA primario .)
    $end            reduce using rule 10 (primario -> NOVALINHA primario .)


state 24

    (14) declaracao -> TIPO ID .

    ,               reduce using rule 14 (declaracao -> TIPO ID .)
    )               reduce using rule 14 (declaracao -> TIPO ID .)
    NOVALINHA       reduce using rule 14 (declaracao -> TIPO ID .)
    TIPO            reduce using rule 14 (declaracao -> TIPO ID .)
    DEF             reduce using rule 14 (declaracao -> TIPO ID .)
    ID              reduce using rule 14 (declaracao -> TIPO ID .)
    SE              reduce using rule 14 (declaracao -> TIPO ID .)
    ENQUANTO        reduce using rule 14 (declaracao -> TIPO ID .)
    PARA            reduce using rule 14 (declaracao -> TIPO ID .)
    $end            reduce using rule 14 (declaracao -> TIPO ID .)


state 25

    (2) program -> primario program .

    $end            reduce using rule 2 (program -> primario program .)


state 26

    (32) chamada -> ID ( . valor valorvalor )
    (33) chamada -> ID ( . )
    (34) valor -> . ID
    (35) valor -> . literal
    (36) valor -> . chamada
    (37) valor -> . CONSTANTE
    (93) literal -> . PALAVRA
    (94) literal -> . INT
    (95) literal -> . REAL
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )

    )               shift and go to state 53
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    literal                        shift and go to state 38
    chamada                        shift and go to state 41
    valor                          shift and go to state 54

state 27

    (28) atribuicao -> ID [ . INT ] = valor

    INT             shift and go to state 55


state 28

    (29) atribuicao -> ID = . valor
    (34) valor -> . ID
    (35) valor -> . literal
    (36) valor -> . chamada
    (37) valor -> . CONSTANTE
    (93) literal -> . PALAVRA
    (94) literal -> . INT
    (95) literal -> . REAL
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )

    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    literal                        shift and go to state 38
    chamada                        shift and go to state 41
    valor                          shift and go to state 56

state 29

    (95) literal -> REAL .

    <               reduce using rule 95 (literal -> REAL .)
    >               reduce using rule 95 (literal -> REAL .)
    IGUIG           reduce using rule 95 (literal -> REAL .)
    MAIORIG         reduce using rule 95 (literal -> REAL .)
    MENORIG         reduce using rule 95 (literal -> REAL .)
    DIF             reduce using rule 95 (literal -> REAL .)
    EXP             reduce using rule 95 (literal -> REAL .)
    *               reduce using rule 95 (literal -> REAL .)
    DIVINT          reduce using rule 95 (literal -> REAL .)
    /               reduce using rule 95 (literal -> REAL .)
    +               reduce using rule 95 (literal -> REAL .)
    -               reduce using rule 95 (literal -> REAL .)
    E               reduce using rule 95 (literal -> REAL .)
    OU              reduce using rule 95 (literal -> REAL .)
    :               reduce using rule 95 (literal -> REAL .)
    NOVALINHA       reduce using rule 95 (literal -> REAL .)
    FIM             reduce using rule 95 (literal -> REAL .)
    SENAOSE         reduce using rule 95 (literal -> REAL .)
    SENAO           reduce using rule 95 (literal -> REAL .)
    TIPO            reduce using rule 95 (literal -> REAL .)
    DEF             reduce using rule 95 (literal -> REAL .)
    ID              reduce using rule 95 (literal -> REAL .)
    SE              reduce using rule 95 (literal -> REAL .)
    ENQUANTO        reduce using rule 95 (literal -> REAL .)
    PARA            reduce using rule 95 (literal -> REAL .)
    $end            reduce using rule 95 (literal -> REAL .)
    ,               reduce using rule 95 (literal -> REAL .)
    )               reduce using rule 95 (literal -> REAL .)


state 30

    (71) exp_ou -> exp_e .
    (74) exp_e -> exp_e . E exp_nao

    OU              reduce using rule 71 (exp_ou -> exp_e .)
    NOVALINHA       reduce using rule 71 (exp_ou -> exp_e .)
    FIM             reduce using rule 71 (exp_ou -> exp_e .)
    SENAOSE         reduce using rule 71 (exp_ou -> exp_e .)
    SENAO           reduce using rule 71 (exp_ou -> exp_e .)
    :               reduce using rule 71 (exp_ou -> exp_e .)
    E               shift and go to state 57


state 31

    (75) exp_nao -> exp_a .
    (69) exp_a -> exp_a . + exp_m
    (70) exp_a -> exp_a . - exp_m

    E               reduce using rule 75 (exp_nao -> exp_a .)
    OU              reduce using rule 75 (exp_nao -> exp_a .)
    :               reduce using rule 75 (exp_nao -> exp_a .)
    NOVALINHA       reduce using rule 75 (exp_nao -> exp_a .)
    FIM             reduce using rule 75 (exp_nao -> exp_a .)
    SENAOSE         reduce using rule 75 (exp_nao -> exp_a .)
    SENAO           reduce using rule 75 (exp_nao -> exp_a .)
    +               shift and go to state 59
    -               shift and go to state 58


state 32

    (47) exponenciacao -> comparacao .
    (48) exponenciacao -> comparacao . EXP exp_u

    *               reduce using rule 47 (exponenciacao -> comparacao .)
    DIVINT          reduce using rule 47 (exponenciacao -> comparacao .)
    /               reduce using rule 47 (exponenciacao -> comparacao .)
    +               reduce using rule 47 (exponenciacao -> comparacao .)
    -               reduce using rule 47 (exponenciacao -> comparacao .)
    E               reduce using rule 47 (exponenciacao -> comparacao .)
    OU              reduce using rule 47 (exponenciacao -> comparacao .)
    :               reduce using rule 47 (exponenciacao -> comparacao .)
    NOVALINHA       reduce using rule 47 (exponenciacao -> comparacao .)
    FIM             reduce using rule 47 (exponenciacao -> comparacao .)
    SENAOSE         reduce using rule 47 (exponenciacao -> comparacao .)
    SENAO           reduce using rule 47 (exponenciacao -> comparacao .)
    EXP             shift and go to state 60


state 33

    (68) exp_a -> exp_m .
    (65) exp_m -> exp_m . * exp_u
    (66) exp_m -> exp_m . DIVINT exp_u
    (67) exp_m -> exp_m . / exp_u

    +               reduce using rule 68 (exp_a -> exp_m .)
    -               reduce using rule 68 (exp_a -> exp_m .)
    E               reduce using rule 68 (exp_a -> exp_m .)
    OU              reduce using rule 68 (exp_a -> exp_m .)
    :               reduce using rule 68 (exp_a -> exp_m .)
    NOVALINHA       reduce using rule 68 (exp_a -> exp_m .)
    FIM             reduce using rule 68 (exp_a -> exp_m .)
    SENAOSE         reduce using rule 68 (exp_a -> exp_m .)
    SENAO           reduce using rule 68 (exp_a -> exp_m .)
    *               shift and go to state 62
    DIVINT          shift and go to state 61
    /               shift and go to state 63


state 34

    (22) enquanto -> ENQUANTO expressao . : suite FIM

    :               shift and go to state 64


state 35

    (51) exp_u -> + . exp_u
    (49) exp_u -> . exponenciacao
    (50) exp_u -> . - exp_u
    (51) exp_u -> . + exp_u
    (47) exponenciacao -> . comparacao
    (48) exponenciacao -> . comparacao EXP exp_u
    (39) comparacao -> . valor
    (40) comparacao -> . valor operador_comp valor
    (34) valor -> . ID
    (35) valor -> . literal
    (36) valor -> . chamada
    (37) valor -> . CONSTANTE
    (93) literal -> . PALAVRA
    (94) literal -> . INT
    (95) literal -> . REAL
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )

    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    comparacao                     shift and go to state 32
    chamada                        shift and go to state 41
    exp_u                          shift and go to state 65
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    valor                          shift and go to state 40

state 36

    (50) exp_u -> - . exp_u
    (49) exp_u -> . exponenciacao
    (50) exp_u -> . - exp_u
    (51) exp_u -> . + exp_u
    (47) exponenciacao -> . comparacao
    (48) exponenciacao -> . comparacao EXP exp_u
    (39) comparacao -> . valor
    (40) comparacao -> . valor operador_comp valor
    (34) valor -> . ID
    (35) valor -> . literal
    (36) valor -> . chamada
    (37) valor -> . CONSTANTE
    (93) literal -> . PALAVRA
    (94) literal -> . INT
    (95) literal -> . REAL
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )

    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    comparacao                     shift and go to state 32
    chamada                        shift and go to state 41
    exp_u                          shift and go to state 66
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    valor                          shift and go to state 40

state 37

    (64) exp_m -> exp_u .

    *               reduce using rule 64 (exp_m -> exp_u .)
    DIVINT          reduce using rule 64 (exp_m -> exp_u .)
    /               reduce using rule 64 (exp_m -> exp_u .)
    +               reduce using rule 64 (exp_m -> exp_u .)
    -               reduce using rule 64 (exp_m -> exp_u .)
    E               reduce using rule 64 (exp_m -> exp_u .)
    OU              reduce using rule 64 (exp_m -> exp_u .)
    :               reduce using rule 64 (exp_m -> exp_u .)
    NOVALINHA       reduce using rule 64 (exp_m -> exp_u .)
    FIM             reduce using rule 64 (exp_m -> exp_u .)
    SENAOSE         reduce using rule 64 (exp_m -> exp_u .)
    SENAO           reduce using rule 64 (exp_m -> exp_u .)


state 38

    (35) valor -> literal .

    <               reduce using rule 35 (valor -> literal .)
    >               reduce using rule 35 (valor -> literal .)
    IGUIG           reduce using rule 35 (valor -> literal .)
    MAIORIG         reduce using rule 35 (valor -> literal .)
    MENORIG         reduce using rule 35 (valor -> literal .)
    DIF             reduce using rule 35 (valor -> literal .)
    EXP             reduce using rule 35 (valor -> literal .)
    *               reduce using rule 35 (valor -> literal .)
    DIVINT          reduce using rule 35 (valor -> literal .)
    /               reduce using rule 35 (valor -> literal .)
    +               reduce using rule 35 (valor -> literal .)
    -               reduce using rule 35 (valor -> literal .)
    E               reduce using rule 35 (valor -> literal .)
    OU              reduce using rule 35 (valor -> literal .)
    NOVALINHA       reduce using rule 35 (valor -> literal .)
    FIM             reduce using rule 35 (valor -> literal .)
    SENAOSE         reduce using rule 35 (valor -> literal .)
    SENAO           reduce using rule 35 (valor -> literal .)
    :               reduce using rule 35 (valor -> literal .)
    ,               reduce using rule 35 (valor -> literal .)
    )               reduce using rule 35 (valor -> literal .)
    TIPO            reduce using rule 35 (valor -> literal .)
    DEF             reduce using rule 35 (valor -> literal .)
    ID              reduce using rule 35 (valor -> literal .)
    SE              reduce using rule 35 (valor -> literal .)
    ENQUANTO        reduce using rule 35 (valor -> literal .)
    PARA            reduce using rule 35 (valor -> literal .)
    $end            reduce using rule 35 (valor -> literal .)


state 39

    (49) exp_u -> exponenciacao .

    *               reduce using rule 49 (exp_u -> exponenciacao .)
    DIVINT          reduce using rule 49 (exp_u -> exponenciacao .)
    /               reduce using rule 49 (exp_u -> exponenciacao .)
    +               reduce using rule 49 (exp_u -> exponenciacao .)
    -               reduce using rule 49 (exp_u -> exponenciacao .)
    E               reduce using rule 49 (exp_u -> exponenciacao .)
    OU              reduce using rule 49 (exp_u -> exponenciacao .)
    NOVALINHA       reduce using rule 49 (exp_u -> exponenciacao .)
    FIM             reduce using rule 49 (exp_u -> exponenciacao .)
    SENAOSE         reduce using rule 49 (exp_u -> exponenciacao .)
    SENAO           reduce using rule 49 (exp_u -> exponenciacao .)
    :               reduce using rule 49 (exp_u -> exponenciacao .)


state 40

    (39) comparacao -> valor .
    (40) comparacao -> valor . operador_comp valor
    (41) operador_comp -> . <
    (42) operador_comp -> . >
    (43) operador_comp -> . IGUIG
    (44) operador_comp -> . MAIORIG
    (45) operador_comp -> . MENORIG
    (46) operador_comp -> . DIF

    EXP             reduce using rule 39 (comparacao -> valor .)
    *               reduce using rule 39 (comparacao -> valor .)
    DIVINT          reduce using rule 39 (comparacao -> valor .)
    /               reduce using rule 39 (comparacao -> valor .)
    +               reduce using rule 39 (comparacao -> valor .)
    -               reduce using rule 39 (comparacao -> valor .)
    E               reduce using rule 39 (comparacao -> valor .)
    OU              reduce using rule 39 (comparacao -> valor .)
    :               reduce using rule 39 (comparacao -> valor .)
    NOVALINHA       reduce using rule 39 (comparacao -> valor .)
    FIM             reduce using rule 39 (comparacao -> valor .)
    SENAOSE         reduce using rule 39 (comparacao -> valor .)
    SENAO           reduce using rule 39 (comparacao -> valor .)
    <               shift and go to state 72
    >               shift and go to state 73
    IGUIG           shift and go to state 71
    MAIORIG         shift and go to state 70
    MENORIG         shift and go to state 67
    DIF             shift and go to state 68

    operador_comp                  shift and go to state 69

state 41

    (36) valor -> chamada .

    <               reduce using rule 36 (valor -> chamada .)
    >               reduce using rule 36 (valor -> chamada .)
    IGUIG           reduce using rule 36 (valor -> chamada .)
    MAIORIG         reduce using rule 36 (valor -> chamada .)
    MENORIG         reduce using rule 36 (valor -> chamada .)
    DIF             reduce using rule 36 (valor -> chamada .)
    EXP             reduce using rule 36 (valor -> chamada .)
    *               reduce using rule 36 (valor -> chamada .)
    DIVINT          reduce using rule 36 (valor -> chamada .)
    /               reduce using rule 36 (valor -> chamada .)
    +               reduce using rule 36 (valor -> chamada .)
    -               reduce using rule 36 (valor -> chamada .)
    E               reduce using rule 36 (valor -> chamada .)
    OU              reduce using rule 36 (valor -> chamada .)
    NOVALINHA       reduce using rule 36 (valor -> chamada .)
    FIM             reduce using rule 36 (valor -> chamada .)
    SENAOSE         reduce using rule 36 (valor -> chamada .)
    SENAO           reduce using rule 36 (valor -> chamada .)
    :               reduce using rule 36 (valor -> chamada .)
    ,               reduce using rule 36 (valor -> chamada .)
    )               reduce using rule 36 (valor -> chamada .)
    TIPO            reduce using rule 36 (valor -> chamada .)
    DEF             reduce using rule 36 (valor -> chamada .)
    ID              reduce using rule 36 (valor -> chamada .)
    SE              reduce using rule 36 (valor -> chamada .)
    ENQUANTO        reduce using rule 36 (valor -> chamada .)
    PARA            reduce using rule 36 (valor -> chamada .)
    $end            reduce using rule 36 (valor -> chamada .)


state 42

    (38) expressao -> exp_ou .
    (72) exp_ou -> exp_ou . OU exp_e

    NOVALINHA       reduce using rule 38 (expressao -> exp_ou .)
    FIM             reduce using rule 38 (expressao -> exp_ou .)
    SENAOSE         reduce using rule 38 (expressao -> exp_ou .)
    SENAO           reduce using rule 38 (expressao -> exp_ou .)
    :               reduce using rule 38 (expressao -> exp_ou .)
    OU              shift and go to state 74


state 43

    (76) exp_nao -> ! . exp_nao
    (75) exp_nao -> . exp_a
    (76) exp_nao -> . ! exp_nao
    (68) exp_a -> . exp_m
    (69) exp_a -> . exp_a + exp_m
    (70) exp_a -> . exp_a - exp_m
    (64) exp_m -> . exp_u
    (65) exp_m -> . exp_m * exp_u
    (66) exp_m -> . exp_m DIVINT exp_u
    (67) exp_m -> . exp_m / exp_u
    (49) exp_u -> . exponenciacao
    (50) exp_u -> . - exp_u
    (51) exp_u -> . + exp_u
    (47) exponenciacao -> . comparacao
    (48) exponenciacao -> . comparacao EXP exp_u
    (39) comparacao -> . valor
    (40) comparacao -> . valor operador_comp valor
    (34) valor -> . ID
    (35) valor -> . literal
    (36) valor -> . chamada
    (37) valor -> . CONSTANTE
    (93) literal -> . PALAVRA
    (94) literal -> . INT
    (95) literal -> . REAL
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )

    !               shift and go to state 43
    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    exp_a                          shift and go to state 31
    comparacao                     shift and go to state 32
    exp_m                          shift and go to state 33
    exp_nao                        shift and go to state 75
    chamada                        shift and go to state 41
    exp_u                          shift and go to state 37
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    valor                          shift and go to state 40

state 44

    (93) literal -> PALAVRA .

    <               reduce using rule 93 (literal -> PALAVRA .)
    >               reduce using rule 93 (literal -> PALAVRA .)
    IGUIG           reduce using rule 93 (literal -> PALAVRA .)
    MAIORIG         reduce using rule 93 (literal -> PALAVRA .)
    MENORIG         reduce using rule 93 (literal -> PALAVRA .)
    DIF             reduce using rule 93 (literal -> PALAVRA .)
    EXP             reduce using rule 93 (literal -> PALAVRA .)
    *               reduce using rule 93 (literal -> PALAVRA .)
    DIVINT          reduce using rule 93 (literal -> PALAVRA .)
    /               reduce using rule 93 (literal -> PALAVRA .)
    +               reduce using rule 93 (literal -> PALAVRA .)
    -               reduce using rule 93 (literal -> PALAVRA .)
    E               reduce using rule 93 (literal -> PALAVRA .)
    OU              reduce using rule 93 (literal -> PALAVRA .)
    :               reduce using rule 93 (literal -> PALAVRA .)
    NOVALINHA       reduce using rule 93 (literal -> PALAVRA .)
    FIM             reduce using rule 93 (literal -> PALAVRA .)
    SENAOSE         reduce using rule 93 (literal -> PALAVRA .)
    SENAO           reduce using rule 93 (literal -> PALAVRA .)
    TIPO            reduce using rule 93 (literal -> PALAVRA .)
    DEF             reduce using rule 93 (literal -> PALAVRA .)
    ID              reduce using rule 93 (literal -> PALAVRA .)
    SE              reduce using rule 93 (literal -> PALAVRA .)
    ENQUANTO        reduce using rule 93 (literal -> PALAVRA .)
    PARA            reduce using rule 93 (literal -> PALAVRA .)
    $end            reduce using rule 93 (literal -> PALAVRA .)
    ,               reduce using rule 93 (literal -> PALAVRA .)
    )               reduce using rule 93 (literal -> PALAVRA .)


state 45

    (34) valor -> ID .
    (32) chamada -> ID . ( valor valorvalor )
    (33) chamada -> ID . ( )

    <               reduce using rule 34 (valor -> ID .)
    >               reduce using rule 34 (valor -> ID .)
    IGUIG           reduce using rule 34 (valor -> ID .)
    MAIORIG         reduce using rule 34 (valor -> ID .)
    MENORIG         reduce using rule 34 (valor -> ID .)
    DIF             reduce using rule 34 (valor -> ID .)
    EXP             reduce using rule 34 (valor -> ID .)
    *               reduce using rule 34 (valor -> ID .)
    DIVINT          reduce using rule 34 (valor -> ID .)
    /               reduce using rule 34 (valor -> ID .)
    +               reduce using rule 34 (valor -> ID .)
    -               reduce using rule 34 (valor -> ID .)
    E               reduce using rule 34 (valor -> ID .)
    OU              reduce using rule 34 (valor -> ID .)
    NOVALINHA       reduce using rule 34 (valor -> ID .)
    FIM             reduce using rule 34 (valor -> ID .)
    SENAOSE         reduce using rule 34 (valor -> ID .)
    SENAO           reduce using rule 34 (valor -> ID .)
    :               reduce using rule 34 (valor -> ID .)
    ,               reduce using rule 34 (valor -> ID .)
    )               reduce using rule 34 (valor -> ID .)
    TIPO            reduce using rule 34 (valor -> ID .)
    DEF             reduce using rule 34 (valor -> ID .)
    ID              reduce using rule 34 (valor -> ID .)
    SE              reduce using rule 34 (valor -> ID .)
    ENQUANTO        reduce using rule 34 (valor -> ID .)
    PARA            reduce using rule 34 (valor -> ID .)
    $end            reduce using rule 34 (valor -> ID .)
    (               shift and go to state 26


state 46

    (37) valor -> CONSTANTE .

    <               reduce using rule 37 (valor -> CONSTANTE .)
    >               reduce using rule 37 (valor -> CONSTANTE .)
    IGUIG           reduce using rule 37 (valor -> CONSTANTE .)
    MAIORIG         reduce using rule 37 (valor -> CONSTANTE .)
    MENORIG         reduce using rule 37 (valor -> CONSTANTE .)
    DIF             reduce using rule 37 (valor -> CONSTANTE .)
    EXP             reduce using rule 37 (valor -> CONSTANTE .)
    *               reduce using rule 37 (valor -> CONSTANTE .)
    DIVINT          reduce using rule 37 (valor -> CONSTANTE .)
    /               reduce using rule 37 (valor -> CONSTANTE .)
    +               reduce using rule 37 (valor -> CONSTANTE .)
    -               reduce using rule 37 (valor -> CONSTANTE .)
    E               reduce using rule 37 (valor -> CONSTANTE .)
    OU              reduce using rule 37 (valor -> CONSTANTE .)
    NOVALINHA       reduce using rule 37 (valor -> CONSTANTE .)
    FIM             reduce using rule 37 (valor -> CONSTANTE .)
    SENAOSE         reduce using rule 37 (valor -> CONSTANTE .)
    SENAO           reduce using rule 37 (valor -> CONSTANTE .)
    :               reduce using rule 37 (valor -> CONSTANTE .)
    ,               reduce using rule 37 (valor -> CONSTANTE .)
    )               reduce using rule 37 (valor -> CONSTANTE .)
    TIPO            reduce using rule 37 (valor -> CONSTANTE .)
    DEF             reduce using rule 37 (valor -> CONSTANTE .)
    ID              reduce using rule 37 (valor -> CONSTANTE .)
    SE              reduce using rule 37 (valor -> CONSTANTE .)
    ENQUANTO        reduce using rule 37 (valor -> CONSTANTE .)
    PARA            reduce using rule 37 (valor -> CONSTANTE .)
    $end            reduce using rule 37 (valor -> CONSTANTE .)


state 47

    (73) exp_e -> exp_nao .

    E               reduce using rule 73 (exp_e -> exp_nao .)
    OU              reduce using rule 73 (exp_e -> exp_nao .)
    :               reduce using rule 73 (exp_e -> exp_nao .)
    NOVALINHA       reduce using rule 73 (exp_e -> exp_nao .)
    FIM             reduce using rule 73 (exp_e -> exp_nao .)
    SENAOSE         reduce using rule 73 (exp_e -> exp_nao .)
    SENAO           reduce using rule 73 (exp_e -> exp_nao .)


state 48

    (94) literal -> INT .

    <               reduce using rule 94 (literal -> INT .)
    >               reduce using rule 94 (literal -> INT .)
    IGUIG           reduce using rule 94 (literal -> INT .)
    MAIORIG         reduce using rule 94 (literal -> INT .)
    MENORIG         reduce using rule 94 (literal -> INT .)
    DIF             reduce using rule 94 (literal -> INT .)
    EXP             reduce using rule 94 (literal -> INT .)
    *               reduce using rule 94 (literal -> INT .)
    DIVINT          reduce using rule 94 (literal -> INT .)
    /               reduce using rule 94 (literal -> INT .)
    +               reduce using rule 94 (literal -> INT .)
    -               reduce using rule 94 (literal -> INT .)
    E               reduce using rule 94 (literal -> INT .)
    OU              reduce using rule 94 (literal -> INT .)
    :               reduce using rule 94 (literal -> INT .)
    NOVALINHA       reduce using rule 94 (literal -> INT .)
    FIM             reduce using rule 94 (literal -> INT .)
    SENAOSE         reduce using rule 94 (literal -> INT .)
    SENAO           reduce using rule 94 (literal -> INT .)
    TIPO            reduce using rule 94 (literal -> INT .)
    DEF             reduce using rule 94 (literal -> INT .)
    ID              reduce using rule 94 (literal -> INT .)
    SE              reduce using rule 94 (literal -> INT .)
    ENQUANTO        reduce using rule 94 (literal -> INT .)
    PARA            reduce using rule 94 (literal -> INT .)
    $end            reduce using rule 94 (literal -> INT .)
    ,               reduce using rule 94 (literal -> INT .)
    )               reduce using rule 94 (literal -> INT .)


state 49

    (21) se -> SE expressao . : suite senaosemais senao FIM

    :               shift and go to state 76


state 50

    (25) para -> PARA ID DE . intid ATE intid : suite FIM
    (23) intid -> . INT
    (24) intid -> . ID

    INT             shift and go to state 77
    ID              shift and go to state 79

    intid                          shift and go to state 78

state 51

    (26) definicao -> DEF TIPO ID . ( params ) : suite FIM

    (               shift and go to state 80


state 52

    (27) defsubfuncao -> DEF VAZIO ID . ( params ) : suite FIM

    (               shift and go to state 81


state 53

    (33) chamada -> ID ( ) .

    <               reduce using rule 33 (chamada -> ID ( ) .)
    >               reduce using rule 33 (chamada -> ID ( ) .)
    IGUIG           reduce using rule 33 (chamada -> ID ( ) .)
    MAIORIG         reduce using rule 33 (chamada -> ID ( ) .)
    MENORIG         reduce using rule 33 (chamada -> ID ( ) .)
    DIF             reduce using rule 33 (chamada -> ID ( ) .)
    EXP             reduce using rule 33 (chamada -> ID ( ) .)
    *               reduce using rule 33 (chamada -> ID ( ) .)
    DIVINT          reduce using rule 33 (chamada -> ID ( ) .)
    /               reduce using rule 33 (chamada -> ID ( ) .)
    +               reduce using rule 33 (chamada -> ID ( ) .)
    -               reduce using rule 33 (chamada -> ID ( ) .)
    E               reduce using rule 33 (chamada -> ID ( ) .)
    OU              reduce using rule 33 (chamada -> ID ( ) .)
    :               reduce using rule 33 (chamada -> ID ( ) .)
    NOVALINHA       reduce using rule 33 (chamada -> ID ( ) .)
    FIM             reduce using rule 33 (chamada -> ID ( ) .)
    SENAOSE         reduce using rule 33 (chamada -> ID ( ) .)
    SENAO           reduce using rule 33 (chamada -> ID ( ) .)
    TIPO            reduce using rule 33 (chamada -> ID ( ) .)
    DEF             reduce using rule 33 (chamada -> ID ( ) .)
    ID              reduce using rule 33 (chamada -> ID ( ) .)
    SE              reduce using rule 33 (chamada -> ID ( ) .)
    ENQUANTO        reduce using rule 33 (chamada -> ID ( ) .)
    PARA            reduce using rule 33 (chamada -> ID ( ) .)
    $end            reduce using rule 33 (chamada -> ID ( ) .)
    ,               reduce using rule 33 (chamada -> ID ( ) .)
    )               reduce using rule 33 (chamada -> ID ( ) .)


state 54

    (32) chamada -> ID ( valor . valorvalor )
    (30) valorvalor -> . , valor valorvalor
    (31) valorvalor -> . empty
    (15) empty -> .

    ,               shift and go to state 82
    )               reduce using rule 15 (empty -> .)

    empty                          shift and go to state 83
    valorvalor                     shift and go to state 84

state 55

    (28) atribuicao -> ID [ INT . ] = valor

    ]               shift and go to state 85


state 56

    (29) atribuicao -> ID = valor .

    NOVALINHA       reduce using rule 29 (atribuicao -> ID = valor .)
    FIM             reduce using rule 29 (atribuicao -> ID = valor .)
    SENAOSE         reduce using rule 29 (atribuicao -> ID = valor .)
    SENAO           reduce using rule 29 (atribuicao -> ID = valor .)
    TIPO            reduce using rule 29 (atribuicao -> ID = valor .)
    DEF             reduce using rule 29 (atribuicao -> ID = valor .)
    ID              reduce using rule 29 (atribuicao -> ID = valor .)
    SE              reduce using rule 29 (atribuicao -> ID = valor .)
    ENQUANTO        reduce using rule 29 (atribuicao -> ID = valor .)
    PARA            reduce using rule 29 (atribuicao -> ID = valor .)
    $end            reduce using rule 29 (atribuicao -> ID = valor .)


state 57

    (74) exp_e -> exp_e E . exp_nao
    (75) exp_nao -> . exp_a
    (76) exp_nao -> . ! exp_nao
    (68) exp_a -> . exp_m
    (69) exp_a -> . exp_a + exp_m
    (70) exp_a -> . exp_a - exp_m
    (64) exp_m -> . exp_u
    (65) exp_m -> . exp_m * exp_u
    (66) exp_m -> . exp_m DIVINT exp_u
    (67) exp_m -> . exp_m / exp_u
    (49) exp_u -> . exponenciacao
    (50) exp_u -> . - exp_u
    (51) exp_u -> . + exp_u
    (47) exponenciacao -> . comparacao
    (48) exponenciacao -> . comparacao EXP exp_u
    (39) comparacao -> . valor
    (40) comparacao -> . valor operador_comp valor
    (34) valor -> . ID
    (35) valor -> . literal
    (36) valor -> . chamada
    (37) valor -> . CONSTANTE
    (93) literal -> . PALAVRA
    (94) literal -> . INT
    (95) literal -> . REAL
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )

    !               shift and go to state 43
    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    exp_a                          shift and go to state 31
    comparacao                     shift and go to state 32
    exp_m                          shift and go to state 33
    exp_nao                        shift and go to state 86
    chamada                        shift and go to state 41
    exp_u                          shift and go to state 37
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    valor                          shift and go to state 40

state 58

    (70) exp_a -> exp_a - . exp_m
    (64) exp_m -> . exp_u
    (65) exp_m -> . exp_m * exp_u
    (66) exp_m -> . exp_m DIVINT exp_u
    (67) exp_m -> . exp_m / exp_u
    (49) exp_u -> . exponenciacao
    (50) exp_u -> . - exp_u
    (51) exp_u -> . + exp_u
    (47) exponenciacao -> . comparacao
    (48) exponenciacao -> . comparacao EXP exp_u
    (39) comparacao -> . valor
    (40) comparacao -> . valor operador_comp valor
    (34) valor -> . ID
    (35) valor -> . literal
    (36) valor -> . chamada
    (37) valor -> . CONSTANTE
    (93) literal -> . PALAVRA
    (94) literal -> . INT
    (95) literal -> . REAL
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )

    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    comparacao                     shift and go to state 32
    exp_m                          shift and go to state 87
    chamada                        shift and go to state 41
    exp_u                          shift and go to state 37
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    valor                          shift and go to state 40

state 59

    (69) exp_a -> exp_a + . exp_m
    (64) exp_m -> . exp_u
    (65) exp_m -> . exp_m * exp_u
    (66) exp_m -> . exp_m DIVINT exp_u
    (67) exp_m -> . exp_m / exp_u
    (49) exp_u -> . exponenciacao
    (50) exp_u -> . - exp_u
    (51) exp_u -> . + exp_u
    (47) exponenciacao -> . comparacao
    (48) exponenciacao -> . comparacao EXP exp_u
    (39) comparacao -> . valor
    (40) comparacao -> . valor operador_comp valor
    (34) valor -> . ID
    (35) valor -> . literal
    (36) valor -> . chamada
    (37) valor -> . CONSTANTE
    (93) literal -> . PALAVRA
    (94) literal -> . INT
    (95) literal -> . REAL
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )

    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    comparacao                     shift and go to state 32
    exp_m                          shift and go to state 88
    chamada                        shift and go to state 41
    exp_u                          shift and go to state 37
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    valor                          shift and go to state 40

state 60

    (48) exponenciacao -> comparacao EXP . exp_u
    (49) exp_u -> . exponenciacao
    (50) exp_u -> . - exp_u
    (51) exp_u -> . + exp_u
    (47) exponenciacao -> . comparacao
    (48) exponenciacao -> . comparacao EXP exp_u
    (39) comparacao -> . valor
    (40) comparacao -> . valor operador_comp valor
    (34) valor -> . ID
    (35) valor -> . literal
    (36) valor -> . chamada
    (37) valor -> . CONSTANTE
    (93) literal -> . PALAVRA
    (94) literal -> . INT
    (95) literal -> . REAL
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )

    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    comparacao                     shift and go to state 32
    chamada                        shift and go to state 41
    exp_u                          shift and go to state 89
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    valor                          shift and go to state 40

state 61

    (66) exp_m -> exp_m DIVINT . exp_u
    (49) exp_u -> . exponenciacao
    (50) exp_u -> . - exp_u
    (51) exp_u -> . + exp_u
    (47) exponenciacao -> . comparacao
    (48) exponenciacao -> . comparacao EXP exp_u
    (39) comparacao -> . valor
    (40) comparacao -> . valor operador_comp valor
    (34) valor -> . ID
    (35) valor -> . literal
    (36) valor -> . chamada
    (37) valor -> . CONSTANTE
    (93) literal -> . PALAVRA
    (94) literal -> . INT
    (95) literal -> . REAL
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )

    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    comparacao                     shift and go to state 32
    chamada                        shift and go to state 41
    exp_u                          shift and go to state 90
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    valor                          shift and go to state 40

state 62

    (65) exp_m -> exp_m * . exp_u
    (49) exp_u -> . exponenciacao
    (50) exp_u -> . - exp_u
    (51) exp_u -> . + exp_u
    (47) exponenciacao -> . comparacao
    (48) exponenciacao -> . comparacao EXP exp_u
    (39) comparacao -> . valor
    (40) comparacao -> . valor operador_comp valor
    (34) valor -> . ID
    (35) valor -> . literal
    (36) valor -> . chamada
    (37) valor -> . CONSTANTE
    (93) literal -> . PALAVRA
    (94) literal -> . INT
    (95) literal -> . REAL
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )

    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    comparacao                     shift and go to state 32
    chamada                        shift and go to state 41
    exp_u                          shift and go to state 91
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    valor                          shift and go to state 40

state 63

    (67) exp_m -> exp_m / . exp_u
    (49) exp_u -> . exponenciacao
    (50) exp_u -> . - exp_u
    (51) exp_u -> . + exp_u
    (47) exponenciacao -> . comparacao
    (48) exponenciacao -> . comparacao EXP exp_u
    (39) comparacao -> . valor
    (40) comparacao -> . valor operador_comp valor
    (34) valor -> . ID
    (35) valor -> . literal
    (36) valor -> . chamada
    (37) valor -> . CONSTANTE
    (93) literal -> . PALAVRA
    (94) literal -> . INT
    (95) literal -> . REAL
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )

    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    comparacao                     shift and go to state 32
    chamada                        shift and go to state 41
    exp_u                          shift and go to state 92
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    valor                          shift and go to state 40

state 64

    (22) enquanto -> ENQUANTO expressao : . suite FIM
    (77) suite -> . afirmacao
    (78) suite -> . afirmacao NOVALINHA suite
    (79) suite -> . NOVALINHA suite
    (80) suite -> . empty
    (81) afirmacao -> . afirm_simples
    (82) afirmacao -> . afirm_composto
    (15) empty -> .
    (83) afirm_simples -> . atribuicao
    (84) afirm_simples -> . atribuicao_aumentada
    (85) afirm_simples -> . imprime
    (86) afirm_simples -> . retorna
    (87) afirm_simples -> . QUEBRA
    (88) afirm_simples -> . CONTINUA
    (89) afirm_composto -> . se
    (90) afirm_composto -> . enquanto
    (91) afirm_composto -> . para
    (28) atribuicao -> . ID [ INT ] = valor
    (29) atribuicao -> . ID = valor
    (92) atribuicao_aumentada -> . ID op_aum valor
    (57) imprime -> . IMPRIME expressao
    (56) retorna -> . RETORNA expressao
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    NOVALINHA       shift and go to state 104
    FIM             reduce using rule 15 (empty -> .)
    QUEBRA          shift and go to state 108
    CONTINUA        shift and go to state 109
    ID              shift and go to state 105
    IMPRIME         shift and go to state 106
    RETORNA         shift and go to state 103
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    imprime                        shift and go to state 100
    enquanto                       shift and go to state 95
    afirm_composto                 shift and go to state 101
    atribuicao_aumentada           shift and go to state 96
    afirmacao                      shift and go to state 93
    para                           shift and go to state 102
    se                             shift and go to state 110
    retorna                        shift and go to state 97
    atribuicao                     shift and go to state 107
    suite                          shift and go to state 98
    afirm_simples                  shift and go to state 94
    empty                          shift and go to state 99

state 65

    (51) exp_u -> + exp_u .

    *               reduce using rule 51 (exp_u -> + exp_u .)
    DIVINT          reduce using rule 51 (exp_u -> + exp_u .)
    /               reduce using rule 51 (exp_u -> + exp_u .)
    +               reduce using rule 51 (exp_u -> + exp_u .)
    -               reduce using rule 51 (exp_u -> + exp_u .)
    E               reduce using rule 51 (exp_u -> + exp_u .)
    OU              reduce using rule 51 (exp_u -> + exp_u .)
    NOVALINHA       reduce using rule 51 (exp_u -> + exp_u .)
    FIM             reduce using rule 51 (exp_u -> + exp_u .)
    SENAOSE         reduce using rule 51 (exp_u -> + exp_u .)
    SENAO           reduce using rule 51 (exp_u -> + exp_u .)
    :               reduce using rule 51 (exp_u -> + exp_u .)


state 66

    (50) exp_u -> - exp_u .

    *               reduce using rule 50 (exp_u -> - exp_u .)
    DIVINT          reduce using rule 50 (exp_u -> - exp_u .)
    /               reduce using rule 50 (exp_u -> - exp_u .)
    +               reduce using rule 50 (exp_u -> - exp_u .)
    -               reduce using rule 50 (exp_u -> - exp_u .)
    E               reduce using rule 50 (exp_u -> - exp_u .)
    OU              reduce using rule 50 (exp_u -> - exp_u .)
    NOVALINHA       reduce using rule 50 (exp_u -> - exp_u .)
    FIM             reduce using rule 50 (exp_u -> - exp_u .)
    SENAOSE         reduce using rule 50 (exp_u -> - exp_u .)
    SENAO           reduce using rule 50 (exp_u -> - exp_u .)
    :               reduce using rule 50 (exp_u -> - exp_u .)


state 67

    (45) operador_comp -> MENORIG .

    ID              reduce using rule 45 (operador_comp -> MENORIG .)
    CONSTANTE       reduce using rule 45 (operador_comp -> MENORIG .)
    PALAVRA         reduce using rule 45 (operador_comp -> MENORIG .)
    INT             reduce using rule 45 (operador_comp -> MENORIG .)
    REAL            reduce using rule 45 (operador_comp -> MENORIG .)


state 68

    (46) operador_comp -> DIF .

    ID              reduce using rule 46 (operador_comp -> DIF .)
    CONSTANTE       reduce using rule 46 (operador_comp -> DIF .)
    PALAVRA         reduce using rule 46 (operador_comp -> DIF .)
    INT             reduce using rule 46 (operador_comp -> DIF .)
    REAL            reduce using rule 46 (operador_comp -> DIF .)


state 69

    (40) comparacao -> valor operador_comp . valor
    (34) valor -> . ID
    (35) valor -> . literal
    (36) valor -> . chamada
    (37) valor -> . CONSTANTE
    (93) literal -> . PALAVRA
    (94) literal -> . INT
    (95) literal -> . REAL
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )

    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    literal                        shift and go to state 38
    chamada                        shift and go to state 41
    valor                          shift and go to state 111

state 70

    (44) operador_comp -> MAIORIG .

    ID              reduce using rule 44 (operador_comp -> MAIORIG .)
    CONSTANTE       reduce using rule 44 (operador_comp -> MAIORIG .)
    PALAVRA         reduce using rule 44 (operador_comp -> MAIORIG .)
    INT             reduce using rule 44 (operador_comp -> MAIORIG .)
    REAL            reduce using rule 44 (operador_comp -> MAIORIG .)


state 71

    (43) operador_comp -> IGUIG .

    ID              reduce using rule 43 (operador_comp -> IGUIG .)
    CONSTANTE       reduce using rule 43 (operador_comp -> IGUIG .)
    PALAVRA         reduce using rule 43 (operador_comp -> IGUIG .)
    INT             reduce using rule 43 (operador_comp -> IGUIG .)
    REAL            reduce using rule 43 (operador_comp -> IGUIG .)


state 72

    (41) operador_comp -> < .

    ID              reduce using rule 41 (operador_comp -> < .)
    CONSTANTE       reduce using rule 41 (operador_comp -> < .)
    PALAVRA         reduce using rule 41 (operador_comp -> < .)
    INT             reduce using rule 41 (operador_comp -> < .)
    REAL            reduce using rule 41 (operador_comp -> < .)


state 73

    (42) operador_comp -> > .

    ID              reduce using rule 42 (operador_comp -> > .)
    CONSTANTE       reduce using rule 42 (operador_comp -> > .)
    PALAVRA         reduce using rule 42 (operador_comp -> > .)
    INT             reduce using rule 42 (operador_comp -> > .)
    REAL            reduce using rule 42 (operador_comp -> > .)


state 74

    (72) exp_ou -> exp_ou OU . exp_e
    (73) exp_e -> . exp_nao
    (74) exp_e -> . exp_e E exp_nao
    (75) exp_nao -> . exp_a
    (76) exp_nao -> . ! exp_nao
    (68) exp_a -> . exp_m
    (69) exp_a -> . exp_a + exp_m
    (70) exp_a -> . exp_a - exp_m
    (64) exp_m -> . exp_u
    (65) exp_m -> . exp_m * exp_u
    (66) exp_m -> . exp_m DIVINT exp_u
    (67) exp_m -> . exp_m / exp_u
    (49) exp_u -> . exponenciacao
    (50) exp_u -> . - exp_u
    (51) exp_u -> . + exp_u
    (47) exponenciacao -> . comparacao
    (48) exponenciacao -> . comparacao EXP exp_u
    (39) comparacao -> . valor
    (40) comparacao -> . valor operador_comp valor
    (34) valor -> . ID
    (35) valor -> . literal
    (36) valor -> . chamada
    (37) valor -> . CONSTANTE
    (93) literal -> . PALAVRA
    (94) literal -> . INT
    (95) literal -> . REAL
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )

    !               shift and go to state 43
    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    exp_e                          shift and go to state 112
    exp_a                          shift and go to state 31
    comparacao                     shift and go to state 32
    exp_m                          shift and go to state 33
    exp_nao                        shift and go to state 47
    chamada                        shift and go to state 41
    exp_u                          shift and go to state 37
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    valor                          shift and go to state 40

state 75

    (76) exp_nao -> ! exp_nao .

    E               reduce using rule 76 (exp_nao -> ! exp_nao .)
    OU              reduce using rule 76 (exp_nao -> ! exp_nao .)
    :               reduce using rule 76 (exp_nao -> ! exp_nao .)
    NOVALINHA       reduce using rule 76 (exp_nao -> ! exp_nao .)
    FIM             reduce using rule 76 (exp_nao -> ! exp_nao .)
    SENAOSE         reduce using rule 76 (exp_nao -> ! exp_nao .)
    SENAO           reduce using rule 76 (exp_nao -> ! exp_nao .)


state 76

    (21) se -> SE expressao : . suite senaosemais senao FIM
    (77) suite -> . afirmacao
    (78) suite -> . afirmacao NOVALINHA suite
    (79) suite -> . NOVALINHA suite
    (80) suite -> . empty
    (81) afirmacao -> . afirm_simples
    (82) afirmacao -> . afirm_composto
    (15) empty -> .
    (83) afirm_simples -> . atribuicao
    (84) afirm_simples -> . atribuicao_aumentada
    (85) afirm_simples -> . imprime
    (86) afirm_simples -> . retorna
    (87) afirm_simples -> . QUEBRA
    (88) afirm_simples -> . CONTINUA
    (89) afirm_composto -> . se
    (90) afirm_composto -> . enquanto
    (91) afirm_composto -> . para
    (28) atribuicao -> . ID [ INT ] = valor
    (29) atribuicao -> . ID = valor
    (92) atribuicao_aumentada -> . ID op_aum valor
    (57) imprime -> . IMPRIME expressao
    (56) retorna -> . RETORNA expressao
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    NOVALINHA       shift and go to state 104
    SENAOSE         reduce using rule 15 (empty -> .)
    SENAO           reduce using rule 15 (empty -> .)
    FIM             reduce using rule 15 (empty -> .)
    QUEBRA          shift and go to state 108
    CONTINUA        shift and go to state 109
    ID              shift and go to state 105
    IMPRIME         shift and go to state 106
    RETORNA         shift and go to state 103
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    imprime                        shift and go to state 100
    enquanto                       shift and go to state 95
    afirm_composto                 shift and go to state 101
    atribuicao_aumentada           shift and go to state 96
    afirmacao                      shift and go to state 93
    para                           shift and go to state 102
    se                             shift and go to state 110
    retorna                        shift and go to state 97
    atribuicao                     shift and go to state 107
    suite                          shift and go to state 113
    afirm_simples                  shift and go to state 94
    empty                          shift and go to state 99

state 77

    (23) intid -> INT .

    ATE             reduce using rule 23 (intid -> INT .)
    :               reduce using rule 23 (intid -> INT .)


state 78

    (25) para -> PARA ID DE intid . ATE intid : suite FIM

    ATE             shift and go to state 114


state 79

    (24) intid -> ID .

    ATE             reduce using rule 24 (intid -> ID .)
    :               reduce using rule 24 (intid -> ID .)


state 80

    (26) definicao -> DEF TIPO ID ( . params ) : suite FIM
    (53) params -> . param , params
    (54) params -> . param
    (55) params -> . empty
    (52) param -> . declaracao
    (15) empty -> .
    (14) declaracao -> . TIPO ID

    )               reduce using rule 15 (empty -> .)
    TIPO            shift and go to state 5

    declaracao                     shift and go to state 115
    params                         shift and go to state 117
    empty                          shift and go to state 118
    param                          shift and go to state 116

state 81

    (27) defsubfuncao -> DEF VAZIO ID ( . params ) : suite FIM
    (53) params -> . param , params
    (54) params -> . param
    (55) params -> . empty
    (52) param -> . declaracao
    (15) empty -> .
    (14) declaracao -> . TIPO ID

    )               reduce using rule 15 (empty -> .)
    TIPO            shift and go to state 5

    declaracao                     shift and go to state 115
    params                         shift and go to state 119
    empty                          shift and go to state 118
    param                          shift and go to state 116

state 82

    (30) valorvalor -> , . valor valorvalor
    (34) valor -> . ID
    (35) valor -> . literal
    (36) valor -> . chamada
    (37) valor -> . CONSTANTE
    (93) literal -> . PALAVRA
    (94) literal -> . INT
    (95) literal -> . REAL
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )

    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    literal                        shift and go to state 38
    chamada                        shift and go to state 41
    valor                          shift and go to state 120

state 83

    (31) valorvalor -> empty .

    )               reduce using rule 31 (valorvalor -> empty .)


state 84

    (32) chamada -> ID ( valor valorvalor . )

    )               shift and go to state 121


state 85

    (28) atribuicao -> ID [ INT ] . = valor

    =               shift and go to state 122


state 86

    (74) exp_e -> exp_e E exp_nao .

    E               reduce using rule 74 (exp_e -> exp_e E exp_nao .)
    OU              reduce using rule 74 (exp_e -> exp_e E exp_nao .)
    :               reduce using rule 74 (exp_e -> exp_e E exp_nao .)
    NOVALINHA       reduce using rule 74 (exp_e -> exp_e E exp_nao .)
    FIM             reduce using rule 74 (exp_e -> exp_e E exp_nao .)
    SENAOSE         reduce using rule 74 (exp_e -> exp_e E exp_nao .)
    SENAO           reduce using rule 74 (exp_e -> exp_e E exp_nao .)


state 87

    (70) exp_a -> exp_a - exp_m .
    (65) exp_m -> exp_m . * exp_u
    (66) exp_m -> exp_m . DIVINT exp_u
    (67) exp_m -> exp_m . / exp_u

    +               reduce using rule 70 (exp_a -> exp_a - exp_m .)
    -               reduce using rule 70 (exp_a -> exp_a - exp_m .)
    E               reduce using rule 70 (exp_a -> exp_a - exp_m .)
    OU              reduce using rule 70 (exp_a -> exp_a - exp_m .)
    :               reduce using rule 70 (exp_a -> exp_a - exp_m .)
    NOVALINHA       reduce using rule 70 (exp_a -> exp_a - exp_m .)
    FIM             reduce using rule 70 (exp_a -> exp_a - exp_m .)
    SENAOSE         reduce using rule 70 (exp_a -> exp_a - exp_m .)
    SENAO           reduce using rule 70 (exp_a -> exp_a - exp_m .)
    *               shift and go to state 62
    DIVINT          shift and go to state 61
    /               shift and go to state 63


state 88

    (69) exp_a -> exp_a + exp_m .
    (65) exp_m -> exp_m . * exp_u
    (66) exp_m -> exp_m . DIVINT exp_u
    (67) exp_m -> exp_m . / exp_u

    +               reduce using rule 69 (exp_a -> exp_a + exp_m .)
    -               reduce using rule 69 (exp_a -> exp_a + exp_m .)
    E               reduce using rule 69 (exp_a -> exp_a + exp_m .)
    OU              reduce using rule 69 (exp_a -> exp_a + exp_m .)
    :               reduce using rule 69 (exp_a -> exp_a + exp_m .)
    NOVALINHA       reduce using rule 69 (exp_a -> exp_a + exp_m .)
    FIM             reduce using rule 69 (exp_a -> exp_a + exp_m .)
    SENAOSE         reduce using rule 69 (exp_a -> exp_a + exp_m .)
    SENAO           reduce using rule 69 (exp_a -> exp_a + exp_m .)
    *               shift and go to state 62
    DIVINT          shift and go to state 61
    /               shift and go to state 63


state 89

    (48) exponenciacao -> comparacao EXP exp_u .

    *               reduce using rule 48 (exponenciacao -> comparacao EXP exp_u .)
    DIVINT          reduce using rule 48 (exponenciacao -> comparacao EXP exp_u .)
    /               reduce using rule 48 (exponenciacao -> comparacao EXP exp_u .)
    +               reduce using rule 48 (exponenciacao -> comparacao EXP exp_u .)
    -               reduce using rule 48 (exponenciacao -> comparacao EXP exp_u .)
    E               reduce using rule 48 (exponenciacao -> comparacao EXP exp_u .)
    OU              reduce using rule 48 (exponenciacao -> comparacao EXP exp_u .)
    :               reduce using rule 48 (exponenciacao -> comparacao EXP exp_u .)
    NOVALINHA       reduce using rule 48 (exponenciacao -> comparacao EXP exp_u .)
    FIM             reduce using rule 48 (exponenciacao -> comparacao EXP exp_u .)
    SENAOSE         reduce using rule 48 (exponenciacao -> comparacao EXP exp_u .)
    SENAO           reduce using rule 48 (exponenciacao -> comparacao EXP exp_u .)


state 90

    (66) exp_m -> exp_m DIVINT exp_u .

    *               reduce using rule 66 (exp_m -> exp_m DIVINT exp_u .)
    DIVINT          reduce using rule 66 (exp_m -> exp_m DIVINT exp_u .)
    /               reduce using rule 66 (exp_m -> exp_m DIVINT exp_u .)
    +               reduce using rule 66 (exp_m -> exp_m DIVINT exp_u .)
    -               reduce using rule 66 (exp_m -> exp_m DIVINT exp_u .)
    E               reduce using rule 66 (exp_m -> exp_m DIVINT exp_u .)
    OU              reduce using rule 66 (exp_m -> exp_m DIVINT exp_u .)
    :               reduce using rule 66 (exp_m -> exp_m DIVINT exp_u .)
    NOVALINHA       reduce using rule 66 (exp_m -> exp_m DIVINT exp_u .)
    FIM             reduce using rule 66 (exp_m -> exp_m DIVINT exp_u .)
    SENAOSE         reduce using rule 66 (exp_m -> exp_m DIVINT exp_u .)
    SENAO           reduce using rule 66 (exp_m -> exp_m DIVINT exp_u .)


state 91

    (65) exp_m -> exp_m * exp_u .

    *               reduce using rule 65 (exp_m -> exp_m * exp_u .)
    DIVINT          reduce using rule 65 (exp_m -> exp_m * exp_u .)
    /               reduce using rule 65 (exp_m -> exp_m * exp_u .)
    +               reduce using rule 65 (exp_m -> exp_m * exp_u .)
    -               reduce using rule 65 (exp_m -> exp_m * exp_u .)
    E               reduce using rule 65 (exp_m -> exp_m * exp_u .)
    OU              reduce using rule 65 (exp_m -> exp_m * exp_u .)
    :               reduce using rule 65 (exp_m -> exp_m * exp_u .)
    NOVALINHA       reduce using rule 65 (exp_m -> exp_m * exp_u .)
    FIM             reduce using rule 65 (exp_m -> exp_m * exp_u .)
    SENAOSE         reduce using rule 65 (exp_m -> exp_m * exp_u .)
    SENAO           reduce using rule 65 (exp_m -> exp_m * exp_u .)


state 92

    (67) exp_m -> exp_m / exp_u .

    *               reduce using rule 67 (exp_m -> exp_m / exp_u .)
    DIVINT          reduce using rule 67 (exp_m -> exp_m / exp_u .)
    /               reduce using rule 67 (exp_m -> exp_m / exp_u .)
    +               reduce using rule 67 (exp_m -> exp_m / exp_u .)
    -               reduce using rule 67 (exp_m -> exp_m / exp_u .)
    E               reduce using rule 67 (exp_m -> exp_m / exp_u .)
    OU              reduce using rule 67 (exp_m -> exp_m / exp_u .)
    :               reduce using rule 67 (exp_m -> exp_m / exp_u .)
    NOVALINHA       reduce using rule 67 (exp_m -> exp_m / exp_u .)
    FIM             reduce using rule 67 (exp_m -> exp_m / exp_u .)
    SENAOSE         reduce using rule 67 (exp_m -> exp_m / exp_u .)
    SENAO           reduce using rule 67 (exp_m -> exp_m / exp_u .)


state 93

    (77) suite -> afirmacao .
    (78) suite -> afirmacao . NOVALINHA suite

    FIM             reduce using rule 77 (suite -> afirmacao .)
    SENAOSE         reduce using rule 77 (suite -> afirmacao .)
    SENAO           reduce using rule 77 (suite -> afirmacao .)
    NOVALINHA       shift and go to state 123


state 94

    (81) afirmacao -> afirm_simples .

    NOVALINHA       reduce using rule 81 (afirmacao -> afirm_simples .)
    FIM             reduce using rule 81 (afirmacao -> afirm_simples .)
    SENAOSE         reduce using rule 81 (afirmacao -> afirm_simples .)
    SENAO           reduce using rule 81 (afirmacao -> afirm_simples .)


state 95

    (90) afirm_composto -> enquanto .

    NOVALINHA       reduce using rule 90 (afirm_composto -> enquanto .)
    SENAOSE         reduce using rule 90 (afirm_composto -> enquanto .)
    SENAO           reduce using rule 90 (afirm_composto -> enquanto .)
    FIM             reduce using rule 90 (afirm_composto -> enquanto .)


state 96

    (84) afirm_simples -> atribuicao_aumentada .

    NOVALINHA       reduce using rule 84 (afirm_simples -> atribuicao_aumentada .)
    FIM             reduce using rule 84 (afirm_simples -> atribuicao_aumentada .)
    SENAOSE         reduce using rule 84 (afirm_simples -> atribuicao_aumentada .)
    SENAO           reduce using rule 84 (afirm_simples -> atribuicao_aumentada .)


state 97

    (86) afirm_simples -> retorna .

    NOVALINHA       reduce using rule 86 (afirm_simples -> retorna .)
    FIM             reduce using rule 86 (afirm_simples -> retorna .)
    SENAOSE         reduce using rule 86 (afirm_simples -> retorna .)
    SENAO           reduce using rule 86 (afirm_simples -> retorna .)


state 98

    (22) enquanto -> ENQUANTO expressao : suite . FIM

    FIM             shift and go to state 124


state 99

    (80) suite -> empty .

    FIM             reduce using rule 80 (suite -> empty .)
    SENAOSE         reduce using rule 80 (suite -> empty .)
    SENAO           reduce using rule 80 (suite -> empty .)


state 100

    (85) afirm_simples -> imprime .

    NOVALINHA       reduce using rule 85 (afirm_simples -> imprime .)
    FIM             reduce using rule 85 (afirm_simples -> imprime .)
    SENAOSE         reduce using rule 85 (afirm_simples -> imprime .)
    SENAO           reduce using rule 85 (afirm_simples -> imprime .)


state 101

    (82) afirmacao -> afirm_composto .

    NOVALINHA       reduce using rule 82 (afirmacao -> afirm_composto .)
    FIM             reduce using rule 82 (afirmacao -> afirm_composto .)
    SENAOSE         reduce using rule 82 (afirmacao -> afirm_composto .)
    SENAO           reduce using rule 82 (afirmacao -> afirm_composto .)


state 102

    (91) afirm_composto -> para .

    NOVALINHA       reduce using rule 91 (afirm_composto -> para .)
    SENAOSE         reduce using rule 91 (afirm_composto -> para .)
    SENAO           reduce using rule 91 (afirm_composto -> para .)
    FIM             reduce using rule 91 (afirm_composto -> para .)


state 103

    (56) retorna -> RETORNA . expressao
    (38) expressao -> . exp_ou
    (71) exp_ou -> . exp_e
    (72) exp_ou -> . exp_ou OU exp_e
    (73) exp_e -> . exp_nao
    (74) exp_e -> . exp_e E exp_nao
    (75) exp_nao -> . exp_a
    (76) exp_nao -> . ! exp_nao
    (68) exp_a -> . exp_m
    (69) exp_a -> . exp_a + exp_m
    (70) exp_a -> . exp_a - exp_m
    (64) exp_m -> . exp_u
    (65) exp_m -> . exp_m * exp_u
    (66) exp_m -> . exp_m DIVINT exp_u
    (67) exp_m -> . exp_m / exp_u
    (49) exp_u -> . exponenciacao
    (50) exp_u -> . - exp_u
    (51) exp_u -> . + exp_u
    (47) exponenciacao -> . comparacao
    (48) exponenciacao -> . comparacao EXP exp_u
    (39) comparacao -> . valor
    (40) comparacao -> . valor operador_comp valor
    (34) valor -> . ID
    (35) valor -> . literal
    (36) valor -> . chamada
    (37) valor -> . CONSTANTE
    (93) literal -> . PALAVRA
    (94) literal -> . INT
    (95) literal -> . REAL
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )

    !               shift and go to state 43
    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    exp_e                          shift and go to state 30
    exp_a                          shift and go to state 31
    comparacao                     shift and go to state 32
    exp_m                          shift and go to state 33
    expressao                      shift and go to state 125
    chamada                        shift and go to state 41
    valor                          shift and go to state 40
    exp_u                          shift and go to state 37
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    exp_nao                        shift and go to state 47
    exp_ou                         shift and go to state 42

state 104

    (79) suite -> NOVALINHA . suite
    (77) suite -> . afirmacao
    (78) suite -> . afirmacao NOVALINHA suite
    (79) suite -> . NOVALINHA suite
    (80) suite -> . empty
    (81) afirmacao -> . afirm_simples
    (82) afirmacao -> . afirm_composto
    (15) empty -> .
    (83) afirm_simples -> . atribuicao
    (84) afirm_simples -> . atribuicao_aumentada
    (85) afirm_simples -> . imprime
    (86) afirm_simples -> . retorna
    (87) afirm_simples -> . QUEBRA
    (88) afirm_simples -> . CONTINUA
    (89) afirm_composto -> . se
    (90) afirm_composto -> . enquanto
    (91) afirm_composto -> . para
    (28) atribuicao -> . ID [ INT ] = valor
    (29) atribuicao -> . ID = valor
    (92) atribuicao_aumentada -> . ID op_aum valor
    (57) imprime -> . IMPRIME expressao
    (56) retorna -> . RETORNA expressao
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    NOVALINHA       shift and go to state 104
    FIM             reduce using rule 15 (empty -> .)
    SENAOSE         reduce using rule 15 (empty -> .)
    SENAO           reduce using rule 15 (empty -> .)
    QUEBRA          shift and go to state 108
    CONTINUA        shift and go to state 109
    ID              shift and go to state 105
    IMPRIME         shift and go to state 106
    RETORNA         shift and go to state 103
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    imprime                        shift and go to state 100
    enquanto                       shift and go to state 95
    afirm_composto                 shift and go to state 101
    atribuicao_aumentada           shift and go to state 96
    atribuicao                     shift and go to state 107
    afirmacao                      shift and go to state 93
    para                           shift and go to state 102
    se                             shift and go to state 110
    retorna                        shift and go to state 97
    suite                          shift and go to state 126
    afirm_simples                  shift and go to state 94
    empty                          shift and go to state 99

state 105

    (28) atribuicao -> ID . [ INT ] = valor
    (29) atribuicao -> ID . = valor
    (92) atribuicao_aumentada -> ID . op_aum valor
    (58) op_aum -> . MAISIG
    (59) op_aum -> . MENOSIG
    (60) op_aum -> . MULTIG
    (61) op_aum -> . DIVIG
    (62) op_aum -> . MODIG
    (63) op_aum -> . EXPIG

    [               shift and go to state 27
    =               shift and go to state 28
    MAISIG          shift and go to state 130
    MENOSIG         shift and go to state 128
    MULTIG          shift and go to state 132
    DIVIG           shift and go to state 129
    MODIG           shift and go to state 133
    EXPIG           shift and go to state 127

    op_aum                         shift and go to state 131

state 106

    (57) imprime -> IMPRIME . expressao
    (38) expressao -> . exp_ou
    (71) exp_ou -> . exp_e
    (72) exp_ou -> . exp_ou OU exp_e
    (73) exp_e -> . exp_nao
    (74) exp_e -> . exp_e E exp_nao
    (75) exp_nao -> . exp_a
    (76) exp_nao -> . ! exp_nao
    (68) exp_a -> . exp_m
    (69) exp_a -> . exp_a + exp_m
    (70) exp_a -> . exp_a - exp_m
    (64) exp_m -> . exp_u
    (65) exp_m -> . exp_m * exp_u
    (66) exp_m -> . exp_m DIVINT exp_u
    (67) exp_m -> . exp_m / exp_u
    (49) exp_u -> . exponenciacao
    (50) exp_u -> . - exp_u
    (51) exp_u -> . + exp_u
    (47) exponenciacao -> . comparacao
    (48) exponenciacao -> . comparacao EXP exp_u
    (39) comparacao -> . valor
    (40) comparacao -> . valor operador_comp valor
    (34) valor -> . ID
    (35) valor -> . literal
    (36) valor -> . chamada
    (37) valor -> . CONSTANTE
    (93) literal -> . PALAVRA
    (94) literal -> . INT
    (95) literal -> . REAL
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )

    !               shift and go to state 43
    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    exp_e                          shift and go to state 30
    exp_a                          shift and go to state 31
    comparacao                     shift and go to state 32
    exp_m                          shift and go to state 33
    expressao                      shift and go to state 134
    chamada                        shift and go to state 41
    valor                          shift and go to state 40
    exp_u                          shift and go to state 37
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    exp_nao                        shift and go to state 47
    exp_ou                         shift and go to state 42

state 107

    (83) afirm_simples -> atribuicao .

    NOVALINHA       reduce using rule 83 (afirm_simples -> atribuicao .)
    FIM             reduce using rule 83 (afirm_simples -> atribuicao .)
    SENAOSE         reduce using rule 83 (afirm_simples -> atribuicao .)
    SENAO           reduce using rule 83 (afirm_simples -> atribuicao .)


state 108

    (87) afirm_simples -> QUEBRA .

    NOVALINHA       reduce using rule 87 (afirm_simples -> QUEBRA .)
    FIM             reduce using rule 87 (afirm_simples -> QUEBRA .)
    SENAOSE         reduce using rule 87 (afirm_simples -> QUEBRA .)
    SENAO           reduce using rule 87 (afirm_simples -> QUEBRA .)


state 109

    (88) afirm_simples -> CONTINUA .

    NOVALINHA       reduce using rule 88 (afirm_simples -> CONTINUA .)
    FIM             reduce using rule 88 (afirm_simples -> CONTINUA .)
    SENAOSE         reduce using rule 88 (afirm_simples -> CONTINUA .)
    SENAO           reduce using rule 88 (afirm_simples -> CONTINUA .)


state 110

    (89) afirm_composto -> se .

    NOVALINHA       reduce using rule 89 (afirm_composto -> se .)
    SENAOSE         reduce using rule 89 (afirm_composto -> se .)
    SENAO           reduce using rule 89 (afirm_composto -> se .)
    FIM             reduce using rule 89 (afirm_composto -> se .)


state 111

    (40) comparacao -> valor operador_comp valor .

    EXP             reduce using rule 40 (comparacao -> valor operador_comp valor .)
    *               reduce using rule 40 (comparacao -> valor operador_comp valor .)
    DIVINT          reduce using rule 40 (comparacao -> valor operador_comp valor .)
    /               reduce using rule 40 (comparacao -> valor operador_comp valor .)
    +               reduce using rule 40 (comparacao -> valor operador_comp valor .)
    -               reduce using rule 40 (comparacao -> valor operador_comp valor .)
    E               reduce using rule 40 (comparacao -> valor operador_comp valor .)
    OU              reduce using rule 40 (comparacao -> valor operador_comp valor .)
    :               reduce using rule 40 (comparacao -> valor operador_comp valor .)
    NOVALINHA       reduce using rule 40 (comparacao -> valor operador_comp valor .)
    FIM             reduce using rule 40 (comparacao -> valor operador_comp valor .)
    SENAOSE         reduce using rule 40 (comparacao -> valor operador_comp valor .)
    SENAO           reduce using rule 40 (comparacao -> valor operador_comp valor .)


state 112

    (72) exp_ou -> exp_ou OU exp_e .
    (74) exp_e -> exp_e . E exp_nao

    OU              reduce using rule 72 (exp_ou -> exp_ou OU exp_e .)
    NOVALINHA       reduce using rule 72 (exp_ou -> exp_ou OU exp_e .)
    FIM             reduce using rule 72 (exp_ou -> exp_ou OU exp_e .)
    SENAOSE         reduce using rule 72 (exp_ou -> exp_ou OU exp_e .)
    SENAO           reduce using rule 72 (exp_ou -> exp_ou OU exp_e .)
    :               reduce using rule 72 (exp_ou -> exp_ou OU exp_e .)
    E               shift and go to state 57


state 113

    (21) se -> SE expressao : suite . senaosemais senao FIM
    (16) senaosemais -> . senaose senaosemais
    (17) senaosemais -> . empty
    (18) senaose -> . SENAOSE expressao : suite
    (15) empty -> .

    SENAOSE         shift and go to state 136
    SENAO           reduce using rule 15 (empty -> .)
    FIM             reduce using rule 15 (empty -> .)

    senaosemais                    shift and go to state 135
    senaose                        shift and go to state 138
    empty                          shift and go to state 137

state 114

    (25) para -> PARA ID DE intid ATE . intid : suite FIM
    (23) intid -> . INT
    (24) intid -> . ID

    INT             shift and go to state 77
    ID              shift and go to state 79

    intid                          shift and go to state 139

state 115

    (52) param -> declaracao .

    ,               reduce using rule 52 (param -> declaracao .)
    )               reduce using rule 52 (param -> declaracao .)


state 116

    (53) params -> param . , params
    (54) params -> param .

    ,               shift and go to state 140
    )               reduce using rule 54 (params -> param .)


state 117

    (26) definicao -> DEF TIPO ID ( params . ) : suite FIM

    )               shift and go to state 141


state 118

    (55) params -> empty .

    )               reduce using rule 55 (params -> empty .)


state 119

    (27) defsubfuncao -> DEF VAZIO ID ( params . ) : suite FIM

    )               shift and go to state 142


state 120

    (30) valorvalor -> , valor . valorvalor
    (30) valorvalor -> . , valor valorvalor
    (31) valorvalor -> . empty
    (15) empty -> .

    ,               shift and go to state 82
    )               reduce using rule 15 (empty -> .)

    empty                          shift and go to state 83
    valorvalor                     shift and go to state 143

state 121

    (32) chamada -> ID ( valor valorvalor ) .

    <               reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    >               reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    IGUIG           reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    MAIORIG         reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    MENORIG         reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    DIF             reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    EXP             reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    *               reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    DIVINT          reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    /               reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    +               reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    -               reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    E               reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    OU              reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    :               reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    NOVALINHA       reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    FIM             reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    SENAOSE         reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    SENAO           reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    TIPO            reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    DEF             reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    ID              reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    SE              reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    ENQUANTO        reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    PARA            reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    $end            reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    ,               reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)
    )               reduce using rule 32 (chamada -> ID ( valor valorvalor ) .)


state 122

    (28) atribuicao -> ID [ INT ] = . valor
    (34) valor -> . ID
    (35) valor -> . literal
    (36) valor -> . chamada
    (37) valor -> . CONSTANTE
    (93) literal -> . PALAVRA
    (94) literal -> . INT
    (95) literal -> . REAL
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )

    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    literal                        shift and go to state 38
    chamada                        shift and go to state 41
    valor                          shift and go to state 144

state 123

    (78) suite -> afirmacao NOVALINHA . suite
    (77) suite -> . afirmacao
    (78) suite -> . afirmacao NOVALINHA suite
    (79) suite -> . NOVALINHA suite
    (80) suite -> . empty
    (81) afirmacao -> . afirm_simples
    (82) afirmacao -> . afirm_composto
    (15) empty -> .
    (83) afirm_simples -> . atribuicao
    (84) afirm_simples -> . atribuicao_aumentada
    (85) afirm_simples -> . imprime
    (86) afirm_simples -> . retorna
    (87) afirm_simples -> . QUEBRA
    (88) afirm_simples -> . CONTINUA
    (89) afirm_composto -> . se
    (90) afirm_composto -> . enquanto
    (91) afirm_composto -> . para
    (28) atribuicao -> . ID [ INT ] = valor
    (29) atribuicao -> . ID = valor
    (92) atribuicao_aumentada -> . ID op_aum valor
    (57) imprime -> . IMPRIME expressao
    (56) retorna -> . RETORNA expressao
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    NOVALINHA       shift and go to state 104
    FIM             reduce using rule 15 (empty -> .)
    SENAOSE         reduce using rule 15 (empty -> .)
    SENAO           reduce using rule 15 (empty -> .)
    QUEBRA          shift and go to state 108
    CONTINUA        shift and go to state 109
    ID              shift and go to state 105
    IMPRIME         shift and go to state 106
    RETORNA         shift and go to state 103
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    imprime                        shift and go to state 100
    enquanto                       shift and go to state 95
    afirm_composto                 shift and go to state 101
    atribuicao_aumentada           shift and go to state 96
    atribuicao                     shift and go to state 107
    afirmacao                      shift and go to state 93
    para                           shift and go to state 102
    se                             shift and go to state 110
    retorna                        shift and go to state 97
    suite                          shift and go to state 145
    afirm_simples                  shift and go to state 94
    empty                          shift and go to state 99

state 124

    (22) enquanto -> ENQUANTO expressao : suite FIM .

    NOVALINHA       reduce using rule 22 (enquanto -> ENQUANTO expressao : suite FIM .)
    TIPO            reduce using rule 22 (enquanto -> ENQUANTO expressao : suite FIM .)
    DEF             reduce using rule 22 (enquanto -> ENQUANTO expressao : suite FIM .)
    ID              reduce using rule 22 (enquanto -> ENQUANTO expressao : suite FIM .)
    SE              reduce using rule 22 (enquanto -> ENQUANTO expressao : suite FIM .)
    ENQUANTO        reduce using rule 22 (enquanto -> ENQUANTO expressao : suite FIM .)
    PARA            reduce using rule 22 (enquanto -> ENQUANTO expressao : suite FIM .)
    $end            reduce using rule 22 (enquanto -> ENQUANTO expressao : suite FIM .)
    SENAOSE         reduce using rule 22 (enquanto -> ENQUANTO expressao : suite FIM .)
    SENAO           reduce using rule 22 (enquanto -> ENQUANTO expressao : suite FIM .)
    FIM             reduce using rule 22 (enquanto -> ENQUANTO expressao : suite FIM .)


state 125

    (56) retorna -> RETORNA expressao .

    NOVALINHA       reduce using rule 56 (retorna -> RETORNA expressao .)
    FIM             reduce using rule 56 (retorna -> RETORNA expressao .)
    SENAOSE         reduce using rule 56 (retorna -> RETORNA expressao .)
    SENAO           reduce using rule 56 (retorna -> RETORNA expressao .)


state 126

    (79) suite -> NOVALINHA suite .

    FIM             reduce using rule 79 (suite -> NOVALINHA suite .)
    SENAOSE         reduce using rule 79 (suite -> NOVALINHA suite .)
    SENAO           reduce using rule 79 (suite -> NOVALINHA suite .)


state 127

    (63) op_aum -> EXPIG .

    ID              reduce using rule 63 (op_aum -> EXPIG .)
    CONSTANTE       reduce using rule 63 (op_aum -> EXPIG .)
    PALAVRA         reduce using rule 63 (op_aum -> EXPIG .)
    INT             reduce using rule 63 (op_aum -> EXPIG .)
    REAL            reduce using rule 63 (op_aum -> EXPIG .)


state 128

    (59) op_aum -> MENOSIG .

    ID              reduce using rule 59 (op_aum -> MENOSIG .)
    CONSTANTE       reduce using rule 59 (op_aum -> MENOSIG .)
    PALAVRA         reduce using rule 59 (op_aum -> MENOSIG .)
    INT             reduce using rule 59 (op_aum -> MENOSIG .)
    REAL            reduce using rule 59 (op_aum -> MENOSIG .)


state 129

    (61) op_aum -> DIVIG .

    ID              reduce using rule 61 (op_aum -> DIVIG .)
    CONSTANTE       reduce using rule 61 (op_aum -> DIVIG .)
    PALAVRA         reduce using rule 61 (op_aum -> DIVIG .)
    INT             reduce using rule 61 (op_aum -> DIVIG .)
    REAL            reduce using rule 61 (op_aum -> DIVIG .)


state 130

    (58) op_aum -> MAISIG .

    ID              reduce using rule 58 (op_aum -> MAISIG .)
    CONSTANTE       reduce using rule 58 (op_aum -> MAISIG .)
    PALAVRA         reduce using rule 58 (op_aum -> MAISIG .)
    INT             reduce using rule 58 (op_aum -> MAISIG .)
    REAL            reduce using rule 58 (op_aum -> MAISIG .)


state 131

    (92) atribuicao_aumentada -> ID op_aum . valor
    (34) valor -> . ID
    (35) valor -> . literal
    (36) valor -> . chamada
    (37) valor -> . CONSTANTE
    (93) literal -> . PALAVRA
    (94) literal -> . INT
    (95) literal -> . REAL
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )

    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    literal                        shift and go to state 38
    chamada                        shift and go to state 41
    valor                          shift and go to state 146

state 132

    (60) op_aum -> MULTIG .

    ID              reduce using rule 60 (op_aum -> MULTIG .)
    CONSTANTE       reduce using rule 60 (op_aum -> MULTIG .)
    PALAVRA         reduce using rule 60 (op_aum -> MULTIG .)
    INT             reduce using rule 60 (op_aum -> MULTIG .)
    REAL            reduce using rule 60 (op_aum -> MULTIG .)


state 133

    (62) op_aum -> MODIG .

    ID              reduce using rule 62 (op_aum -> MODIG .)
    CONSTANTE       reduce using rule 62 (op_aum -> MODIG .)
    PALAVRA         reduce using rule 62 (op_aum -> MODIG .)
    INT             reduce using rule 62 (op_aum -> MODIG .)
    REAL            reduce using rule 62 (op_aum -> MODIG .)


state 134

    (57) imprime -> IMPRIME expressao .

    NOVALINHA       reduce using rule 57 (imprime -> IMPRIME expressao .)
    FIM             reduce using rule 57 (imprime -> IMPRIME expressao .)
    SENAOSE         reduce using rule 57 (imprime -> IMPRIME expressao .)
    SENAO           reduce using rule 57 (imprime -> IMPRIME expressao .)


state 135

    (21) se -> SE expressao : suite senaosemais . senao FIM
    (19) senao -> . SENAO : suite
    (20) senao -> . empty
    (15) empty -> .

    SENAO           shift and go to state 148
    FIM             reduce using rule 15 (empty -> .)

    senao                          shift and go to state 147
    empty                          shift and go to state 149

state 136

    (18) senaose -> SENAOSE . expressao : suite
    (38) expressao -> . exp_ou
    (71) exp_ou -> . exp_e
    (72) exp_ou -> . exp_ou OU exp_e
    (73) exp_e -> . exp_nao
    (74) exp_e -> . exp_e E exp_nao
    (75) exp_nao -> . exp_a
    (76) exp_nao -> . ! exp_nao
    (68) exp_a -> . exp_m
    (69) exp_a -> . exp_a + exp_m
    (70) exp_a -> . exp_a - exp_m
    (64) exp_m -> . exp_u
    (65) exp_m -> . exp_m * exp_u
    (66) exp_m -> . exp_m DIVINT exp_u
    (67) exp_m -> . exp_m / exp_u
    (49) exp_u -> . exponenciacao
    (50) exp_u -> . - exp_u
    (51) exp_u -> . + exp_u
    (47) exponenciacao -> . comparacao
    (48) exponenciacao -> . comparacao EXP exp_u
    (39) comparacao -> . valor
    (40) comparacao -> . valor operador_comp valor
    (34) valor -> . ID
    (35) valor -> . literal
    (36) valor -> . chamada
    (37) valor -> . CONSTANTE
    (93) literal -> . PALAVRA
    (94) literal -> . INT
    (95) literal -> . REAL
    (32) chamada -> . ID ( valor valorvalor )
    (33) chamada -> . ID ( )

    !               shift and go to state 43
    -               shift and go to state 36
    +               shift and go to state 35
    ID              shift and go to state 45
    CONSTANTE       shift and go to state 46
    PALAVRA         shift and go to state 44
    INT             shift and go to state 48
    REAL            shift and go to state 29

    exp_e                          shift and go to state 30
    exp_a                          shift and go to state 31
    comparacao                     shift and go to state 32
    exp_m                          shift and go to state 33
    expressao                      shift and go to state 150
    chamada                        shift and go to state 41
    valor                          shift and go to state 40
    exp_u                          shift and go to state 37
    literal                        shift and go to state 38
    exponenciacao                  shift and go to state 39
    exp_nao                        shift and go to state 47
    exp_ou                         shift and go to state 42

state 137

    (17) senaosemais -> empty .

    SENAO           reduce using rule 17 (senaosemais -> empty .)
    FIM             reduce using rule 17 (senaosemais -> empty .)


state 138

    (16) senaosemais -> senaose . senaosemais
    (16) senaosemais -> . senaose senaosemais
    (17) senaosemais -> . empty
    (18) senaose -> . SENAOSE expressao : suite
    (15) empty -> .

    SENAOSE         shift and go to state 136
    SENAO           reduce using rule 15 (empty -> .)
    FIM             reduce using rule 15 (empty -> .)

    senaosemais                    shift and go to state 151
    senaose                        shift and go to state 138
    empty                          shift and go to state 137

state 139

    (25) para -> PARA ID DE intid ATE intid . : suite FIM

    :               shift and go to state 152


state 140

    (53) params -> param , . params
    (53) params -> . param , params
    (54) params -> . param
    (55) params -> . empty
    (52) param -> . declaracao
    (15) empty -> .
    (14) declaracao -> . TIPO ID

    )               reduce using rule 15 (empty -> .)
    TIPO            shift and go to state 5

    declaracao                     shift and go to state 115
    params                         shift and go to state 153
    empty                          shift and go to state 118
    param                          shift and go to state 116

state 141

    (26) definicao -> DEF TIPO ID ( params ) . : suite FIM

    :               shift and go to state 154


state 142

    (27) defsubfuncao -> DEF VAZIO ID ( params ) . : suite FIM

    :               shift and go to state 155


state 143

    (30) valorvalor -> , valor valorvalor .

    )               reduce using rule 30 (valorvalor -> , valor valorvalor .)


state 144

    (28) atribuicao -> ID [ INT ] = valor .

    NOVALINHA       reduce using rule 28 (atribuicao -> ID [ INT ] = valor .)
    FIM             reduce using rule 28 (atribuicao -> ID [ INT ] = valor .)
    SENAOSE         reduce using rule 28 (atribuicao -> ID [ INT ] = valor .)
    SENAO           reduce using rule 28 (atribuicao -> ID [ INT ] = valor .)
    TIPO            reduce using rule 28 (atribuicao -> ID [ INT ] = valor .)
    DEF             reduce using rule 28 (atribuicao -> ID [ INT ] = valor .)
    ID              reduce using rule 28 (atribuicao -> ID [ INT ] = valor .)
    SE              reduce using rule 28 (atribuicao -> ID [ INT ] = valor .)
    ENQUANTO        reduce using rule 28 (atribuicao -> ID [ INT ] = valor .)
    PARA            reduce using rule 28 (atribuicao -> ID [ INT ] = valor .)
    $end            reduce using rule 28 (atribuicao -> ID [ INT ] = valor .)


state 145

    (78) suite -> afirmacao NOVALINHA suite .

    FIM             reduce using rule 78 (suite -> afirmacao NOVALINHA suite .)
    SENAOSE         reduce using rule 78 (suite -> afirmacao NOVALINHA suite .)
    SENAO           reduce using rule 78 (suite -> afirmacao NOVALINHA suite .)


state 146

    (92) atribuicao_aumentada -> ID op_aum valor .

    NOVALINHA       reduce using rule 92 (atribuicao_aumentada -> ID op_aum valor .)
    FIM             reduce using rule 92 (atribuicao_aumentada -> ID op_aum valor .)
    SENAOSE         reduce using rule 92 (atribuicao_aumentada -> ID op_aum valor .)
    SENAO           reduce using rule 92 (atribuicao_aumentada -> ID op_aum valor .)


state 147

    (21) se -> SE expressao : suite senaosemais senao . FIM

    FIM             shift and go to state 156


state 148

    (19) senao -> SENAO . : suite

    :               shift and go to state 157


state 149

    (20) senao -> empty .

    FIM             reduce using rule 20 (senao -> empty .)


state 150

    (18) senaose -> SENAOSE expressao . : suite

    :               shift and go to state 158


state 151

    (16) senaosemais -> senaose senaosemais .

    SENAO           reduce using rule 16 (senaosemais -> senaose senaosemais .)
    FIM             reduce using rule 16 (senaosemais -> senaose senaosemais .)


state 152

    (25) para -> PARA ID DE intid ATE intid : . suite FIM
    (77) suite -> . afirmacao
    (78) suite -> . afirmacao NOVALINHA suite
    (79) suite -> . NOVALINHA suite
    (80) suite -> . empty
    (81) afirmacao -> . afirm_simples
    (82) afirmacao -> . afirm_composto
    (15) empty -> .
    (83) afirm_simples -> . atribuicao
    (84) afirm_simples -> . atribuicao_aumentada
    (85) afirm_simples -> . imprime
    (86) afirm_simples -> . retorna
    (87) afirm_simples -> . QUEBRA
    (88) afirm_simples -> . CONTINUA
    (89) afirm_composto -> . se
    (90) afirm_composto -> . enquanto
    (91) afirm_composto -> . para
    (28) atribuicao -> . ID [ INT ] = valor
    (29) atribuicao -> . ID = valor
    (92) atribuicao_aumentada -> . ID op_aum valor
    (57) imprime -> . IMPRIME expressao
    (56) retorna -> . RETORNA expressao
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    NOVALINHA       shift and go to state 104
    FIM             reduce using rule 15 (empty -> .)
    QUEBRA          shift and go to state 108
    CONTINUA        shift and go to state 109
    ID              shift and go to state 105
    IMPRIME         shift and go to state 106
    RETORNA         shift and go to state 103
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    imprime                        shift and go to state 100
    enquanto                       shift and go to state 95
    afirm_composto                 shift and go to state 101
    atribuicao_aumentada           shift and go to state 96
    atribuicao                     shift and go to state 107
    afirmacao                      shift and go to state 93
    para                           shift and go to state 102
    se                             shift and go to state 110
    retorna                        shift and go to state 97
    suite                          shift and go to state 159
    afirm_simples                  shift and go to state 94
    empty                          shift and go to state 99

state 153

    (53) params -> param , params .

    )               reduce using rule 53 (params -> param , params .)


state 154

    (26) definicao -> DEF TIPO ID ( params ) : . suite FIM
    (77) suite -> . afirmacao
    (78) suite -> . afirmacao NOVALINHA suite
    (79) suite -> . NOVALINHA suite
    (80) suite -> . empty
    (81) afirmacao -> . afirm_simples
    (82) afirmacao -> . afirm_composto
    (15) empty -> .
    (83) afirm_simples -> . atribuicao
    (84) afirm_simples -> . atribuicao_aumentada
    (85) afirm_simples -> . imprime
    (86) afirm_simples -> . retorna
    (87) afirm_simples -> . QUEBRA
    (88) afirm_simples -> . CONTINUA
    (89) afirm_composto -> . se
    (90) afirm_composto -> . enquanto
    (91) afirm_composto -> . para
    (28) atribuicao -> . ID [ INT ] = valor
    (29) atribuicao -> . ID = valor
    (92) atribuicao_aumentada -> . ID op_aum valor
    (57) imprime -> . IMPRIME expressao
    (56) retorna -> . RETORNA expressao
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    NOVALINHA       shift and go to state 104
    FIM             reduce using rule 15 (empty -> .)
    QUEBRA          shift and go to state 108
    CONTINUA        shift and go to state 109
    ID              shift and go to state 105
    IMPRIME         shift and go to state 106
    RETORNA         shift and go to state 103
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    imprime                        shift and go to state 100
    enquanto                       shift and go to state 95
    afirm_composto                 shift and go to state 101
    atribuicao_aumentada           shift and go to state 96
    atribuicao                     shift and go to state 107
    afirmacao                      shift and go to state 93
    para                           shift and go to state 102
    se                             shift and go to state 110
    retorna                        shift and go to state 97
    suite                          shift and go to state 160
    afirm_simples                  shift and go to state 94
    empty                          shift and go to state 99

state 155

    (27) defsubfuncao -> DEF VAZIO ID ( params ) : . suite FIM
    (77) suite -> . afirmacao
    (78) suite -> . afirmacao NOVALINHA suite
    (79) suite -> . NOVALINHA suite
    (80) suite -> . empty
    (81) afirmacao -> . afirm_simples
    (82) afirmacao -> . afirm_composto
    (15) empty -> .
    (83) afirm_simples -> . atribuicao
    (84) afirm_simples -> . atribuicao_aumentada
    (85) afirm_simples -> . imprime
    (86) afirm_simples -> . retorna
    (87) afirm_simples -> . QUEBRA
    (88) afirm_simples -> . CONTINUA
    (89) afirm_composto -> . se
    (90) afirm_composto -> . enquanto
    (91) afirm_composto -> . para
    (28) atribuicao -> . ID [ INT ] = valor
    (29) atribuicao -> . ID = valor
    (92) atribuicao_aumentada -> . ID op_aum valor
    (57) imprime -> . IMPRIME expressao
    (56) retorna -> . RETORNA expressao
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    NOVALINHA       shift and go to state 104
    FIM             reduce using rule 15 (empty -> .)
    QUEBRA          shift and go to state 108
    CONTINUA        shift and go to state 109
    ID              shift and go to state 105
    IMPRIME         shift and go to state 106
    RETORNA         shift and go to state 103
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    imprime                        shift and go to state 100
    enquanto                       shift and go to state 95
    afirm_composto                 shift and go to state 101
    atribuicao_aumentada           shift and go to state 96
    atribuicao                     shift and go to state 107
    afirmacao                      shift and go to state 93
    para                           shift and go to state 102
    se                             shift and go to state 110
    retorna                        shift and go to state 97
    suite                          shift and go to state 161
    afirm_simples                  shift and go to state 94
    empty                          shift and go to state 99

state 156

    (21) se -> SE expressao : suite senaosemais senao FIM .

    NOVALINHA       reduce using rule 21 (se -> SE expressao : suite senaosemais senao FIM .)
    FIM             reduce using rule 21 (se -> SE expressao : suite senaosemais senao FIM .)
    SENAOSE         reduce using rule 21 (se -> SE expressao : suite senaosemais senao FIM .)
    SENAO           reduce using rule 21 (se -> SE expressao : suite senaosemais senao FIM .)
    TIPO            reduce using rule 21 (se -> SE expressao : suite senaosemais senao FIM .)
    DEF             reduce using rule 21 (se -> SE expressao : suite senaosemais senao FIM .)
    ID              reduce using rule 21 (se -> SE expressao : suite senaosemais senao FIM .)
    SE              reduce using rule 21 (se -> SE expressao : suite senaosemais senao FIM .)
    ENQUANTO        reduce using rule 21 (se -> SE expressao : suite senaosemais senao FIM .)
    PARA            reduce using rule 21 (se -> SE expressao : suite senaosemais senao FIM .)
    $end            reduce using rule 21 (se -> SE expressao : suite senaosemais senao FIM .)


state 157

    (19) senao -> SENAO : . suite
    (77) suite -> . afirmacao
    (78) suite -> . afirmacao NOVALINHA suite
    (79) suite -> . NOVALINHA suite
    (80) suite -> . empty
    (81) afirmacao -> . afirm_simples
    (82) afirmacao -> . afirm_composto
    (15) empty -> .
    (83) afirm_simples -> . atribuicao
    (84) afirm_simples -> . atribuicao_aumentada
    (85) afirm_simples -> . imprime
    (86) afirm_simples -> . retorna
    (87) afirm_simples -> . QUEBRA
    (88) afirm_simples -> . CONTINUA
    (89) afirm_composto -> . se
    (90) afirm_composto -> . enquanto
    (91) afirm_composto -> . para
    (28) atribuicao -> . ID [ INT ] = valor
    (29) atribuicao -> . ID = valor
    (92) atribuicao_aumentada -> . ID op_aum valor
    (57) imprime -> . IMPRIME expressao
    (56) retorna -> . RETORNA expressao
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    NOVALINHA       shift and go to state 104
    FIM             reduce using rule 15 (empty -> .)
    QUEBRA          shift and go to state 108
    CONTINUA        shift and go to state 109
    ID              shift and go to state 105
    IMPRIME         shift and go to state 106
    RETORNA         shift and go to state 103
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    imprime                        shift and go to state 100
    enquanto                       shift and go to state 95
    afirm_composto                 shift and go to state 101
    atribuicao_aumentada           shift and go to state 96
    atribuicao                     shift and go to state 107
    afirmacao                      shift and go to state 93
    para                           shift and go to state 102
    se                             shift and go to state 110
    retorna                        shift and go to state 97
    suite                          shift and go to state 162
    afirm_simples                  shift and go to state 94
    empty                          shift and go to state 99

state 158

    (18) senaose -> SENAOSE expressao : . suite
    (77) suite -> . afirmacao
    (78) suite -> . afirmacao NOVALINHA suite
    (79) suite -> . NOVALINHA suite
    (80) suite -> . empty
    (81) afirmacao -> . afirm_simples
    (82) afirmacao -> . afirm_composto
    (15) empty -> .
    (83) afirm_simples -> . atribuicao
    (84) afirm_simples -> . atribuicao_aumentada
    (85) afirm_simples -> . imprime
    (86) afirm_simples -> . retorna
    (87) afirm_simples -> . QUEBRA
    (88) afirm_simples -> . CONTINUA
    (89) afirm_composto -> . se
    (90) afirm_composto -> . enquanto
    (91) afirm_composto -> . para
    (28) atribuicao -> . ID [ INT ] = valor
    (29) atribuicao -> . ID = valor
    (92) atribuicao_aumentada -> . ID op_aum valor
    (57) imprime -> . IMPRIME expressao
    (56) retorna -> . RETORNA expressao
    (21) se -> . SE expressao : suite senaosemais senao FIM
    (22) enquanto -> . ENQUANTO expressao : suite FIM
    (25) para -> . PARA ID DE intid ATE intid : suite FIM

    NOVALINHA       shift and go to state 104
    SENAOSE         reduce using rule 15 (empty -> .)
    SENAO           reduce using rule 15 (empty -> .)
    FIM             reduce using rule 15 (empty -> .)
    QUEBRA          shift and go to state 108
    CONTINUA        shift and go to state 109
    ID              shift and go to state 105
    IMPRIME         shift and go to state 106
    RETORNA         shift and go to state 103
    SE              shift and go to state 17
    ENQUANTO        shift and go to state 14
    PARA            shift and go to state 1

    imprime                        shift and go to state 100
    enquanto                       shift and go to state 95
    afirm_composto                 shift and go to state 101
    atribuicao_aumentada           shift and go to state 96
    afirmacao                      shift and go to state 93
    para                           shift and go to state 102
    se                             shift and go to state 110
    retorna                        shift and go to state 97
    atribuicao                     shift and go to state 107
    suite                          shift and go to state 163
    afirm_simples                  shift and go to state 94
    empty                          shift and go to state 99

state 159

    (25) para -> PARA ID DE intid ATE intid : suite . FIM

    FIM             shift and go to state 164


state 160

    (26) definicao -> DEF TIPO ID ( params ) : suite . FIM

    FIM             shift and go to state 165


state 161

    (27) defsubfuncao -> DEF VAZIO ID ( params ) : suite . FIM

    FIM             shift and go to state 166


state 162

    (19) senao -> SENAO : suite .

    FIM             reduce using rule 19 (senao -> SENAO : suite .)


state 163

    (18) senaose -> SENAOSE expressao : suite .

    SENAOSE         reduce using rule 18 (senaose -> SENAOSE expressao : suite .)
    SENAO           reduce using rule 18 (senaose -> SENAOSE expressao : suite .)
    FIM             reduce using rule 18 (senaose -> SENAOSE expressao : suite .)


state 164

    (25) para -> PARA ID DE intid ATE intid : suite FIM .

    NOVALINHA       reduce using rule 25 (para -> PARA ID DE intid ATE intid : suite FIM .)
    FIM             reduce using rule 25 (para -> PARA ID DE intid ATE intid : suite FIM .)
    SENAOSE         reduce using rule 25 (para -> PARA ID DE intid ATE intid : suite FIM .)
    SENAO           reduce using rule 25 (para -> PARA ID DE intid ATE intid : suite FIM .)
    TIPO            reduce using rule 25 (para -> PARA ID DE intid ATE intid : suite FIM .)
    DEF             reduce using rule 25 (para -> PARA ID DE intid ATE intid : suite FIM .)
    ID              reduce using rule 25 (para -> PARA ID DE intid ATE intid : suite FIM .)
    SE              reduce using rule 25 (para -> PARA ID DE intid ATE intid : suite FIM .)
    ENQUANTO        reduce using rule 25 (para -> PARA ID DE intid ATE intid : suite FIM .)
    PARA            reduce using rule 25 (para -> PARA ID DE intid ATE intid : suite FIM .)
    $end            reduce using rule 25 (para -> PARA ID DE intid ATE intid : suite FIM .)


state 165

    (26) definicao -> DEF TIPO ID ( params ) : suite FIM .

    NOVALINHA       reduce using rule 26 (definicao -> DEF TIPO ID ( params ) : suite FIM .)
    TIPO            reduce using rule 26 (definicao -> DEF TIPO ID ( params ) : suite FIM .)
    DEF             reduce using rule 26 (definicao -> DEF TIPO ID ( params ) : suite FIM .)
    ID              reduce using rule 26 (definicao -> DEF TIPO ID ( params ) : suite FIM .)
    SE              reduce using rule 26 (definicao -> DEF TIPO ID ( params ) : suite FIM .)
    ENQUANTO        reduce using rule 26 (definicao -> DEF TIPO ID ( params ) : suite FIM .)
    PARA            reduce using rule 26 (definicao -> DEF TIPO ID ( params ) : suite FIM .)
    $end            reduce using rule 26 (definicao -> DEF TIPO ID ( params ) : suite FIM .)


state 166

    (27) defsubfuncao -> DEF VAZIO ID ( params ) : suite FIM .

    NOVALINHA       reduce using rule 27 (defsubfuncao -> DEF VAZIO ID ( params ) : suite FIM .)
    TIPO            reduce using rule 27 (defsubfuncao -> DEF VAZIO ID ( params ) : suite FIM .)
    DEF             reduce using rule 27 (defsubfuncao -> DEF VAZIO ID ( params ) : suite FIM .)
    ID              reduce using rule 27 (defsubfuncao -> DEF VAZIO ID ( params ) : suite FIM .)
    SE              reduce using rule 27 (defsubfuncao -> DEF VAZIO ID ( params ) : suite FIM .)
    ENQUANTO        reduce using rule 27 (defsubfuncao -> DEF VAZIO ID ( params ) : suite FIM .)
    PARA            reduce using rule 27 (defsubfuncao -> DEF VAZIO ID ( params ) : suite FIM .)
    $end            reduce using rule 27 (defsubfuncao -> DEF VAZIO ID ( params ) : suite FIM .)

